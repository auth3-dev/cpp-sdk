// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: admin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[85]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
namespace depot {
namespace devtools {
namespace auth {
namespace v0 {
namespace identity {
namespace admin {
class CreateConnectionRequest;
class CreateConnectionRequestDefaultTypeInternal;
extern CreateConnectionRequestDefaultTypeInternal _CreateConnectionRequest_default_instance_;
class CreateConnectionResponse;
class CreateConnectionResponseDefaultTypeInternal;
extern CreateConnectionResponseDefaultTypeInternal _CreateConnectionResponse_default_instance_;
class CreateIdSchemaRequest;
class CreateIdSchemaRequestDefaultTypeInternal;
extern CreateIdSchemaRequestDefaultTypeInternal _CreateIdSchemaRequest_default_instance_;
class CreateIdSchemaResponse;
class CreateIdSchemaResponseDefaultTypeInternal;
extern CreateIdSchemaResponseDefaultTypeInternal _CreateIdSchemaResponse_default_instance_;
class CreateIdentityRequest;
class CreateIdentityRequestDefaultTypeInternal;
extern CreateIdentityRequestDefaultTypeInternal _CreateIdentityRequest_default_instance_;
class CreateIdentityResponse;
class CreateIdentityResponseDefaultTypeInternal;
extern CreateIdentityResponseDefaultTypeInternal _CreateIdentityResponse_default_instance_;
class CreateOAuth2ClientRequest;
class CreateOAuth2ClientRequestDefaultTypeInternal;
extern CreateOAuth2ClientRequestDefaultTypeInternal _CreateOAuth2ClientRequest_default_instance_;
class CreateOAuth2ClientResponse;
class CreateOAuth2ClientResponseDefaultTypeInternal;
extern CreateOAuth2ClientResponseDefaultTypeInternal _CreateOAuth2ClientResponse_default_instance_;
class DeleteConnectionRequest;
class DeleteConnectionRequestDefaultTypeInternal;
extern DeleteConnectionRequestDefaultTypeInternal _DeleteConnectionRequest_default_instance_;
class DeleteConnectionResponse;
class DeleteConnectionResponseDefaultTypeInternal;
extern DeleteConnectionResponseDefaultTypeInternal _DeleteConnectionResponse_default_instance_;
class DeleteIdSchemaRequest;
class DeleteIdSchemaRequestDefaultTypeInternal;
extern DeleteIdSchemaRequestDefaultTypeInternal _DeleteIdSchemaRequest_default_instance_;
class DeleteIdSchemaResponse;
class DeleteIdSchemaResponseDefaultTypeInternal;
extern DeleteIdSchemaResponseDefaultTypeInternal _DeleteIdSchemaResponse_default_instance_;
class DeleteIdentityRequest;
class DeleteIdentityRequestDefaultTypeInternal;
extern DeleteIdentityRequestDefaultTypeInternal _DeleteIdentityRequest_default_instance_;
class DeleteIdentityResponse;
class DeleteIdentityResponseDefaultTypeInternal;
extern DeleteIdentityResponseDefaultTypeInternal _DeleteIdentityResponse_default_instance_;
class DeleteOAuth2ClientRequest;
class DeleteOAuth2ClientRequestDefaultTypeInternal;
extern DeleteOAuth2ClientRequestDefaultTypeInternal _DeleteOAuth2ClientRequest_default_instance_;
class DeleteOAuth2ClientResponse;
class DeleteOAuth2ClientResponseDefaultTypeInternal;
extern DeleteOAuth2ClientResponseDefaultTypeInternal _DeleteOAuth2ClientResponse_default_instance_;
class GetAddressRequest;
class GetAddressRequestDefaultTypeInternal;
extern GetAddressRequestDefaultTypeInternal _GetAddressRequest_default_instance_;
class GetAddressResponse;
class GetAddressResponseDefaultTypeInternal;
extern GetAddressResponseDefaultTypeInternal _GetAddressResponse_default_instance_;
class GetAddressesRequest;
class GetAddressesRequestDefaultTypeInternal;
extern GetAddressesRequestDefaultTypeInternal _GetAddressesRequest_default_instance_;
class GetAddressesResponse;
class GetAddressesResponseDefaultTypeInternal;
extern GetAddressesResponseDefaultTypeInternal _GetAddressesResponse_default_instance_;
class GetAddressesResponse_Address;
class GetAddressesResponse_AddressDefaultTypeInternal;
extern GetAddressesResponse_AddressDefaultTypeInternal _GetAddressesResponse_Address_default_instance_;
class GetConnectionsRequest;
class GetConnectionsRequestDefaultTypeInternal;
extern GetConnectionsRequestDefaultTypeInternal _GetConnectionsRequest_default_instance_;
class GetConnectionsResponse;
class GetConnectionsResponseDefaultTypeInternal;
extern GetConnectionsResponseDefaultTypeInternal _GetConnectionsResponse_default_instance_;
class GetConnectionsResponse_Connection;
class GetConnectionsResponse_ConnectionDefaultTypeInternal;
extern GetConnectionsResponse_ConnectionDefaultTypeInternal _GetConnectionsResponse_Connection_default_instance_;
class GetCredentialsRequest;
class GetCredentialsRequestDefaultTypeInternal;
extern GetCredentialsRequestDefaultTypeInternal _GetCredentialsRequest_default_instance_;
class GetCredentialsResponse;
class GetCredentialsResponseDefaultTypeInternal;
extern GetCredentialsResponseDefaultTypeInternal _GetCredentialsResponse_default_instance_;
class GetCredentialsResponse_Credential;
class GetCredentialsResponse_CredentialDefaultTypeInternal;
extern GetCredentialsResponse_CredentialDefaultTypeInternal _GetCredentialsResponse_Credential_default_instance_;
class GetCredentialsResponse_CredentialsEntry_DoNotUse;
class GetCredentialsResponse_CredentialsEntry_DoNotUseDefaultTypeInternal;
extern GetCredentialsResponse_CredentialsEntry_DoNotUseDefaultTypeInternal _GetCredentialsResponse_CredentialsEntry_DoNotUse_default_instance_;
class GetDefaultIdSchemaRequest;
class GetDefaultIdSchemaRequestDefaultTypeInternal;
extern GetDefaultIdSchemaRequestDefaultTypeInternal _GetDefaultIdSchemaRequest_default_instance_;
class GetDefaultIdSchemaResponse;
class GetDefaultIdSchemaResponseDefaultTypeInternal;
extern GetDefaultIdSchemaResponseDefaultTypeInternal _GetDefaultIdSchemaResponse_default_instance_;
class GetEmailsSetupRequest;
class GetEmailsSetupRequestDefaultTypeInternal;
extern GetEmailsSetupRequestDefaultTypeInternal _GetEmailsSetupRequest_default_instance_;
class GetEmailsSetupResponse;
class GetEmailsSetupResponseDefaultTypeInternal;
extern GetEmailsSetupResponseDefaultTypeInternal _GetEmailsSetupResponse_default_instance_;
class GetEmailsSetupResponse_EmailSender;
class GetEmailsSetupResponse_EmailSenderDefaultTypeInternal;
extern GetEmailsSetupResponse_EmailSenderDefaultTypeInternal _GetEmailsSetupResponse_EmailSender_default_instance_;
class GetEmailsSetupResponse_EmailTemplate;
class GetEmailsSetupResponse_EmailTemplateDefaultTypeInternal;
extern GetEmailsSetupResponse_EmailTemplateDefaultTypeInternal _GetEmailsSetupResponse_EmailTemplate_default_instance_;
class GetIdSchemaRequest;
class GetIdSchemaRequestDefaultTypeInternal;
extern GetIdSchemaRequestDefaultTypeInternal _GetIdSchemaRequest_default_instance_;
class GetIdSchemaResponse;
class GetIdSchemaResponseDefaultTypeInternal;
extern GetIdSchemaResponseDefaultTypeInternal _GetIdSchemaResponse_default_instance_;
class GetIdSchemasRequest;
class GetIdSchemasRequestDefaultTypeInternal;
extern GetIdSchemasRequestDefaultTypeInternal _GetIdSchemasRequest_default_instance_;
class GetIdSchemasResponse;
class GetIdSchemasResponseDefaultTypeInternal;
extern GetIdSchemasResponseDefaultTypeInternal _GetIdSchemasResponse_default_instance_;
class GetIdSchemasResponse_JsonSchema;
class GetIdSchemasResponse_JsonSchemaDefaultTypeInternal;
extern GetIdSchemasResponse_JsonSchemaDefaultTypeInternal _GetIdSchemasResponse_JsonSchema_default_instance_;
class GetIdentitiesByAttributeRequest;
class GetIdentitiesByAttributeRequestDefaultTypeInternal;
extern GetIdentitiesByAttributeRequestDefaultTypeInternal _GetIdentitiesByAttributeRequest_default_instance_;
class GetIdentitiesByAttributeResponse;
class GetIdentitiesByAttributeResponseDefaultTypeInternal;
extern GetIdentitiesByAttributeResponseDefaultTypeInternal _GetIdentitiesByAttributeResponse_default_instance_;
class GetIdentitiesByAttributeResponse_Identity;
class GetIdentitiesByAttributeResponse_IdentityDefaultTypeInternal;
extern GetIdentitiesByAttributeResponse_IdentityDefaultTypeInternal _GetIdentitiesByAttributeResponse_Identity_default_instance_;
class GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse;
class GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUseDefaultTypeInternal;
extern GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUseDefaultTypeInternal _GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse_default_instance_;
class GetIdentitiesRequest;
class GetIdentitiesRequestDefaultTypeInternal;
extern GetIdentitiesRequestDefaultTypeInternal _GetIdentitiesRequest_default_instance_;
class GetIdentitiesResponse;
class GetIdentitiesResponseDefaultTypeInternal;
extern GetIdentitiesResponseDefaultTypeInternal _GetIdentitiesResponse_default_instance_;
class GetIdentitiesResponse_Identity;
class GetIdentitiesResponse_IdentityDefaultTypeInternal;
extern GetIdentitiesResponse_IdentityDefaultTypeInternal _GetIdentitiesResponse_Identity_default_instance_;
class GetIdentityByIdentifierRequest;
class GetIdentityByIdentifierRequestDefaultTypeInternal;
extern GetIdentityByIdentifierRequestDefaultTypeInternal _GetIdentityByIdentifierRequest_default_instance_;
class GetIdentityByIdentifierResponse;
class GetIdentityByIdentifierResponseDefaultTypeInternal;
extern GetIdentityByIdentifierResponseDefaultTypeInternal _GetIdentityByIdentifierResponse_default_instance_;
class GetIdentityByIdentifierResponse_Identity;
class GetIdentityByIdentifierResponse_IdentityDefaultTypeInternal;
extern GetIdentityByIdentifierResponse_IdentityDefaultTypeInternal _GetIdentityByIdentifierResponse_Identity_default_instance_;
class GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse;
class GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUseDefaultTypeInternal;
extern GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUseDefaultTypeInternal _GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse_default_instance_;
class GetIdentityLoginAttemptsRequest;
class GetIdentityLoginAttemptsRequestDefaultTypeInternal;
extern GetIdentityLoginAttemptsRequestDefaultTypeInternal _GetIdentityLoginAttemptsRequest_default_instance_;
class GetIdentityLoginAttemptsResponse;
class GetIdentityLoginAttemptsResponseDefaultTypeInternal;
extern GetIdentityLoginAttemptsResponseDefaultTypeInternal _GetIdentityLoginAttemptsResponse_default_instance_;
class GetIdentityLoginAttemptsResponse_Attempt;
class GetIdentityLoginAttemptsResponse_AttemptDefaultTypeInternal;
extern GetIdentityLoginAttemptsResponse_AttemptDefaultTypeInternal _GetIdentityLoginAttemptsResponse_Attempt_default_instance_;
class GetIdentityRequest;
class GetIdentityRequestDefaultTypeInternal;
extern GetIdentityRequestDefaultTypeInternal _GetIdentityRequest_default_instance_;
class GetIdentityResponse;
class GetIdentityResponseDefaultTypeInternal;
extern GetIdentityResponseDefaultTypeInternal _GetIdentityResponse_default_instance_;
class GetIdentityResponse_CredentialsIdsEntry_DoNotUse;
class GetIdentityResponse_CredentialsIdsEntry_DoNotUseDefaultTypeInternal;
extern GetIdentityResponse_CredentialsIdsEntry_DoNotUseDefaultTypeInternal _GetIdentityResponse_CredentialsIdsEntry_DoNotUse_default_instance_;
class GetOAuth2ClientsRequest;
class GetOAuth2ClientsRequestDefaultTypeInternal;
extern GetOAuth2ClientsRequestDefaultTypeInternal _GetOAuth2ClientsRequest_default_instance_;
class GetOAuth2ClientsResponse;
class GetOAuth2ClientsResponseDefaultTypeInternal;
extern GetOAuth2ClientsResponseDefaultTypeInternal _GetOAuth2ClientsResponse_default_instance_;
class GetOAuth2ClientsResponse_Client;
class GetOAuth2ClientsResponse_ClientDefaultTypeInternal;
extern GetOAuth2ClientsResponse_ClientDefaultTypeInternal _GetOAuth2ClientsResponse_Client_default_instance_;
class GetProfileRequest;
class GetProfileRequestDefaultTypeInternal;
extern GetProfileRequestDefaultTypeInternal _GetProfileRequest_default_instance_;
class GetProfileResponse;
class GetProfileResponseDefaultTypeInternal;
extern GetProfileResponseDefaultTypeInternal _GetProfileResponse_default_instance_;
class GetUserBaseStatisticsRequest;
class GetUserBaseStatisticsRequestDefaultTypeInternal;
extern GetUserBaseStatisticsRequestDefaultTypeInternal _GetUserBaseStatisticsRequest_default_instance_;
class GetUserBaseStatisticsResponse;
class GetUserBaseStatisticsResponseDefaultTypeInternal;
extern GetUserBaseStatisticsResponseDefaultTypeInternal _GetUserBaseStatisticsResponse_default_instance_;
class GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse;
class GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUseDefaultTypeInternal;
extern GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUseDefaultTypeInternal _GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse_default_instance_;
class GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse;
class GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUseDefaultTypeInternal;
extern GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUseDefaultTypeInternal _GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse_default_instance_;
class MarkDefaultIdSchemaRequest;
class MarkDefaultIdSchemaRequestDefaultTypeInternal;
extern MarkDefaultIdSchemaRequestDefaultTypeInternal _MarkDefaultIdSchemaRequest_default_instance_;
class MarkDefaultIdSchemaResponse;
class MarkDefaultIdSchemaResponseDefaultTypeInternal;
extern MarkDefaultIdSchemaResponseDefaultTypeInternal _MarkDefaultIdSchemaResponse_default_instance_;
class UpdateAddressRequest;
class UpdateAddressRequestDefaultTypeInternal;
extern UpdateAddressRequestDefaultTypeInternal _UpdateAddressRequest_default_instance_;
class UpdateAddressResponse;
class UpdateAddressResponseDefaultTypeInternal;
extern UpdateAddressResponseDefaultTypeInternal _UpdateAddressResponse_default_instance_;
class UpdateConnectionRequest;
class UpdateConnectionRequestDefaultTypeInternal;
extern UpdateConnectionRequestDefaultTypeInternal _UpdateConnectionRequest_default_instance_;
class UpdateConnectionResponse;
class UpdateConnectionResponseDefaultTypeInternal;
extern UpdateConnectionResponseDefaultTypeInternal _UpdateConnectionResponse_default_instance_;
class UpdateCredentialRequest;
class UpdateCredentialRequestDefaultTypeInternal;
extern UpdateCredentialRequestDefaultTypeInternal _UpdateCredentialRequest_default_instance_;
class UpdateCredentialResponse;
class UpdateCredentialResponseDefaultTypeInternal;
extern UpdateCredentialResponseDefaultTypeInternal _UpdateCredentialResponse_default_instance_;
class UpdateEmailsSetupRequest;
class UpdateEmailsSetupRequestDefaultTypeInternal;
extern UpdateEmailsSetupRequestDefaultTypeInternal _UpdateEmailsSetupRequest_default_instance_;
class UpdateEmailsSetupRequest_EmailSender;
class UpdateEmailsSetupRequest_EmailSenderDefaultTypeInternal;
extern UpdateEmailsSetupRequest_EmailSenderDefaultTypeInternal _UpdateEmailsSetupRequest_EmailSender_default_instance_;
class UpdateEmailsSetupRequest_EmailTemplate;
class UpdateEmailsSetupRequest_EmailTemplateDefaultTypeInternal;
extern UpdateEmailsSetupRequest_EmailTemplateDefaultTypeInternal _UpdateEmailsSetupRequest_EmailTemplate_default_instance_;
class UpdateEmailsSetupResponse;
class UpdateEmailsSetupResponseDefaultTypeInternal;
extern UpdateEmailsSetupResponseDefaultTypeInternal _UpdateEmailsSetupResponse_default_instance_;
class UpdateIdSchemaRequest;
class UpdateIdSchemaRequestDefaultTypeInternal;
extern UpdateIdSchemaRequestDefaultTypeInternal _UpdateIdSchemaRequest_default_instance_;
class UpdateIdSchemaResponse;
class UpdateIdSchemaResponseDefaultTypeInternal;
extern UpdateIdSchemaResponseDefaultTypeInternal _UpdateIdSchemaResponse_default_instance_;
class UpdateIdentityRequest;
class UpdateIdentityRequestDefaultTypeInternal;
extern UpdateIdentityRequestDefaultTypeInternal _UpdateIdentityRequest_default_instance_;
class UpdateIdentityResponse;
class UpdateIdentityResponseDefaultTypeInternal;
extern UpdateIdentityResponseDefaultTypeInternal _UpdateIdentityResponse_default_instance_;
class UpdateOAuth2ClientRequest;
class UpdateOAuth2ClientRequestDefaultTypeInternal;
extern UpdateOAuth2ClientRequestDefaultTypeInternal _UpdateOAuth2ClientRequest_default_instance_;
class UpdateOAuth2ClientResponse;
class UpdateOAuth2ClientResponseDefaultTypeInternal;
extern UpdateOAuth2ClientResponseDefaultTypeInternal _UpdateOAuth2ClientResponse_default_instance_;
class UpdateProfileRequest;
class UpdateProfileRequestDefaultTypeInternal;
extern UpdateProfileRequestDefaultTypeInternal _UpdateProfileRequest_default_instance_;
class UpdateProfileResponse;
class UpdateProfileResponseDefaultTypeInternal;
extern UpdateProfileResponseDefaultTypeInternal _UpdateProfileResponse_default_instance_;
}  // namespace admin
}  // namespace identity
}  // namespace v0
}  // namespace auth
}  // namespace devtools
}  // namespace depot
PROTOBUF_NAMESPACE_OPEN
template<> ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::CreateConnectionResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::CreateConnectionResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::CreateIdSchemaRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::CreateIdSchemaRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::CreateIdSchemaResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::CreateIdSchemaResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::CreateIdentityRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::CreateIdentityRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::CreateIdentityResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::CreateIdentityResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::CreateOAuth2ClientRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::CreateOAuth2ClientRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::CreateOAuth2ClientResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::CreateOAuth2ClientResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::DeleteConnectionRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::DeleteConnectionRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::DeleteConnectionResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::DeleteConnectionResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::DeleteIdSchemaRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::DeleteIdSchemaRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::DeleteIdSchemaResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::DeleteIdSchemaResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::DeleteIdentityRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::DeleteIdentityRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::DeleteIdentityResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::DeleteIdentityResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::DeleteOAuth2ClientRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::DeleteOAuth2ClientRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::DeleteOAuth2ClientResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::DeleteOAuth2ClientResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetAddressRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetAddressRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetAddressResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetAddressResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetAddressesRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetAddressesRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetAddressesResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetConnectionsRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetConnectionsRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetCredentialsRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetCredentialsRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_CredentialsEntry_DoNotUse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_CredentialsEntry_DoNotUse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetDefaultIdSchemaRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetDefaultIdSchemaRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetDefaultIdSchemaResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetDefaultIdSchemaResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetEmailsSetupRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdSchemaRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdSchemaRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdSchemaResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdSchemaResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdSchemasRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdSchemasRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentitiesRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentitiesRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentityRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentityRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentityResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentityResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_CredentialsIdsEntry_DoNotUse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_CredentialsIdsEntry_DoNotUse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetProfileRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetProfileRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetProfileResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetProfileResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetUserBaseStatisticsRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetUserBaseStatisticsRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetUserBaseStatisticsResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetUserBaseStatisticsResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::MarkDefaultIdSchemaRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::MarkDefaultIdSchemaRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::MarkDefaultIdSchemaResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::MarkDefaultIdSchemaResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateAddressRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateAddressRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateAddressResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateAddressResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateConnectionResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateConnectionResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateCredentialRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateCredentialRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateCredentialResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateCredentialResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateIdSchemaRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateIdSchemaRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateIdSchemaResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateIdSchemaResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateIdentityResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateIdentityResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateOAuth2ClientRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateOAuth2ClientRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateOAuth2ClientResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateOAuth2ClientResponse>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateProfileRequest* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateProfileRequest>(Arena*);
template<> ::depot::devtools::auth::v0::identity::admin::UpdateProfileResponse* Arena::CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateProfileResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace depot {
namespace devtools {
namespace auth {
namespace v0 {
namespace identity {
namespace admin {

enum GetIdentitiesResponse_Lock : int {
  GetIdentitiesResponse_Lock_UNLOCKED = 0,
  GetIdentitiesResponse_Lock_ADMIN_LOCKED = 1,
  GetIdentitiesResponse_Lock_GetIdentitiesResponse_Lock_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetIdentitiesResponse_Lock_GetIdentitiesResponse_Lock_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetIdentitiesResponse_Lock_IsValid(int value);
constexpr GetIdentitiesResponse_Lock GetIdentitiesResponse_Lock_Lock_MIN = GetIdentitiesResponse_Lock_UNLOCKED;
constexpr GetIdentitiesResponse_Lock GetIdentitiesResponse_Lock_Lock_MAX = GetIdentitiesResponse_Lock_ADMIN_LOCKED;
constexpr int GetIdentitiesResponse_Lock_Lock_ARRAYSIZE = GetIdentitiesResponse_Lock_Lock_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetIdentitiesResponse_Lock_descriptor();
template<typename T>
inline const std::string& GetIdentitiesResponse_Lock_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetIdentitiesResponse_Lock>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetIdentitiesResponse_Lock_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetIdentitiesResponse_Lock_descriptor(), enum_t_value);
}
inline bool GetIdentitiesResponse_Lock_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetIdentitiesResponse_Lock* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetIdentitiesResponse_Lock>(
    GetIdentitiesResponse_Lock_descriptor(), name, value);
}
enum GetIdentityResponse_Lock : int {
  GetIdentityResponse_Lock_UNLOCKED = 0,
  GetIdentityResponse_Lock_ADMIN_LOCKED = 1,
  GetIdentityResponse_Lock_GetIdentityResponse_Lock_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetIdentityResponse_Lock_GetIdentityResponse_Lock_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetIdentityResponse_Lock_IsValid(int value);
constexpr GetIdentityResponse_Lock GetIdentityResponse_Lock_Lock_MIN = GetIdentityResponse_Lock_UNLOCKED;
constexpr GetIdentityResponse_Lock GetIdentityResponse_Lock_Lock_MAX = GetIdentityResponse_Lock_ADMIN_LOCKED;
constexpr int GetIdentityResponse_Lock_Lock_ARRAYSIZE = GetIdentityResponse_Lock_Lock_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetIdentityResponse_Lock_descriptor();
template<typename T>
inline const std::string& GetIdentityResponse_Lock_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetIdentityResponse_Lock>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetIdentityResponse_Lock_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetIdentityResponse_Lock_descriptor(), enum_t_value);
}
inline bool GetIdentityResponse_Lock_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetIdentityResponse_Lock* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetIdentityResponse_Lock>(
    GetIdentityResponse_Lock_descriptor(), name, value);
}
enum GetIdentityByIdentifierResponse_Identity_Lock : int {
  GetIdentityByIdentifierResponse_Identity_Lock_UNLOCKED = 0,
  GetIdentityByIdentifierResponse_Identity_Lock_ADMIN_LOCKED = 1,
  GetIdentityByIdentifierResponse_Identity_Lock_GetIdentityByIdentifierResponse_Identity_Lock_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetIdentityByIdentifierResponse_Identity_Lock_GetIdentityByIdentifierResponse_Identity_Lock_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetIdentityByIdentifierResponse_Identity_Lock_IsValid(int value);
constexpr GetIdentityByIdentifierResponse_Identity_Lock GetIdentityByIdentifierResponse_Identity_Lock_Lock_MIN = GetIdentityByIdentifierResponse_Identity_Lock_UNLOCKED;
constexpr GetIdentityByIdentifierResponse_Identity_Lock GetIdentityByIdentifierResponse_Identity_Lock_Lock_MAX = GetIdentityByIdentifierResponse_Identity_Lock_ADMIN_LOCKED;
constexpr int GetIdentityByIdentifierResponse_Identity_Lock_Lock_ARRAYSIZE = GetIdentityByIdentifierResponse_Identity_Lock_Lock_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetIdentityByIdentifierResponse_Identity_Lock_descriptor();
template<typename T>
inline const std::string& GetIdentityByIdentifierResponse_Identity_Lock_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetIdentityByIdentifierResponse_Identity_Lock>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetIdentityByIdentifierResponse_Identity_Lock_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetIdentityByIdentifierResponse_Identity_Lock_descriptor(), enum_t_value);
}
inline bool GetIdentityByIdentifierResponse_Identity_Lock_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetIdentityByIdentifierResponse_Identity_Lock* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetIdentityByIdentifierResponse_Identity_Lock>(
    GetIdentityByIdentifierResponse_Identity_Lock_descriptor(), name, value);
}
enum GetIdentitiesByAttributeResponse_Identity_Lock : int {
  GetIdentitiesByAttributeResponse_Identity_Lock_UNLOCKED = 0,
  GetIdentitiesByAttributeResponse_Identity_Lock_ADMIN_LOCKED = 1,
  GetIdentitiesByAttributeResponse_Identity_Lock_GetIdentitiesByAttributeResponse_Identity_Lock_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetIdentitiesByAttributeResponse_Identity_Lock_GetIdentitiesByAttributeResponse_Identity_Lock_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetIdentitiesByAttributeResponse_Identity_Lock_IsValid(int value);
constexpr GetIdentitiesByAttributeResponse_Identity_Lock GetIdentitiesByAttributeResponse_Identity_Lock_Lock_MIN = GetIdentitiesByAttributeResponse_Identity_Lock_UNLOCKED;
constexpr GetIdentitiesByAttributeResponse_Identity_Lock GetIdentitiesByAttributeResponse_Identity_Lock_Lock_MAX = GetIdentitiesByAttributeResponse_Identity_Lock_ADMIN_LOCKED;
constexpr int GetIdentitiesByAttributeResponse_Identity_Lock_Lock_ARRAYSIZE = GetIdentitiesByAttributeResponse_Identity_Lock_Lock_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetIdentitiesByAttributeResponse_Identity_Lock_descriptor();
template<typename T>
inline const std::string& GetIdentitiesByAttributeResponse_Identity_Lock_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetIdentitiesByAttributeResponse_Identity_Lock>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetIdentitiesByAttributeResponse_Identity_Lock_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetIdentitiesByAttributeResponse_Identity_Lock_descriptor(), enum_t_value);
}
inline bool GetIdentitiesByAttributeResponse_Identity_Lock_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetIdentitiesByAttributeResponse_Identity_Lock* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetIdentitiesByAttributeResponse_Identity_Lock>(
    GetIdentitiesByAttributeResponse_Identity_Lock_descriptor(), name, value);
}
enum UpdateIdentityRequest_Lock : int {
  UpdateIdentityRequest_Lock_UNLOCKED = 0,
  UpdateIdentityRequest_Lock_ADMIN_LOCKED = 1,
  UpdateIdentityRequest_Lock_UpdateIdentityRequest_Lock_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdateIdentityRequest_Lock_UpdateIdentityRequest_Lock_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdateIdentityRequest_Lock_IsValid(int value);
constexpr UpdateIdentityRequest_Lock UpdateIdentityRequest_Lock_Lock_MIN = UpdateIdentityRequest_Lock_UNLOCKED;
constexpr UpdateIdentityRequest_Lock UpdateIdentityRequest_Lock_Lock_MAX = UpdateIdentityRequest_Lock_ADMIN_LOCKED;
constexpr int UpdateIdentityRequest_Lock_Lock_ARRAYSIZE = UpdateIdentityRequest_Lock_Lock_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateIdentityRequest_Lock_descriptor();
template<typename T>
inline const std::string& UpdateIdentityRequest_Lock_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateIdentityRequest_Lock>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateIdentityRequest_Lock_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateIdentityRequest_Lock_descriptor(), enum_t_value);
}
inline bool UpdateIdentityRequest_Lock_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateIdentityRequest_Lock* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateIdentityRequest_Lock>(
    UpdateIdentityRequest_Lock_descriptor(), name, value);
}
enum CreateConnectionRequest_Providers : int {
  CreateConnectionRequest_Providers_NONE = 0,
  CreateConnectionRequest_Providers_OPENID = 1,
  CreateConnectionRequest_Providers_AMAZON = 2,
  CreateConnectionRequest_Providers_BITBUCKET = 3,
  CreateConnectionRequest_Providers_BOX = 4,
  CreateConnectionRequest_Providers_DAILYMOTION = 5,
  CreateConnectionRequest_Providers_DEEZER = 6,
  CreateConnectionRequest_Providers_DIGITALOCEAN = 7,
  CreateConnectionRequest_Providers_DISCORD = 8,
  CreateConnectionRequest_Providers_DROPBOX = 9,
  CreateConnectionRequest_Providers_EVEONLINE = 10,
  CreateConnectionRequest_Providers_FACEBOOK = 11,
  CreateConnectionRequest_Providers_FITBIT = 12,
  CreateConnectionRequest_Providers_GITEA = 13,
  CreateConnectionRequest_Providers_GITHUB = 14,
  CreateConnectionRequest_Providers_GITLAB = 15,
  CreateConnectionRequest_Providers_GOOGLE = 16,
  CreateConnectionRequest_Providers_SHOPIFY = 18,
  CreateConnectionRequest_Providers_SOUNDCLOUD = 19,
  CreateConnectionRequest_Providers_SPOTIFY = 20,
  CreateConnectionRequest_Providers_STEAM = 21,
  CreateConnectionRequest_Providers_STRIPE = 22,
  CreateConnectionRequest_Providers_TWITCH = 23,
  CreateConnectionRequest_Providers_UBER = 24,
  CreateConnectionRequest_Providers_WEPAY = 25,
  CreateConnectionRequest_Providers_YAHOO = 26,
  CreateConnectionRequest_Providers_YAMMER = 27,
  CreateConnectionRequest_Providers_HEROKU = 28,
  CreateConnectionRequest_Providers_INSTAGRAM = 29,
  CreateConnectionRequest_Providers_INTERCOM = 30,
  CreateConnectionRequest_Providers_KAKAO = 31,
  CreateConnectionRequest_Providers_LASTFM = 32,
  CreateConnectionRequest_Providers_LINKEDIN = 33,
  CreateConnectionRequest_Providers_LINE = 34,
  CreateConnectionRequest_Providers_ONEDRIVE = 35,
  CreateConnectionRequest_Providers_AZUREAD = 36,
  CreateConnectionRequest_Providers_MICROSOFTONLINE = 37,
  CreateConnectionRequest_Providers_BATTLENET = 38,
  CreateConnectionRequest_Providers_PAYPAL = 39,
  CreateConnectionRequest_Providers_TWITTER = 40,
  CreateConnectionRequest_Providers_SALESFORCE = 41,
  CreateConnectionRequest_Providers_TYPETALK = 42,
  CreateConnectionRequest_Providers_SLACK = 43,
  CreateConnectionRequest_Providers_MEETUP = 44,
  CreateConnectionRequest_Providers_XERO = 46,
  CreateConnectionRequest_Providers_VK = 47,
  CreateConnectionRequest_Providers_NAVER = 48,
  CreateConnectionRequest_Providers_YANDEX = 49,
  CreateConnectionRequest_Providers_NEXTCLOUD = 50,
  CreateConnectionRequest_Providers_APPLE = 52,
  CreateConnectionRequest_Providers_STRAVA = 53,
  CreateConnectionRequest_Providers_CreateConnectionRequest_Providers_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreateConnectionRequest_Providers_CreateConnectionRequest_Providers_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreateConnectionRequest_Providers_IsValid(int value);
constexpr CreateConnectionRequest_Providers CreateConnectionRequest_Providers_Providers_MIN = CreateConnectionRequest_Providers_NONE;
constexpr CreateConnectionRequest_Providers CreateConnectionRequest_Providers_Providers_MAX = CreateConnectionRequest_Providers_STRAVA;
constexpr int CreateConnectionRequest_Providers_Providers_ARRAYSIZE = CreateConnectionRequest_Providers_Providers_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateConnectionRequest_Providers_descriptor();
template<typename T>
inline const std::string& CreateConnectionRequest_Providers_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateConnectionRequest_Providers>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateConnectionRequest_Providers_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateConnectionRequest_Providers_descriptor(), enum_t_value);
}
inline bool CreateConnectionRequest_Providers_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateConnectionRequest_Providers* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateConnectionRequest_Providers>(
    CreateConnectionRequest_Providers_descriptor(), name, value);
}
enum CreateConnectionRequest_Types : int {
  CreateConnectionRequest_Types_UNSET = 0,
  CreateConnectionRequest_Types_PASSWORD = 1,
  CreateConnectionRequest_Types_OTP = 2,
  CreateConnectionRequest_Types_TOTP = 3,
  CreateConnectionRequest_Types_OIDC = 4,
  CreateConnectionRequest_Types_CreateConnectionRequest_Types_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreateConnectionRequest_Types_CreateConnectionRequest_Types_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreateConnectionRequest_Types_IsValid(int value);
constexpr CreateConnectionRequest_Types CreateConnectionRequest_Types_Types_MIN = CreateConnectionRequest_Types_UNSET;
constexpr CreateConnectionRequest_Types CreateConnectionRequest_Types_Types_MAX = CreateConnectionRequest_Types_OIDC;
constexpr int CreateConnectionRequest_Types_Types_ARRAYSIZE = CreateConnectionRequest_Types_Types_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateConnectionRequest_Types_descriptor();
template<typename T>
inline const std::string& CreateConnectionRequest_Types_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateConnectionRequest_Types>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateConnectionRequest_Types_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateConnectionRequest_Types_descriptor(), enum_t_value);
}
inline bool CreateConnectionRequest_Types_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateConnectionRequest_Types* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateConnectionRequest_Types>(
    CreateConnectionRequest_Types_descriptor(), name, value);
}
enum GetConnectionsResponse_Providers : int {
  GetConnectionsResponse_Providers_NONE = 0,
  GetConnectionsResponse_Providers_OPENID = 1,
  GetConnectionsResponse_Providers_AMAZON = 2,
  GetConnectionsResponse_Providers_BITBUCKET = 3,
  GetConnectionsResponse_Providers_BOX = 4,
  GetConnectionsResponse_Providers_DAILYMOTION = 5,
  GetConnectionsResponse_Providers_DEEZER = 6,
  GetConnectionsResponse_Providers_DIGITALOCEAN = 7,
  GetConnectionsResponse_Providers_DISCORD = 8,
  GetConnectionsResponse_Providers_DROPBOX = 9,
  GetConnectionsResponse_Providers_EVEONLINE = 10,
  GetConnectionsResponse_Providers_FACEBOOK = 11,
  GetConnectionsResponse_Providers_FITBIT = 12,
  GetConnectionsResponse_Providers_GITEA = 13,
  GetConnectionsResponse_Providers_GITHUB = 14,
  GetConnectionsResponse_Providers_GITLAB = 15,
  GetConnectionsResponse_Providers_GOOGLE = 16,
  GetConnectionsResponse_Providers_SHOPIFY = 18,
  GetConnectionsResponse_Providers_SOUNDCLOUD = 19,
  GetConnectionsResponse_Providers_SPOTIFY = 20,
  GetConnectionsResponse_Providers_STEAM = 21,
  GetConnectionsResponse_Providers_STRIPE = 22,
  GetConnectionsResponse_Providers_TWITCH = 23,
  GetConnectionsResponse_Providers_UBER = 24,
  GetConnectionsResponse_Providers_WEPAY = 25,
  GetConnectionsResponse_Providers_YAHOO = 26,
  GetConnectionsResponse_Providers_YAMMER = 27,
  GetConnectionsResponse_Providers_HEROKU = 28,
  GetConnectionsResponse_Providers_INSTAGRAM = 29,
  GetConnectionsResponse_Providers_INTERCOM = 30,
  GetConnectionsResponse_Providers_KAKAO = 31,
  GetConnectionsResponse_Providers_LASTFM = 32,
  GetConnectionsResponse_Providers_LINKEDIN = 33,
  GetConnectionsResponse_Providers_LINE = 34,
  GetConnectionsResponse_Providers_ONEDRIVE = 35,
  GetConnectionsResponse_Providers_AZUREAD = 36,
  GetConnectionsResponse_Providers_MICROSOFTONLINE = 37,
  GetConnectionsResponse_Providers_BATTLENET = 38,
  GetConnectionsResponse_Providers_PAYPAL = 39,
  GetConnectionsResponse_Providers_TWITTER = 40,
  GetConnectionsResponse_Providers_SALESFORCE = 41,
  GetConnectionsResponse_Providers_TYPETALK = 42,
  GetConnectionsResponse_Providers_SLACK = 43,
  GetConnectionsResponse_Providers_MEETUP = 44,
  GetConnectionsResponse_Providers_XERO = 46,
  GetConnectionsResponse_Providers_VK = 47,
  GetConnectionsResponse_Providers_NAVER = 48,
  GetConnectionsResponse_Providers_YANDEX = 49,
  GetConnectionsResponse_Providers_NEXTCLOUD = 50,
  GetConnectionsResponse_Providers_APPLE = 52,
  GetConnectionsResponse_Providers_STRAVA = 53,
  GetConnectionsResponse_Providers_GetConnectionsResponse_Providers_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetConnectionsResponse_Providers_GetConnectionsResponse_Providers_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetConnectionsResponse_Providers_IsValid(int value);
constexpr GetConnectionsResponse_Providers GetConnectionsResponse_Providers_Providers_MIN = GetConnectionsResponse_Providers_NONE;
constexpr GetConnectionsResponse_Providers GetConnectionsResponse_Providers_Providers_MAX = GetConnectionsResponse_Providers_STRAVA;
constexpr int GetConnectionsResponse_Providers_Providers_ARRAYSIZE = GetConnectionsResponse_Providers_Providers_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetConnectionsResponse_Providers_descriptor();
template<typename T>
inline const std::string& GetConnectionsResponse_Providers_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetConnectionsResponse_Providers>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetConnectionsResponse_Providers_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetConnectionsResponse_Providers_descriptor(), enum_t_value);
}
inline bool GetConnectionsResponse_Providers_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetConnectionsResponse_Providers* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetConnectionsResponse_Providers>(
    GetConnectionsResponse_Providers_descriptor(), name, value);
}
enum GetConnectionsResponse_Types : int {
  GetConnectionsResponse_Types_UNSET = 0,
  GetConnectionsResponse_Types_PASSWORD = 1,
  GetConnectionsResponse_Types_OTP = 2,
  GetConnectionsResponse_Types_TOTP = 3,
  GetConnectionsResponse_Types_OIDC = 4,
  GetConnectionsResponse_Types_GetConnectionsResponse_Types_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetConnectionsResponse_Types_GetConnectionsResponse_Types_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetConnectionsResponse_Types_IsValid(int value);
constexpr GetConnectionsResponse_Types GetConnectionsResponse_Types_Types_MIN = GetConnectionsResponse_Types_UNSET;
constexpr GetConnectionsResponse_Types GetConnectionsResponse_Types_Types_MAX = GetConnectionsResponse_Types_OIDC;
constexpr int GetConnectionsResponse_Types_Types_ARRAYSIZE = GetConnectionsResponse_Types_Types_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetConnectionsResponse_Types_descriptor();
template<typename T>
inline const std::string& GetConnectionsResponse_Types_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetConnectionsResponse_Types>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetConnectionsResponse_Types_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetConnectionsResponse_Types_descriptor(), enum_t_value);
}
inline bool GetConnectionsResponse_Types_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetConnectionsResponse_Types* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetConnectionsResponse_Types>(
    GetConnectionsResponse_Types_descriptor(), name, value);
}
enum GetConnectionsResponse_Purposes : int {
  GetConnectionsResponse_Purposes_PURPOSE_UNKNOWN = 0,
  GetConnectionsResponse_Purposes_PURPOSE_MAIN_FACTOR = 1,
  GetConnectionsResponse_Purposes_PURPOSE_SECOND_FACTOR = 2,
  GetConnectionsResponse_Purposes_GetConnectionsResponse_Purposes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetConnectionsResponse_Purposes_GetConnectionsResponse_Purposes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetConnectionsResponse_Purposes_IsValid(int value);
constexpr GetConnectionsResponse_Purposes GetConnectionsResponse_Purposes_Purposes_MIN = GetConnectionsResponse_Purposes_PURPOSE_UNKNOWN;
constexpr GetConnectionsResponse_Purposes GetConnectionsResponse_Purposes_Purposes_MAX = GetConnectionsResponse_Purposes_PURPOSE_SECOND_FACTOR;
constexpr int GetConnectionsResponse_Purposes_Purposes_ARRAYSIZE = GetConnectionsResponse_Purposes_Purposes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetConnectionsResponse_Purposes_descriptor();
template<typename T>
inline const std::string& GetConnectionsResponse_Purposes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetConnectionsResponse_Purposes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetConnectionsResponse_Purposes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetConnectionsResponse_Purposes_descriptor(), enum_t_value);
}
inline bool GetConnectionsResponse_Purposes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetConnectionsResponse_Purposes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetConnectionsResponse_Purposes>(
    GetConnectionsResponse_Purposes_descriptor(), name, value);
}
enum UpdateConnectionRequest_Providers : int {
  UpdateConnectionRequest_Providers_NONE = 0,
  UpdateConnectionRequest_Providers_OPENID = 1,
  UpdateConnectionRequest_Providers_AMAZON = 2,
  UpdateConnectionRequest_Providers_BITBUCKET = 3,
  UpdateConnectionRequest_Providers_BOX = 4,
  UpdateConnectionRequest_Providers_DAILYMOTION = 5,
  UpdateConnectionRequest_Providers_DEEZER = 6,
  UpdateConnectionRequest_Providers_DIGITALOCEAN = 7,
  UpdateConnectionRequest_Providers_DISCORD = 8,
  UpdateConnectionRequest_Providers_DROPBOX = 9,
  UpdateConnectionRequest_Providers_EVEONLINE = 10,
  UpdateConnectionRequest_Providers_FACEBOOK = 11,
  UpdateConnectionRequest_Providers_FITBIT = 12,
  UpdateConnectionRequest_Providers_GITEA = 13,
  UpdateConnectionRequest_Providers_GITHUB = 14,
  UpdateConnectionRequest_Providers_GITLAB = 15,
  UpdateConnectionRequest_Providers_GOOGLE = 16,
  UpdateConnectionRequest_Providers_SHOPIFY = 18,
  UpdateConnectionRequest_Providers_SOUNDCLOUD = 19,
  UpdateConnectionRequest_Providers_SPOTIFY = 20,
  UpdateConnectionRequest_Providers_STEAM = 21,
  UpdateConnectionRequest_Providers_STRIPE = 22,
  UpdateConnectionRequest_Providers_TWITCH = 23,
  UpdateConnectionRequest_Providers_UBER = 24,
  UpdateConnectionRequest_Providers_WEPAY = 25,
  UpdateConnectionRequest_Providers_YAHOO = 26,
  UpdateConnectionRequest_Providers_YAMMER = 27,
  UpdateConnectionRequest_Providers_HEROKU = 28,
  UpdateConnectionRequest_Providers_INSTAGRAM = 29,
  UpdateConnectionRequest_Providers_INTERCOM = 30,
  UpdateConnectionRequest_Providers_KAKAO = 31,
  UpdateConnectionRequest_Providers_LASTFM = 32,
  UpdateConnectionRequest_Providers_LINKEDIN = 33,
  UpdateConnectionRequest_Providers_LINE = 34,
  UpdateConnectionRequest_Providers_ONEDRIVE = 35,
  UpdateConnectionRequest_Providers_AZUREAD = 36,
  UpdateConnectionRequest_Providers_MICROSOFTONLINE = 37,
  UpdateConnectionRequest_Providers_BATTLENET = 38,
  UpdateConnectionRequest_Providers_PAYPAL = 39,
  UpdateConnectionRequest_Providers_TWITTER = 40,
  UpdateConnectionRequest_Providers_SALESFORCE = 41,
  UpdateConnectionRequest_Providers_TYPETALK = 42,
  UpdateConnectionRequest_Providers_SLACK = 43,
  UpdateConnectionRequest_Providers_MEETUP = 44,
  UpdateConnectionRequest_Providers_XERO = 46,
  UpdateConnectionRequest_Providers_VK = 47,
  UpdateConnectionRequest_Providers_NAVER = 48,
  UpdateConnectionRequest_Providers_YANDEX = 49,
  UpdateConnectionRequest_Providers_NEXTCLOUD = 50,
  UpdateConnectionRequest_Providers_APPLE = 52,
  UpdateConnectionRequest_Providers_STRAVA = 53,
  UpdateConnectionRequest_Providers_UpdateConnectionRequest_Providers_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdateConnectionRequest_Providers_UpdateConnectionRequest_Providers_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdateConnectionRequest_Providers_IsValid(int value);
constexpr UpdateConnectionRequest_Providers UpdateConnectionRequest_Providers_Providers_MIN = UpdateConnectionRequest_Providers_NONE;
constexpr UpdateConnectionRequest_Providers UpdateConnectionRequest_Providers_Providers_MAX = UpdateConnectionRequest_Providers_STRAVA;
constexpr int UpdateConnectionRequest_Providers_Providers_ARRAYSIZE = UpdateConnectionRequest_Providers_Providers_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateConnectionRequest_Providers_descriptor();
template<typename T>
inline const std::string& UpdateConnectionRequest_Providers_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateConnectionRequest_Providers>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateConnectionRequest_Providers_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateConnectionRequest_Providers_descriptor(), enum_t_value);
}
inline bool UpdateConnectionRequest_Providers_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateConnectionRequest_Providers* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateConnectionRequest_Providers>(
    UpdateConnectionRequest_Providers_descriptor(), name, value);
}
enum UpdateConnectionRequest_Types : int {
  UpdateConnectionRequest_Types_UNSET = 0,
  UpdateConnectionRequest_Types_PASSWORD = 1,
  UpdateConnectionRequest_Types_OTP = 2,
  UpdateConnectionRequest_Types_TOTP = 3,
  UpdateConnectionRequest_Types_OIDC = 4,
  UpdateConnectionRequest_Types_UpdateConnectionRequest_Types_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdateConnectionRequest_Types_UpdateConnectionRequest_Types_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdateConnectionRequest_Types_IsValid(int value);
constexpr UpdateConnectionRequest_Types UpdateConnectionRequest_Types_Types_MIN = UpdateConnectionRequest_Types_UNSET;
constexpr UpdateConnectionRequest_Types UpdateConnectionRequest_Types_Types_MAX = UpdateConnectionRequest_Types_OIDC;
constexpr int UpdateConnectionRequest_Types_Types_ARRAYSIZE = UpdateConnectionRequest_Types_Types_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateConnectionRequest_Types_descriptor();
template<typename T>
inline const std::string& UpdateConnectionRequest_Types_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateConnectionRequest_Types>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateConnectionRequest_Types_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateConnectionRequest_Types_descriptor(), enum_t_value);
}
inline bool UpdateConnectionRequest_Types_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateConnectionRequest_Types* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateConnectionRequest_Types>(
    UpdateConnectionRequest_Types_descriptor(), name, value);
}
enum ClientType : int {
  CLIENT_TYPE_UNSET = 0,
  CLIENT_FIRST_PARTY = 1,
  CLIENT_THIRD_PARTY = 2,
  CLIENT_SYSTEM_PARTY = 3,
  ClientType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientType_IsValid(int value);
constexpr ClientType ClientType_MIN = CLIENT_TYPE_UNSET;
constexpr ClientType ClientType_MAX = CLIENT_SYSTEM_PARTY;
constexpr int ClientType_ARRAYSIZE = ClientType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientType_descriptor();
template<typename T>
inline const std::string& ClientType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientType_descriptor(), enum_t_value);
}
inline bool ClientType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientType>(
    ClientType_descriptor(), name, value);
}
enum SubjectType : int {
  SUBJECT_TYPE_PUBLIC = 0,
  SUBJECT_TYPE_PAIRWISE = 1,
  SubjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SubjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SubjectType_IsValid(int value);
constexpr SubjectType SubjectType_MIN = SUBJECT_TYPE_PUBLIC;
constexpr SubjectType SubjectType_MAX = SUBJECT_TYPE_PAIRWISE;
constexpr int SubjectType_ARRAYSIZE = SubjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubjectType_descriptor();
template<typename T>
inline const std::string& SubjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubjectType_descriptor(), enum_t_value);
}
inline bool SubjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubjectType>(
    SubjectType_descriptor(), name, value);
}
enum TokenEndpointAuthMethod : int {
  TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC = 0,
  TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_POST = 1,
  TOKEN_ENDPOINT_AUTH_METHOD_PRIVATE_KEY_JWT = 2,
  TOKEN_ENDPOINT_AUTH_METHOD_NONE = 3,
  TokenEndpointAuthMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TokenEndpointAuthMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TokenEndpointAuthMethod_IsValid(int value);
constexpr TokenEndpointAuthMethod TokenEndpointAuthMethod_MIN = TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC;
constexpr TokenEndpointAuthMethod TokenEndpointAuthMethod_MAX = TOKEN_ENDPOINT_AUTH_METHOD_NONE;
constexpr int TokenEndpointAuthMethod_ARRAYSIZE = TokenEndpointAuthMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TokenEndpointAuthMethod_descriptor();
template<typename T>
inline const std::string& TokenEndpointAuthMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TokenEndpointAuthMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TokenEndpointAuthMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TokenEndpointAuthMethod_descriptor(), enum_t_value);
}
inline bool TokenEndpointAuthMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TokenEndpointAuthMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TokenEndpointAuthMethod>(
    TokenEndpointAuthMethod_descriptor(), name, value);
}
enum TokenEndpointAuthSigningAlg : int {
  TOKEN_ENDPOINT_AUTH_SIGNING_ALG_UNSET = 0,
  TOKEN_ENDPOINT_AUTH_SIGNING_ALG_RS256 = 1,
  TOKEN_ENDPOINT_AUTH_SIGNING_ALG_RS384 = 2,
  TOKEN_ENDPOINT_AUTH_SIGNING_ALG_RS512 = 3,
  TOKEN_ENDPOINT_AUTH_SIGNING_ALG_PS256 = 4,
  TOKEN_ENDPOINT_AUTH_SIGNING_ALG_PS384 = 5,
  TOKEN_ENDPOINT_AUTH_SIGNING_ALG_PS512 = 6,
  TOKEN_ENDPOINT_AUTH_SIGNING_ALG_ES256 = 7,
  TOKEN_ENDPOINT_AUTH_SIGNING_ALG_ES384 = 8,
  TOKEN_ENDPOINT_AUTH_SIGNING_ALG_ES512 = 9,
  TokenEndpointAuthSigningAlg_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TokenEndpointAuthSigningAlg_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TokenEndpointAuthSigningAlg_IsValid(int value);
constexpr TokenEndpointAuthSigningAlg TokenEndpointAuthSigningAlg_MIN = TOKEN_ENDPOINT_AUTH_SIGNING_ALG_UNSET;
constexpr TokenEndpointAuthSigningAlg TokenEndpointAuthSigningAlg_MAX = TOKEN_ENDPOINT_AUTH_SIGNING_ALG_ES512;
constexpr int TokenEndpointAuthSigningAlg_ARRAYSIZE = TokenEndpointAuthSigningAlg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TokenEndpointAuthSigningAlg_descriptor();
template<typename T>
inline const std::string& TokenEndpointAuthSigningAlg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TokenEndpointAuthSigningAlg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TokenEndpointAuthSigningAlg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TokenEndpointAuthSigningAlg_descriptor(), enum_t_value);
}
inline bool TokenEndpointAuthSigningAlg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TokenEndpointAuthSigningAlg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TokenEndpointAuthSigningAlg>(
    TokenEndpointAuthSigningAlg_descriptor(), name, value);
}
enum GrantType : int {
  GRANT_TYPE_UNSET = 0,
  GRANT_TYPE_CLIENT_CREDENTIALS = 1,
  GRANT_TYPE_AUTHORIZATION_CODE = 2,
  GRANT_TYPE_IMPLICIT = 3,
  GRANT_TYPE_REFRESH_TOKEN = 4,
  GRANT_TYPE_DEVICE_CODE = 5,
  GrantType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GrantType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GrantType_IsValid(int value);
constexpr GrantType GrantType_MIN = GRANT_TYPE_UNSET;
constexpr GrantType GrantType_MAX = GRANT_TYPE_DEVICE_CODE;
constexpr int GrantType_ARRAYSIZE = GrantType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GrantType_descriptor();
template<typename T>
inline const std::string& GrantType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GrantType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GrantType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GrantType_descriptor(), enum_t_value);
}
inline bool GrantType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GrantType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GrantType>(
    GrantType_descriptor(), name, value);
}
enum ResponseType : int {
  RESPONSE_TYPE_UNSET = 0,
  RESPONSE_TYPE_NONE = 1,
  RESPONSE_TYPE_ID_TOKEN = 2,
  RESPONSE_TYPE_TOKEN = 3,
  RESPONSE_TYPE_CODE = 4,
  RESPONSE_TYPE_ID_TOKEN_TOKEN = 5,
  RESPONSE_TYPE_CODE_ID_TOKEN = 6,
  RESPONSE_TYPE_CODE_TOKEN = 7,
  RESPONSE_TYPE_CODE_ID_TOKEN_TOKEN = 8,
  ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResponseType_IsValid(int value);
constexpr ResponseType ResponseType_MIN = RESPONSE_TYPE_UNSET;
constexpr ResponseType ResponseType_MAX = RESPONSE_TYPE_CODE_ID_TOKEN_TOKEN;
constexpr int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseType_descriptor();
template<typename T>
inline const std::string& ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseType_descriptor(), enum_t_value);
}
inline bool ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseType>(
    ResponseType_descriptor(), name, value);
}
enum RequestObjectSigningAlg : int {
  REQUEST_OBJECT_SIGNING_ALG_UNSET = 0,
  REQUEST_OBJECT_SIGNING_ALG_NONE = 1,
  REQUEST_OBJECT_SIGNING_ALG_RS256 = 2,
  RequestObjectSigningAlg_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestObjectSigningAlg_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestObjectSigningAlg_IsValid(int value);
constexpr RequestObjectSigningAlg RequestObjectSigningAlg_MIN = REQUEST_OBJECT_SIGNING_ALG_UNSET;
constexpr RequestObjectSigningAlg RequestObjectSigningAlg_MAX = REQUEST_OBJECT_SIGNING_ALG_RS256;
constexpr int RequestObjectSigningAlg_ARRAYSIZE = RequestObjectSigningAlg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestObjectSigningAlg_descriptor();
template<typename T>
inline const std::string& RequestObjectSigningAlg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestObjectSigningAlg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestObjectSigningAlg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestObjectSigningAlg_descriptor(), enum_t_value);
}
inline bool RequestObjectSigningAlg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestObjectSigningAlg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestObjectSigningAlg>(
    RequestObjectSigningAlg_descriptor(), name, value);
}
enum UserinfoSignedResponseAlg : int {
  USERINFO_SIGNED_RESPONSE_ALG_UNSET = 0,
  USERINFO_SIGNED_RESPONSE_ALG_NONE = 1,
  USERINFO_SIGNED_RESPONSE_ALG_RS256 = 2,
  UserinfoSignedResponseAlg_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserinfoSignedResponseAlg_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserinfoSignedResponseAlg_IsValid(int value);
constexpr UserinfoSignedResponseAlg UserinfoSignedResponseAlg_MIN = USERINFO_SIGNED_RESPONSE_ALG_UNSET;
constexpr UserinfoSignedResponseAlg UserinfoSignedResponseAlg_MAX = USERINFO_SIGNED_RESPONSE_ALG_RS256;
constexpr int UserinfoSignedResponseAlg_ARRAYSIZE = UserinfoSignedResponseAlg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserinfoSignedResponseAlg_descriptor();
template<typename T>
inline const std::string& UserinfoSignedResponseAlg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserinfoSignedResponseAlg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserinfoSignedResponseAlg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserinfoSignedResponseAlg_descriptor(), enum_t_value);
}
inline bool UserinfoSignedResponseAlg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserinfoSignedResponseAlg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserinfoSignedResponseAlg>(
    UserinfoSignedResponseAlg_descriptor(), name, value);
}
// ===================================================================

class CreateIdentityRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest) */ {
 public:
  inline CreateIdentityRequest() : CreateIdentityRequest(nullptr) {}
  virtual ~CreateIdentityRequest();

  CreateIdentityRequest(const CreateIdentityRequest& from);
  CreateIdentityRequest(CreateIdentityRequest&& from) noexcept
    : CreateIdentityRequest() {
    *this = ::std::move(from);
  }

  inline CreateIdentityRequest& operator=(const CreateIdentityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIdentityRequest& operator=(CreateIdentityRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateIdentityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateIdentityRequest* internal_default_instance() {
    return reinterpret_cast<const CreateIdentityRequest*>(
               &_CreateIdentityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateIdentityRequest& a, CreateIdentityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIdentityRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIdentityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateIdentityRequest* New() const final {
    return CreateMaybeMessage<CreateIdentityRequest>(nullptr);
  }

  CreateIdentityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateIdentityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateIdentityRequest& from);
  void MergeFrom(const CreateIdentityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIdentityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.CreateIdentityRequest";
  }
  protected:
  explicit CreateIdentityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 2,
    kSchemaIdFieldNumber = 3,
    kDataFieldNumber = 1,
  };
  // string connection_id = 2[json_name = "connectionId"];
  void clear_connection_id();
  const std::string& connection_id() const;
  void set_connection_id(const std::string& value);
  void set_connection_id(std::string&& value);
  void set_connection_id(const char* value);
  void set_connection_id(const char* value, size_t size);
  std::string* mutable_connection_id();
  std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // string schema_id = 3[json_name = "schemaId"];
  void clear_schema_id();
  const std::string& schema_id() const;
  void set_schema_id(const std::string& value);
  void set_schema_id(std::string&& value);
  void set_schema_id(const char* value);
  void set_schema_id(const char* value, size_t size);
  std::string* mutable_schema_id();
  std::string* release_schema_id();
  void set_allocated_schema_id(std::string* schema_id);
  private:
  const std::string& _internal_schema_id() const;
  void _internal_set_schema_id(const std::string& value);
  std::string* _internal_mutable_schema_id();
  public:

  // .google.protobuf.Struct data = 1[json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Struct& data() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_data();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Struct* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      PROTOBUF_NAMESPACE_ID::Struct* data);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_id_;
  PROTOBUF_NAMESPACE_ID::Struct* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateIdentityResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.CreateIdentityResponse) */ {
 public:
  inline CreateIdentityResponse() : CreateIdentityResponse(nullptr) {}
  virtual ~CreateIdentityResponse();

  CreateIdentityResponse(const CreateIdentityResponse& from);
  CreateIdentityResponse(CreateIdentityResponse&& from) noexcept
    : CreateIdentityResponse() {
    *this = ::std::move(from);
  }

  inline CreateIdentityResponse& operator=(const CreateIdentityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIdentityResponse& operator=(CreateIdentityResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateIdentityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateIdentityResponse* internal_default_instance() {
    return reinterpret_cast<const CreateIdentityResponse*>(
               &_CreateIdentityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateIdentityResponse& a, CreateIdentityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIdentityResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIdentityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateIdentityResponse* New() const final {
    return CreateMaybeMessage<CreateIdentityResponse>(nullptr);
  }

  CreateIdentityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateIdentityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateIdentityResponse& from);
  void MergeFrom(const CreateIdentityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIdentityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.CreateIdentityResponse";
  }
  protected:
  explicit CreateIdentityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityIdFieldNumber = 1,
  };
  // string identity_id = 1[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.CreateIdentityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentitiesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest) */ {
 public:
  inline GetIdentitiesRequest() : GetIdentitiesRequest(nullptr) {}
  virtual ~GetIdentitiesRequest();

  GetIdentitiesRequest(const GetIdentitiesRequest& from);
  GetIdentitiesRequest(GetIdentitiesRequest&& from) noexcept
    : GetIdentitiesRequest() {
    *this = ::std::move(from);
  }

  inline GetIdentitiesRequest& operator=(const GetIdentitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentitiesRequest& operator=(GetIdentitiesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentitiesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentitiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetIdentitiesRequest*>(
               &_GetIdentitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetIdentitiesRequest& a, GetIdentitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentitiesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentitiesRequest* New() const final {
    return CreateMaybeMessage<GetIdentitiesRequest>(nullptr);
  }

  GetIdentitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentitiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentitiesRequest& from);
  void MergeFrom(const GetIdentitiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentitiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest";
  }
  protected:
  explicit GetIdentitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 2,
    kPageSizeFieldNumber = 1,
  };
  // string page_token = 2[json_name = "pageToken"];
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 1[json_name = "pageSize"];
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentitiesResponse_Identity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity) */ {
 public:
  inline GetIdentitiesResponse_Identity() : GetIdentitiesResponse_Identity(nullptr) {}
  virtual ~GetIdentitiesResponse_Identity();

  GetIdentitiesResponse_Identity(const GetIdentitiesResponse_Identity& from);
  GetIdentitiesResponse_Identity(GetIdentitiesResponse_Identity&& from) noexcept
    : GetIdentitiesResponse_Identity() {
    *this = ::std::move(from);
  }

  inline GetIdentitiesResponse_Identity& operator=(const GetIdentitiesResponse_Identity& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentitiesResponse_Identity& operator=(GetIdentitiesResponse_Identity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentitiesResponse_Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentitiesResponse_Identity* internal_default_instance() {
    return reinterpret_cast<const GetIdentitiesResponse_Identity*>(
               &_GetIdentitiesResponse_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetIdentitiesResponse_Identity& a, GetIdentitiesResponse_Identity& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentitiesResponse_Identity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentitiesResponse_Identity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentitiesResponse_Identity* New() const final {
    return CreateMaybeMessage<GetIdentitiesResponse_Identity>(nullptr);
  }

  GetIdentitiesResponse_Identity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentitiesResponse_Identity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentitiesResponse_Identity& from);
  void MergeFrom(const GetIdentitiesResponse_Identity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentitiesResponse_Identity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity";
  }
  protected:
  explicit GetIdentitiesResponse_Identity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityIdFieldNumber = 1,
    kMainIdentifierFieldNumber = 4,
    kSchemaIdFieldNumber = 5,
    kCreatedAtFieldNumber = 2,
    kUpdatedAtFieldNumber = 3,
    kLockFieldNumber = 6,
  };
  // string identity_id = 1[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // string main_identifier = 4[json_name = "mainIdentifier"];
  void clear_main_identifier();
  const std::string& main_identifier() const;
  void set_main_identifier(const std::string& value);
  void set_main_identifier(std::string&& value);
  void set_main_identifier(const char* value);
  void set_main_identifier(const char* value, size_t size);
  std::string* mutable_main_identifier();
  std::string* release_main_identifier();
  void set_allocated_main_identifier(std::string* main_identifier);
  private:
  const std::string& _internal_main_identifier() const;
  void _internal_set_main_identifier(const std::string& value);
  std::string* _internal_mutable_main_identifier();
  public:

  // string schema_id = 5[json_name = "schemaId"];
  void clear_schema_id();
  const std::string& schema_id() const;
  void set_schema_id(const std::string& value);
  void set_schema_id(std::string&& value);
  void set_schema_id(const char* value);
  void set_schema_id(const char* value, size_t size);
  std::string* mutable_schema_id();
  std::string* release_schema_id();
  void set_allocated_schema_id(std::string* schema_id);
  private:
  const std::string& _internal_schema_id() const;
  void _internal_set_schema_id(const std::string& value);
  std::string* _internal_mutable_schema_id();
  public:

  // .google.protobuf.Timestamp created_at = 2[json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 3[json_name = "updatedAt"];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Lock lock = 6[json_name = "lock"];
  void clear_lock();
  ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Lock lock() const;
  void set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Lock value);
  private:
  ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Lock _internal_lock() const;
  void _internal_set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Lock value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  int lock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentitiesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse) */ {
 public:
  inline GetIdentitiesResponse() : GetIdentitiesResponse(nullptr) {}
  virtual ~GetIdentitiesResponse();

  GetIdentitiesResponse(const GetIdentitiesResponse& from);
  GetIdentitiesResponse(GetIdentitiesResponse&& from) noexcept
    : GetIdentitiesResponse() {
    *this = ::std::move(from);
  }

  inline GetIdentitiesResponse& operator=(const GetIdentitiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentitiesResponse& operator=(GetIdentitiesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentitiesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentitiesResponse* internal_default_instance() {
    return reinterpret_cast<const GetIdentitiesResponse*>(
               &_GetIdentitiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetIdentitiesResponse& a, GetIdentitiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentitiesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentitiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentitiesResponse* New() const final {
    return CreateMaybeMessage<GetIdentitiesResponse>(nullptr);
  }

  GetIdentitiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentitiesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentitiesResponse& from);
  void MergeFrom(const GetIdentitiesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentitiesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse";
  }
  protected:
  explicit GetIdentitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetIdentitiesResponse_Identity Identity;

  typedef GetIdentitiesResponse_Lock Lock;
  static constexpr Lock UNLOCKED =
    GetIdentitiesResponse_Lock_UNLOCKED;
  static constexpr Lock ADMIN_LOCKED =
    GetIdentitiesResponse_Lock_ADMIN_LOCKED;
  static inline bool Lock_IsValid(int value) {
    return GetIdentitiesResponse_Lock_IsValid(value);
  }
  static constexpr Lock Lock_MIN =
    GetIdentitiesResponse_Lock_Lock_MIN;
  static constexpr Lock Lock_MAX =
    GetIdentitiesResponse_Lock_Lock_MAX;
  static constexpr int Lock_ARRAYSIZE =
    GetIdentitiesResponse_Lock_Lock_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Lock_descriptor() {
    return GetIdentitiesResponse_Lock_descriptor();
  }
  template<typename T>
  static inline const std::string& Lock_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Lock>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Lock_Name.");
    return GetIdentitiesResponse_Lock_Name(enum_t_value);
  }
  static inline bool Lock_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Lock* value) {
    return GetIdentitiesResponse_Lock_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdentitiesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
    kTotalSizeFieldNumber = 3,
  };
  // repeated .depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity identities = 1[json_name = "identities"];
  int identities_size() const;
  private:
  int _internal_identities_size() const;
  public:
  void clear_identities();
  ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity* mutable_identities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity >*
      mutable_identities();
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity& _internal_identities(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity* _internal_add_identities();
  public:
  const ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity& identities(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity* add_identities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity >&
      identities() const;

  // string next_page_token = 2[json_name = "nextPageToken"];
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // int32 total_size = 3[json_name = "totalSize"];
  void clear_total_size();
  ::PROTOBUF_NAMESPACE_ID::int32 total_size() const;
  void set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_size() const;
  void _internal_set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity > identities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentityRequest) */ {
 public:
  inline GetIdentityRequest() : GetIdentityRequest(nullptr) {}
  virtual ~GetIdentityRequest();

  GetIdentityRequest(const GetIdentityRequest& from);
  GetIdentityRequest(GetIdentityRequest&& from) noexcept
    : GetIdentityRequest() {
    *this = ::std::move(from);
  }

  inline GetIdentityRequest& operator=(const GetIdentityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityRequest& operator=(GetIdentityRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentityRequest* internal_default_instance() {
    return reinterpret_cast<const GetIdentityRequest*>(
               &_GetIdentityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetIdentityRequest& a, GetIdentityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityRequest* New() const final {
    return CreateMaybeMessage<GetIdentityRequest>(nullptr);
  }

  GetIdentityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityRequest& from);
  void MergeFrom(const GetIdentityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentityRequest";
  }
  protected:
  explicit GetIdentityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityIdFieldNumber = 2,
  };
  // string identity_id = 2[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityResponse_CredentialsIdsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetIdentityResponse_CredentialsIdsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetIdentityResponse_CredentialsIdsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetIdentityResponse_CredentialsIdsEntry_DoNotUse();
  explicit GetIdentityResponse_CredentialsIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetIdentityResponse_CredentialsIdsEntry_DoNotUse& other);
  static const GetIdentityResponse_CredentialsIdsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetIdentityResponse_CredentialsIdsEntry_DoNotUse*>(&_GetIdentityResponse_CredentialsIdsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "depot.devtools.auth.v0.identity.admin.GetIdentityResponse.CredentialsIdsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "depot.devtools.auth.v0.identity.admin.GetIdentityResponse.CredentialsIdsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class GetIdentityResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentityResponse) */ {
 public:
  inline GetIdentityResponse() : GetIdentityResponse(nullptr) {}
  virtual ~GetIdentityResponse();

  GetIdentityResponse(const GetIdentityResponse& from);
  GetIdentityResponse(GetIdentityResponse&& from) noexcept
    : GetIdentityResponse() {
    *this = ::std::move(from);
  }

  inline GetIdentityResponse& operator=(const GetIdentityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityResponse& operator=(GetIdentityResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentityResponse* internal_default_instance() {
    return reinterpret_cast<const GetIdentityResponse*>(
               &_GetIdentityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetIdentityResponse& a, GetIdentityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityResponse* New() const final {
    return CreateMaybeMessage<GetIdentityResponse>(nullptr);
  }

  GetIdentityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityResponse& from);
  void MergeFrom(const GetIdentityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentityResponse";
  }
  protected:
  explicit GetIdentityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef GetIdentityResponse_Lock Lock;
  static constexpr Lock UNLOCKED =
    GetIdentityResponse_Lock_UNLOCKED;
  static constexpr Lock ADMIN_LOCKED =
    GetIdentityResponse_Lock_ADMIN_LOCKED;
  static inline bool Lock_IsValid(int value) {
    return GetIdentityResponse_Lock_IsValid(value);
  }
  static constexpr Lock Lock_MIN =
    GetIdentityResponse_Lock_Lock_MIN;
  static constexpr Lock Lock_MAX =
    GetIdentityResponse_Lock_Lock_MAX;
  static constexpr int Lock_ARRAYSIZE =
    GetIdentityResponse_Lock_Lock_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Lock_descriptor() {
    return GetIdentityResponse_Lock_descriptor();
  }
  template<typename T>
  static inline const std::string& Lock_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Lock>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Lock_Name.");
    return GetIdentityResponse_Lock_Name(enum_t_value);
  }
  static inline bool Lock_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Lock* value) {
    return GetIdentityResponse_Lock_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesIdsFieldNumber = 6,
    kCredentialsIdsFieldNumber = 7,
    kIdentityIdFieldNumber = 1,
    kMainIdentifierFieldNumber = 4,
    kProfileIdFieldNumber = 5,
    kSchemaIdFieldNumber = 8,
    kCreatedAtFieldNumber = 2,
    kUpdatedAtFieldNumber = 3,
    kLockFieldNumber = 9,
  };
  // repeated string addresses_ids = 6[json_name = "addressesIds"];
  int addresses_ids_size() const;
  private:
  int _internal_addresses_ids_size() const;
  public:
  void clear_addresses_ids();
  const std::string& addresses_ids(int index) const;
  std::string* mutable_addresses_ids(int index);
  void set_addresses_ids(int index, const std::string& value);
  void set_addresses_ids(int index, std::string&& value);
  void set_addresses_ids(int index, const char* value);
  void set_addresses_ids(int index, const char* value, size_t size);
  std::string* add_addresses_ids();
  void add_addresses_ids(const std::string& value);
  void add_addresses_ids(std::string&& value);
  void add_addresses_ids(const char* value);
  void add_addresses_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses_ids();
  private:
  const std::string& _internal_addresses_ids(int index) const;
  std::string* _internal_add_addresses_ids();
  public:

  // map<string, string> credentials_ids = 7[json_name = "credentialsIds"];
  int credentials_ids_size() const;
  private:
  int _internal_credentials_ids_size() const;
  public:
  void clear_credentials_ids();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_credentials_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_credentials_ids();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      credentials_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_credentials_ids();

  // string identity_id = 1[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // string main_identifier = 4[json_name = "mainIdentifier"];
  void clear_main_identifier();
  const std::string& main_identifier() const;
  void set_main_identifier(const std::string& value);
  void set_main_identifier(std::string&& value);
  void set_main_identifier(const char* value);
  void set_main_identifier(const char* value, size_t size);
  std::string* mutable_main_identifier();
  std::string* release_main_identifier();
  void set_allocated_main_identifier(std::string* main_identifier);
  private:
  const std::string& _internal_main_identifier() const;
  void _internal_set_main_identifier(const std::string& value);
  std::string* _internal_mutable_main_identifier();
  public:

  // string profile_id = 5[json_name = "profileId"];
  void clear_profile_id();
  const std::string& profile_id() const;
  void set_profile_id(const std::string& value);
  void set_profile_id(std::string&& value);
  void set_profile_id(const char* value);
  void set_profile_id(const char* value, size_t size);
  std::string* mutable_profile_id();
  std::string* release_profile_id();
  void set_allocated_profile_id(std::string* profile_id);
  private:
  const std::string& _internal_profile_id() const;
  void _internal_set_profile_id(const std::string& value);
  std::string* _internal_mutable_profile_id();
  public:

  // string schema_id = 8[json_name = "schemaId"];
  void clear_schema_id();
  const std::string& schema_id() const;
  void set_schema_id(const std::string& value);
  void set_schema_id(std::string&& value);
  void set_schema_id(const char* value);
  void set_schema_id(const char* value, size_t size);
  std::string* mutable_schema_id();
  std::string* release_schema_id();
  void set_allocated_schema_id(std::string* schema_id);
  private:
  const std::string& _internal_schema_id() const;
  void _internal_set_schema_id(const std::string& value);
  std::string* _internal_mutable_schema_id();
  public:

  // .google.protobuf.Timestamp created_at = 2[json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 3[json_name = "updatedAt"];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .depot.devtools.auth.v0.identity.admin.GetIdentityResponse.Lock lock = 9[json_name = "lock"];
  void clear_lock();
  ::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_Lock lock() const;
  void set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_Lock value);
  private:
  ::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_Lock _internal_lock() const;
  void _internal_set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_Lock value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetIdentityResponse_CredentialsIdsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > credentials_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  int lock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityByIdentifierRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest) */ {
 public:
  inline GetIdentityByIdentifierRequest() : GetIdentityByIdentifierRequest(nullptr) {}
  virtual ~GetIdentityByIdentifierRequest();

  GetIdentityByIdentifierRequest(const GetIdentityByIdentifierRequest& from);
  GetIdentityByIdentifierRequest(GetIdentityByIdentifierRequest&& from) noexcept
    : GetIdentityByIdentifierRequest() {
    *this = ::std::move(from);
  }

  inline GetIdentityByIdentifierRequest& operator=(const GetIdentityByIdentifierRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityByIdentifierRequest& operator=(GetIdentityByIdentifierRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentityByIdentifierRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentityByIdentifierRequest* internal_default_instance() {
    return reinterpret_cast<const GetIdentityByIdentifierRequest*>(
               &_GetIdentityByIdentifierRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetIdentityByIdentifierRequest& a, GetIdentityByIdentifierRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityByIdentifierRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentityByIdentifierRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityByIdentifierRequest* New() const final {
    return CreateMaybeMessage<GetIdentityByIdentifierRequest>(nullptr);
  }

  GetIdentityByIdentifierRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityByIdentifierRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityByIdentifierRequest& from);
  void MergeFrom(const GetIdentityByIdentifierRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityByIdentifierRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest";
  }
  protected:
  explicit GetIdentityByIdentifierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 1,
    kValueFieldNumber = 2,
    kConnectionIdFieldNumber = 3,
  };
  // string attribute = 1[json_name = "attribute"];
  void clear_attribute();
  const std::string& attribute() const;
  void set_attribute(const std::string& value);
  void set_attribute(std::string&& value);
  void set_attribute(const char* value);
  void set_attribute(const char* value, size_t size);
  std::string* mutable_attribute();
  std::string* release_attribute();
  void set_allocated_attribute(std::string* attribute);
  private:
  const std::string& _internal_attribute() const;
  void _internal_set_attribute(const std::string& value);
  std::string* _internal_mutable_attribute();
  public:

  // string value = 2[json_name = "value"];
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string connection_id = 3[json_name = "connectionId"];
  void clear_connection_id();
  const std::string& connection_id() const;
  void set_connection_id(const std::string& value);
  void set_connection_id(std::string&& value);
  void set_connection_id(const char* value);
  void set_connection_id(const char* value, size_t size);
  std::string* mutable_connection_id();
  std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse();
  explicit GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse& other);
  static const GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse*>(&_GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.CredentialsIdsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.CredentialsIdsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class GetIdentityByIdentifierResponse_Identity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity) */ {
 public:
  inline GetIdentityByIdentifierResponse_Identity() : GetIdentityByIdentifierResponse_Identity(nullptr) {}
  virtual ~GetIdentityByIdentifierResponse_Identity();

  GetIdentityByIdentifierResponse_Identity(const GetIdentityByIdentifierResponse_Identity& from);
  GetIdentityByIdentifierResponse_Identity(GetIdentityByIdentifierResponse_Identity&& from) noexcept
    : GetIdentityByIdentifierResponse_Identity() {
    *this = ::std::move(from);
  }

  inline GetIdentityByIdentifierResponse_Identity& operator=(const GetIdentityByIdentifierResponse_Identity& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityByIdentifierResponse_Identity& operator=(GetIdentityByIdentifierResponse_Identity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentityByIdentifierResponse_Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentityByIdentifierResponse_Identity* internal_default_instance() {
    return reinterpret_cast<const GetIdentityByIdentifierResponse_Identity*>(
               &_GetIdentityByIdentifierResponse_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetIdentityByIdentifierResponse_Identity& a, GetIdentityByIdentifierResponse_Identity& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityByIdentifierResponse_Identity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentityByIdentifierResponse_Identity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityByIdentifierResponse_Identity* New() const final {
    return CreateMaybeMessage<GetIdentityByIdentifierResponse_Identity>(nullptr);
  }

  GetIdentityByIdentifierResponse_Identity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityByIdentifierResponse_Identity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityByIdentifierResponse_Identity& from);
  void MergeFrom(const GetIdentityByIdentifierResponse_Identity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityByIdentifierResponse_Identity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity";
  }
  protected:
  explicit GetIdentityByIdentifierResponse_Identity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef GetIdentityByIdentifierResponse_Identity_Lock Lock;
  static constexpr Lock UNLOCKED =
    GetIdentityByIdentifierResponse_Identity_Lock_UNLOCKED;
  static constexpr Lock ADMIN_LOCKED =
    GetIdentityByIdentifierResponse_Identity_Lock_ADMIN_LOCKED;
  static inline bool Lock_IsValid(int value) {
    return GetIdentityByIdentifierResponse_Identity_Lock_IsValid(value);
  }
  static constexpr Lock Lock_MIN =
    GetIdentityByIdentifierResponse_Identity_Lock_Lock_MIN;
  static constexpr Lock Lock_MAX =
    GetIdentityByIdentifierResponse_Identity_Lock_Lock_MAX;
  static constexpr int Lock_ARRAYSIZE =
    GetIdentityByIdentifierResponse_Identity_Lock_Lock_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Lock_descriptor() {
    return GetIdentityByIdentifierResponse_Identity_Lock_descriptor();
  }
  template<typename T>
  static inline const std::string& Lock_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Lock>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Lock_Name.");
    return GetIdentityByIdentifierResponse_Identity_Lock_Name(enum_t_value);
  }
  static inline bool Lock_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Lock* value) {
    return GetIdentityByIdentifierResponse_Identity_Lock_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesIdsFieldNumber = 6,
    kCredentialsIdsFieldNumber = 7,
    kIdentityIdFieldNumber = 1,
    kMainIdentifierFieldNumber = 4,
    kProfileIdFieldNumber = 5,
    kSchemaIdFieldNumber = 8,
    kCreatedAtFieldNumber = 2,
    kUpdatedAtFieldNumber = 3,
    kLockFieldNumber = 9,
  };
  // repeated string addresses_ids = 6[json_name = "addressesIds"];
  int addresses_ids_size() const;
  private:
  int _internal_addresses_ids_size() const;
  public:
  void clear_addresses_ids();
  const std::string& addresses_ids(int index) const;
  std::string* mutable_addresses_ids(int index);
  void set_addresses_ids(int index, const std::string& value);
  void set_addresses_ids(int index, std::string&& value);
  void set_addresses_ids(int index, const char* value);
  void set_addresses_ids(int index, const char* value, size_t size);
  std::string* add_addresses_ids();
  void add_addresses_ids(const std::string& value);
  void add_addresses_ids(std::string&& value);
  void add_addresses_ids(const char* value);
  void add_addresses_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses_ids();
  private:
  const std::string& _internal_addresses_ids(int index) const;
  std::string* _internal_add_addresses_ids();
  public:

  // map<string, string> credentials_ids = 7[json_name = "credentialsIds"];
  int credentials_ids_size() const;
  private:
  int _internal_credentials_ids_size() const;
  public:
  void clear_credentials_ids();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_credentials_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_credentials_ids();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      credentials_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_credentials_ids();

  // string identity_id = 1[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // string main_identifier = 4[json_name = "mainIdentifier"];
  void clear_main_identifier();
  const std::string& main_identifier() const;
  void set_main_identifier(const std::string& value);
  void set_main_identifier(std::string&& value);
  void set_main_identifier(const char* value);
  void set_main_identifier(const char* value, size_t size);
  std::string* mutable_main_identifier();
  std::string* release_main_identifier();
  void set_allocated_main_identifier(std::string* main_identifier);
  private:
  const std::string& _internal_main_identifier() const;
  void _internal_set_main_identifier(const std::string& value);
  std::string* _internal_mutable_main_identifier();
  public:

  // string profile_id = 5[json_name = "profileId"];
  void clear_profile_id();
  const std::string& profile_id() const;
  void set_profile_id(const std::string& value);
  void set_profile_id(std::string&& value);
  void set_profile_id(const char* value);
  void set_profile_id(const char* value, size_t size);
  std::string* mutable_profile_id();
  std::string* release_profile_id();
  void set_allocated_profile_id(std::string* profile_id);
  private:
  const std::string& _internal_profile_id() const;
  void _internal_set_profile_id(const std::string& value);
  std::string* _internal_mutable_profile_id();
  public:

  // string schema_id = 8[json_name = "schemaId"];
  void clear_schema_id();
  const std::string& schema_id() const;
  void set_schema_id(const std::string& value);
  void set_schema_id(std::string&& value);
  void set_schema_id(const char* value);
  void set_schema_id(const char* value, size_t size);
  std::string* mutable_schema_id();
  std::string* release_schema_id();
  void set_allocated_schema_id(std::string* schema_id);
  private:
  const std::string& _internal_schema_id() const;
  void _internal_set_schema_id(const std::string& value);
  std::string* _internal_mutable_schema_id();
  public:

  // .google.protobuf.Timestamp created_at = 2[json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 3[json_name = "updatedAt"];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.Lock lock = 9[json_name = "lock"];
  void clear_lock();
  ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_Lock lock() const;
  void set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_Lock value);
  private:
  ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_Lock _internal_lock() const;
  void _internal_set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_Lock value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetIdentityByIdentifierResponse_Identity_CredentialsIdsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > credentials_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  int lock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityByIdentifierResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse) */ {
 public:
  inline GetIdentityByIdentifierResponse() : GetIdentityByIdentifierResponse(nullptr) {}
  virtual ~GetIdentityByIdentifierResponse();

  GetIdentityByIdentifierResponse(const GetIdentityByIdentifierResponse& from);
  GetIdentityByIdentifierResponse(GetIdentityByIdentifierResponse&& from) noexcept
    : GetIdentityByIdentifierResponse() {
    *this = ::std::move(from);
  }

  inline GetIdentityByIdentifierResponse& operator=(const GetIdentityByIdentifierResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityByIdentifierResponse& operator=(GetIdentityByIdentifierResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentityByIdentifierResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentityByIdentifierResponse* internal_default_instance() {
    return reinterpret_cast<const GetIdentityByIdentifierResponse*>(
               &_GetIdentityByIdentifierResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetIdentityByIdentifierResponse& a, GetIdentityByIdentifierResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityByIdentifierResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentityByIdentifierResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityByIdentifierResponse* New() const final {
    return CreateMaybeMessage<GetIdentityByIdentifierResponse>(nullptr);
  }

  GetIdentityByIdentifierResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityByIdentifierResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityByIdentifierResponse& from);
  void MergeFrom(const GetIdentityByIdentifierResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityByIdentifierResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse";
  }
  protected:
  explicit GetIdentityByIdentifierResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetIdentityByIdentifierResponse_Identity Identity;

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityFieldNumber = 1,
  };
  // .depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity identity = 1[json_name = "identity"];
  bool has_identity() const;
  private:
  bool _internal_has_identity() const;
  public:
  void clear_identity();
  const ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity& identity() const;
  ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* release_identity();
  ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* mutable_identity();
  void set_allocated_identity(::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* identity);
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity& _internal_identity() const;
  ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* _internal_mutable_identity();
  public:
  void unsafe_arena_set_allocated_identity(
      ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* identity);
  ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* unsafe_arena_release_identity();

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* identity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentitiesByAttributeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest) */ {
 public:
  inline GetIdentitiesByAttributeRequest() : GetIdentitiesByAttributeRequest(nullptr) {}
  virtual ~GetIdentitiesByAttributeRequest();

  GetIdentitiesByAttributeRequest(const GetIdentitiesByAttributeRequest& from);
  GetIdentitiesByAttributeRequest(GetIdentitiesByAttributeRequest&& from) noexcept
    : GetIdentitiesByAttributeRequest() {
    *this = ::std::move(from);
  }

  inline GetIdentitiesByAttributeRequest& operator=(const GetIdentitiesByAttributeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentitiesByAttributeRequest& operator=(GetIdentitiesByAttributeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentitiesByAttributeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentitiesByAttributeRequest* internal_default_instance() {
    return reinterpret_cast<const GetIdentitiesByAttributeRequest*>(
               &_GetIdentitiesByAttributeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetIdentitiesByAttributeRequest& a, GetIdentitiesByAttributeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentitiesByAttributeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentitiesByAttributeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentitiesByAttributeRequest* New() const final {
    return CreateMaybeMessage<GetIdentitiesByAttributeRequest>(nullptr);
  }

  GetIdentitiesByAttributeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentitiesByAttributeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentitiesByAttributeRequest& from);
  void MergeFrom(const GetIdentitiesByAttributeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentitiesByAttributeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest";
  }
  protected:
  explicit GetIdentitiesByAttributeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string attribute = 1[json_name = "attribute"];
  void clear_attribute();
  const std::string& attribute() const;
  void set_attribute(const std::string& value);
  void set_attribute(std::string&& value);
  void set_attribute(const char* value);
  void set_attribute(const char* value, size_t size);
  std::string* mutable_attribute();
  std::string* release_attribute();
  void set_allocated_attribute(std::string* attribute);
  private:
  const std::string& _internal_attribute() const;
  void _internal_set_attribute(const std::string& value);
  std::string* _internal_mutable_attribute();
  public:

  // string value = 2[json_name = "value"];
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse();
  explicit GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse& other);
  static const GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse*>(&_GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.CredentialsIdsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.CredentialsIdsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class GetIdentitiesByAttributeResponse_Identity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity) */ {
 public:
  inline GetIdentitiesByAttributeResponse_Identity() : GetIdentitiesByAttributeResponse_Identity(nullptr) {}
  virtual ~GetIdentitiesByAttributeResponse_Identity();

  GetIdentitiesByAttributeResponse_Identity(const GetIdentitiesByAttributeResponse_Identity& from);
  GetIdentitiesByAttributeResponse_Identity(GetIdentitiesByAttributeResponse_Identity&& from) noexcept
    : GetIdentitiesByAttributeResponse_Identity() {
    *this = ::std::move(from);
  }

  inline GetIdentitiesByAttributeResponse_Identity& operator=(const GetIdentitiesByAttributeResponse_Identity& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentitiesByAttributeResponse_Identity& operator=(GetIdentitiesByAttributeResponse_Identity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentitiesByAttributeResponse_Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentitiesByAttributeResponse_Identity* internal_default_instance() {
    return reinterpret_cast<const GetIdentitiesByAttributeResponse_Identity*>(
               &_GetIdentitiesByAttributeResponse_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetIdentitiesByAttributeResponse_Identity& a, GetIdentitiesByAttributeResponse_Identity& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentitiesByAttributeResponse_Identity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentitiesByAttributeResponse_Identity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentitiesByAttributeResponse_Identity* New() const final {
    return CreateMaybeMessage<GetIdentitiesByAttributeResponse_Identity>(nullptr);
  }

  GetIdentitiesByAttributeResponse_Identity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentitiesByAttributeResponse_Identity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentitiesByAttributeResponse_Identity& from);
  void MergeFrom(const GetIdentitiesByAttributeResponse_Identity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentitiesByAttributeResponse_Identity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity";
  }
  protected:
  explicit GetIdentitiesByAttributeResponse_Identity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef GetIdentitiesByAttributeResponse_Identity_Lock Lock;
  static constexpr Lock UNLOCKED =
    GetIdentitiesByAttributeResponse_Identity_Lock_UNLOCKED;
  static constexpr Lock ADMIN_LOCKED =
    GetIdentitiesByAttributeResponse_Identity_Lock_ADMIN_LOCKED;
  static inline bool Lock_IsValid(int value) {
    return GetIdentitiesByAttributeResponse_Identity_Lock_IsValid(value);
  }
  static constexpr Lock Lock_MIN =
    GetIdentitiesByAttributeResponse_Identity_Lock_Lock_MIN;
  static constexpr Lock Lock_MAX =
    GetIdentitiesByAttributeResponse_Identity_Lock_Lock_MAX;
  static constexpr int Lock_ARRAYSIZE =
    GetIdentitiesByAttributeResponse_Identity_Lock_Lock_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Lock_descriptor() {
    return GetIdentitiesByAttributeResponse_Identity_Lock_descriptor();
  }
  template<typename T>
  static inline const std::string& Lock_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Lock>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Lock_Name.");
    return GetIdentitiesByAttributeResponse_Identity_Lock_Name(enum_t_value);
  }
  static inline bool Lock_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Lock* value) {
    return GetIdentitiesByAttributeResponse_Identity_Lock_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesIdsFieldNumber = 6,
    kCredentialsIdsFieldNumber = 7,
    kIdentityIdFieldNumber = 1,
    kMainIdentifierFieldNumber = 4,
    kProfileIdFieldNumber = 5,
    kSchemaIdFieldNumber = 8,
    kCreatedAtFieldNumber = 2,
    kUpdatedAtFieldNumber = 3,
    kLockFieldNumber = 9,
  };
  // repeated string addresses_ids = 6[json_name = "addressesIds"];
  int addresses_ids_size() const;
  private:
  int _internal_addresses_ids_size() const;
  public:
  void clear_addresses_ids();
  const std::string& addresses_ids(int index) const;
  std::string* mutable_addresses_ids(int index);
  void set_addresses_ids(int index, const std::string& value);
  void set_addresses_ids(int index, std::string&& value);
  void set_addresses_ids(int index, const char* value);
  void set_addresses_ids(int index, const char* value, size_t size);
  std::string* add_addresses_ids();
  void add_addresses_ids(const std::string& value);
  void add_addresses_ids(std::string&& value);
  void add_addresses_ids(const char* value);
  void add_addresses_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses_ids();
  private:
  const std::string& _internal_addresses_ids(int index) const;
  std::string* _internal_add_addresses_ids();
  public:

  // map<string, string> credentials_ids = 7[json_name = "credentialsIds"];
  int credentials_ids_size() const;
  private:
  int _internal_credentials_ids_size() const;
  public:
  void clear_credentials_ids();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_credentials_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_credentials_ids();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      credentials_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_credentials_ids();

  // string identity_id = 1[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // string main_identifier = 4[json_name = "mainIdentifier"];
  void clear_main_identifier();
  const std::string& main_identifier() const;
  void set_main_identifier(const std::string& value);
  void set_main_identifier(std::string&& value);
  void set_main_identifier(const char* value);
  void set_main_identifier(const char* value, size_t size);
  std::string* mutable_main_identifier();
  std::string* release_main_identifier();
  void set_allocated_main_identifier(std::string* main_identifier);
  private:
  const std::string& _internal_main_identifier() const;
  void _internal_set_main_identifier(const std::string& value);
  std::string* _internal_mutable_main_identifier();
  public:

  // string profile_id = 5[json_name = "profileId"];
  void clear_profile_id();
  const std::string& profile_id() const;
  void set_profile_id(const std::string& value);
  void set_profile_id(std::string&& value);
  void set_profile_id(const char* value);
  void set_profile_id(const char* value, size_t size);
  std::string* mutable_profile_id();
  std::string* release_profile_id();
  void set_allocated_profile_id(std::string* profile_id);
  private:
  const std::string& _internal_profile_id() const;
  void _internal_set_profile_id(const std::string& value);
  std::string* _internal_mutable_profile_id();
  public:

  // string schema_id = 8[json_name = "schemaId"];
  void clear_schema_id();
  const std::string& schema_id() const;
  void set_schema_id(const std::string& value);
  void set_schema_id(std::string&& value);
  void set_schema_id(const char* value);
  void set_schema_id(const char* value, size_t size);
  std::string* mutable_schema_id();
  std::string* release_schema_id();
  void set_allocated_schema_id(std::string* schema_id);
  private:
  const std::string& _internal_schema_id() const;
  void _internal_set_schema_id(const std::string& value);
  std::string* _internal_mutable_schema_id();
  public:

  // .google.protobuf.Timestamp created_at = 2[json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 3[json_name = "updatedAt"];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.Lock lock = 9[json_name = "lock"];
  void clear_lock();
  ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_Lock lock() const;
  void set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_Lock value);
  private:
  ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_Lock _internal_lock() const;
  void _internal_set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_Lock value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetIdentitiesByAttributeResponse_Identity_CredentialsIdsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > credentials_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  int lock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentitiesByAttributeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse) */ {
 public:
  inline GetIdentitiesByAttributeResponse() : GetIdentitiesByAttributeResponse(nullptr) {}
  virtual ~GetIdentitiesByAttributeResponse();

  GetIdentitiesByAttributeResponse(const GetIdentitiesByAttributeResponse& from);
  GetIdentitiesByAttributeResponse(GetIdentitiesByAttributeResponse&& from) noexcept
    : GetIdentitiesByAttributeResponse() {
    *this = ::std::move(from);
  }

  inline GetIdentitiesByAttributeResponse& operator=(const GetIdentitiesByAttributeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentitiesByAttributeResponse& operator=(GetIdentitiesByAttributeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentitiesByAttributeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentitiesByAttributeResponse* internal_default_instance() {
    return reinterpret_cast<const GetIdentitiesByAttributeResponse*>(
               &_GetIdentitiesByAttributeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetIdentitiesByAttributeResponse& a, GetIdentitiesByAttributeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentitiesByAttributeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentitiesByAttributeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentitiesByAttributeResponse* New() const final {
    return CreateMaybeMessage<GetIdentitiesByAttributeResponse>(nullptr);
  }

  GetIdentitiesByAttributeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentitiesByAttributeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentitiesByAttributeResponse& from);
  void MergeFrom(const GetIdentitiesByAttributeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentitiesByAttributeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse";
  }
  protected:
  explicit GetIdentitiesByAttributeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetIdentitiesByAttributeResponse_Identity Identity;

  // accessors -------------------------------------------------------

  enum : int {
    kIdentitiesFieldNumber = 1,
  };
  // repeated .depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity identities = 1[json_name = "identities"];
  int identities_size() const;
  private:
  int _internal_identities_size() const;
  public:
  void clear_identities();
  ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity* mutable_identities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity >*
      mutable_identities();
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity& _internal_identities(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity* _internal_add_identities();
  public:
  const ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity& identities(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity* add_identities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity >&
      identities() const;

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity > identities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateIdentityRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest) */ {
 public:
  inline UpdateIdentityRequest() : UpdateIdentityRequest(nullptr) {}
  virtual ~UpdateIdentityRequest();

  UpdateIdentityRequest(const UpdateIdentityRequest& from);
  UpdateIdentityRequest(UpdateIdentityRequest&& from) noexcept
    : UpdateIdentityRequest() {
    *this = ::std::move(from);
  }

  inline UpdateIdentityRequest& operator=(const UpdateIdentityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateIdentityRequest& operator=(UpdateIdentityRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateIdentityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateIdentityRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateIdentityRequest*>(
               &_UpdateIdentityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UpdateIdentityRequest& a, UpdateIdentityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateIdentityRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateIdentityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateIdentityRequest* New() const final {
    return CreateMaybeMessage<UpdateIdentityRequest>(nullptr);
  }

  UpdateIdentityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateIdentityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateIdentityRequest& from);
  void MergeFrom(const UpdateIdentityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateIdentityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest";
  }
  protected:
  explicit UpdateIdentityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateIdentityRequest_Lock Lock;
  static constexpr Lock UNLOCKED =
    UpdateIdentityRequest_Lock_UNLOCKED;
  static constexpr Lock ADMIN_LOCKED =
    UpdateIdentityRequest_Lock_ADMIN_LOCKED;
  static inline bool Lock_IsValid(int value) {
    return UpdateIdentityRequest_Lock_IsValid(value);
  }
  static constexpr Lock Lock_MIN =
    UpdateIdentityRequest_Lock_Lock_MIN;
  static constexpr Lock Lock_MAX =
    UpdateIdentityRequest_Lock_Lock_MAX;
  static constexpr int Lock_ARRAYSIZE =
    UpdateIdentityRequest_Lock_Lock_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Lock_descriptor() {
    return UpdateIdentityRequest_Lock_descriptor();
  }
  template<typename T>
  static inline const std::string& Lock_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Lock>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Lock_Name.");
    return UpdateIdentityRequest_Lock_Name(enum_t_value);
  }
  static inline bool Lock_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Lock* value) {
    return UpdateIdentityRequest_Lock_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityIdFieldNumber = 1,
    kLockFieldNumber = 2,
  };
  // string identity_id = 1[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // .depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest.Lock lock = 2[json_name = "lock"];
  void clear_lock();
  ::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest_Lock lock() const;
  void set_lock(::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest_Lock value);
  private:
  ::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest_Lock _internal_lock() const;
  void _internal_set_lock(::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest_Lock value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  int lock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateIdentityResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateIdentityResponse) */ {
 public:
  inline UpdateIdentityResponse() : UpdateIdentityResponse(nullptr) {}
  virtual ~UpdateIdentityResponse();

  UpdateIdentityResponse(const UpdateIdentityResponse& from);
  UpdateIdentityResponse(UpdateIdentityResponse&& from) noexcept
    : UpdateIdentityResponse() {
    *this = ::std::move(from);
  }

  inline UpdateIdentityResponse& operator=(const UpdateIdentityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateIdentityResponse& operator=(UpdateIdentityResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateIdentityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateIdentityResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateIdentityResponse*>(
               &_UpdateIdentityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UpdateIdentityResponse& a, UpdateIdentityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateIdentityResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateIdentityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateIdentityResponse* New() const final {
    return CreateMaybeMessage<UpdateIdentityResponse>(nullptr);
  }

  UpdateIdentityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateIdentityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateIdentityResponse& from);
  void MergeFrom(const UpdateIdentityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateIdentityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateIdentityResponse";
  }
  protected:
  explicit UpdateIdentityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateIdentityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteIdentityRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.DeleteIdentityRequest) */ {
 public:
  inline DeleteIdentityRequest() : DeleteIdentityRequest(nullptr) {}
  virtual ~DeleteIdentityRequest();

  DeleteIdentityRequest(const DeleteIdentityRequest& from);
  DeleteIdentityRequest(DeleteIdentityRequest&& from) noexcept
    : DeleteIdentityRequest() {
    *this = ::std::move(from);
  }

  inline DeleteIdentityRequest& operator=(const DeleteIdentityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteIdentityRequest& operator=(DeleteIdentityRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteIdentityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteIdentityRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteIdentityRequest*>(
               &_DeleteIdentityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteIdentityRequest& a, DeleteIdentityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteIdentityRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteIdentityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteIdentityRequest* New() const final {
    return CreateMaybeMessage<DeleteIdentityRequest>(nullptr);
  }

  DeleteIdentityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteIdentityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteIdentityRequest& from);
  void MergeFrom(const DeleteIdentityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteIdentityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.DeleteIdentityRequest";
  }
  protected:
  explicit DeleteIdentityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityIdFieldNumber = 1,
  };
  // string identity_id = 1[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.DeleteIdentityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteIdentityResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.DeleteIdentityResponse) */ {
 public:
  inline DeleteIdentityResponse() : DeleteIdentityResponse(nullptr) {}
  virtual ~DeleteIdentityResponse();

  DeleteIdentityResponse(const DeleteIdentityResponse& from);
  DeleteIdentityResponse(DeleteIdentityResponse&& from) noexcept
    : DeleteIdentityResponse() {
    *this = ::std::move(from);
  }

  inline DeleteIdentityResponse& operator=(const DeleteIdentityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteIdentityResponse& operator=(DeleteIdentityResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteIdentityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteIdentityResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteIdentityResponse*>(
               &_DeleteIdentityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DeleteIdentityResponse& a, DeleteIdentityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteIdentityResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteIdentityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteIdentityResponse* New() const final {
    return CreateMaybeMessage<DeleteIdentityResponse>(nullptr);
  }

  DeleteIdentityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteIdentityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteIdentityResponse& from);
  void MergeFrom(const DeleteIdentityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteIdentityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.DeleteIdentityResponse";
  }
  protected:
  explicit DeleteIdentityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.DeleteIdentityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetCredentialsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetCredentialsRequest) */ {
 public:
  inline GetCredentialsRequest() : GetCredentialsRequest(nullptr) {}
  virtual ~GetCredentialsRequest();

  GetCredentialsRequest(const GetCredentialsRequest& from);
  GetCredentialsRequest(GetCredentialsRequest&& from) noexcept
    : GetCredentialsRequest() {
    *this = ::std::move(from);
  }

  inline GetCredentialsRequest& operator=(const GetCredentialsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCredentialsRequest& operator=(GetCredentialsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCredentialsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCredentialsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCredentialsRequest*>(
               &_GetCredentialsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetCredentialsRequest& a, GetCredentialsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCredentialsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCredentialsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCredentialsRequest* New() const final {
    return CreateMaybeMessage<GetCredentialsRequest>(nullptr);
  }

  GetCredentialsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCredentialsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCredentialsRequest& from);
  void MergeFrom(const GetCredentialsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCredentialsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetCredentialsRequest";
  }
  protected:
  explicit GetCredentialsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityIdFieldNumber = 1,
  };
  // string identity_id = 1[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetCredentialsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetCredentialsResponse_Credential PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential) */ {
 public:
  inline GetCredentialsResponse_Credential() : GetCredentialsResponse_Credential(nullptr) {}
  virtual ~GetCredentialsResponse_Credential();

  GetCredentialsResponse_Credential(const GetCredentialsResponse_Credential& from);
  GetCredentialsResponse_Credential(GetCredentialsResponse_Credential&& from) noexcept
    : GetCredentialsResponse_Credential() {
    *this = ::std::move(from);
  }

  inline GetCredentialsResponse_Credential& operator=(const GetCredentialsResponse_Credential& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCredentialsResponse_Credential& operator=(GetCredentialsResponse_Credential&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCredentialsResponse_Credential& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCredentialsResponse_Credential* internal_default_instance() {
    return reinterpret_cast<const GetCredentialsResponse_Credential*>(
               &_GetCredentialsResponse_Credential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetCredentialsResponse_Credential& a, GetCredentialsResponse_Credential& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCredentialsResponse_Credential* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCredentialsResponse_Credential* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCredentialsResponse_Credential* New() const final {
    return CreateMaybeMessage<GetCredentialsResponse_Credential>(nullptr);
  }

  GetCredentialsResponse_Credential* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCredentialsResponse_Credential>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCredentialsResponse_Credential& from);
  void MergeFrom(const GetCredentialsResponse_Credential& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCredentialsResponse_Credential* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential";
  }
  protected:
  explicit GetCredentialsResponse_Credential(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialIdFieldNumber = 1,
    kIdentityIdFieldNumber = 4,
    kConnectionIdFieldNumber = 6,
    kCreatedAtFieldNumber = 2,
    kUpdatedAtFieldNumber = 3,
    kTypeFieldNumber = 5,
    kConfiguredFieldNumber = 7,
  };
  // string credential_id = 1[json_name = "credentialId"];
  void clear_credential_id();
  const std::string& credential_id() const;
  void set_credential_id(const std::string& value);
  void set_credential_id(std::string&& value);
  void set_credential_id(const char* value);
  void set_credential_id(const char* value, size_t size);
  std::string* mutable_credential_id();
  std::string* release_credential_id();
  void set_allocated_credential_id(std::string* credential_id);
  private:
  const std::string& _internal_credential_id() const;
  void _internal_set_credential_id(const std::string& value);
  std::string* _internal_mutable_credential_id();
  public:

  // string identity_id = 4[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // string connection_id = 6[json_name = "connectionId"];
  void clear_connection_id();
  const std::string& connection_id() const;
  void set_connection_id(const std::string& value);
  void set_connection_id(std::string&& value);
  void set_connection_id(const char* value);
  void set_connection_id(const char* value, size_t size);
  std::string* mutable_connection_id();
  std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // .google.protobuf.Timestamp created_at = 2[json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 3[json_name = "updatedAt"];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int32 type = 5[json_name = "type"];
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool configured = 7[json_name = "configured"];
  void clear_configured();
  bool configured() const;
  void set_configured(bool value);
  private:
  bool _internal_configured() const;
  void _internal_set_configured(bool value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credential_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  bool configured_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetCredentialsResponse_CredentialsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetCredentialsResponse_CredentialsEntry_DoNotUse, 
    std::string, ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetCredentialsResponse_CredentialsEntry_DoNotUse, 
    std::string, ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GetCredentialsResponse_CredentialsEntry_DoNotUse();
  explicit GetCredentialsResponse_CredentialsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetCredentialsResponse_CredentialsEntry_DoNotUse& other);
  static const GetCredentialsResponse_CredentialsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetCredentialsResponse_CredentialsEntry_DoNotUse*>(&_GetCredentialsResponse_CredentialsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.CredentialsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[22];
  }

  public:
};

// -------------------------------------------------------------------

class GetCredentialsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse) */ {
 public:
  inline GetCredentialsResponse() : GetCredentialsResponse(nullptr) {}
  virtual ~GetCredentialsResponse();

  GetCredentialsResponse(const GetCredentialsResponse& from);
  GetCredentialsResponse(GetCredentialsResponse&& from) noexcept
    : GetCredentialsResponse() {
    *this = ::std::move(from);
  }

  inline GetCredentialsResponse& operator=(const GetCredentialsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCredentialsResponse& operator=(GetCredentialsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCredentialsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCredentialsResponse* internal_default_instance() {
    return reinterpret_cast<const GetCredentialsResponse*>(
               &_GetCredentialsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetCredentialsResponse& a, GetCredentialsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCredentialsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCredentialsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCredentialsResponse* New() const final {
    return CreateMaybeMessage<GetCredentialsResponse>(nullptr);
  }

  GetCredentialsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCredentialsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCredentialsResponse& from);
  void MergeFrom(const GetCredentialsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCredentialsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetCredentialsResponse";
  }
  protected:
  explicit GetCredentialsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetCredentialsResponse_Credential Credential;

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialsFieldNumber = 1,
  };
  // map<string, .depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential> credentials = 1[json_name = "credentials"];
  int credentials_size() const;
  private:
  int _internal_credentials_size() const;
  public:
  void clear_credentials();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential >&
      _internal_credentials() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential >*
      _internal_mutable_credentials();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential >&
      credentials() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential >*
      mutable_credentials();

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetCredentialsResponse_CredentialsEntry_DoNotUse,
      std::string, ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > credentials_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateCredentialRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest) */ {
 public:
  inline UpdateCredentialRequest() : UpdateCredentialRequest(nullptr) {}
  virtual ~UpdateCredentialRequest();

  UpdateCredentialRequest(const UpdateCredentialRequest& from);
  UpdateCredentialRequest(UpdateCredentialRequest&& from) noexcept
    : UpdateCredentialRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCredentialRequest& operator=(const UpdateCredentialRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCredentialRequest& operator=(UpdateCredentialRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCredentialRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateCredentialRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCredentialRequest*>(
               &_UpdateCredentialRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UpdateCredentialRequest& a, UpdateCredentialRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCredentialRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCredentialRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCredentialRequest* New() const final {
    return CreateMaybeMessage<UpdateCredentialRequest>(nullptr);
  }

  UpdateCredentialRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCredentialRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCredentialRequest& from);
  void MergeFrom(const UpdateCredentialRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCredentialRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest";
  }
  protected:
  explicit UpdateCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 2,
    kIdentityIdFieldNumber = 3,
    kDataFieldNumber = 1,
  };
  // string connection_id = 2[json_name = "connectionId"];
  void clear_connection_id();
  const std::string& connection_id() const;
  void set_connection_id(const std::string& value);
  void set_connection_id(std::string&& value);
  void set_connection_id(const char* value);
  void set_connection_id(const char* value, size_t size);
  std::string* mutable_connection_id();
  std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // string identity_id = 3[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // .google.protobuf.Struct data = 1[json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Struct& data() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_data();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Struct* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      PROTOBUF_NAMESPACE_ID::Struct* data);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  PROTOBUF_NAMESPACE_ID::Struct* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateCredentialResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateCredentialResponse) */ {
 public:
  inline UpdateCredentialResponse() : UpdateCredentialResponse(nullptr) {}
  virtual ~UpdateCredentialResponse();

  UpdateCredentialResponse(const UpdateCredentialResponse& from);
  UpdateCredentialResponse(UpdateCredentialResponse&& from) noexcept
    : UpdateCredentialResponse() {
    *this = ::std::move(from);
  }

  inline UpdateCredentialResponse& operator=(const UpdateCredentialResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCredentialResponse& operator=(UpdateCredentialResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCredentialResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateCredentialResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateCredentialResponse*>(
               &_UpdateCredentialResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UpdateCredentialResponse& a, UpdateCredentialResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCredentialResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCredentialResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCredentialResponse* New() const final {
    return CreateMaybeMessage<UpdateCredentialResponse>(nullptr);
  }

  UpdateCredentialResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCredentialResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCredentialResponse& from);
  void MergeFrom(const UpdateCredentialResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCredentialResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateCredentialResponse";
  }
  protected:
  explicit UpdateCredentialResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateCredentialResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateConnectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest) */ {
 public:
  inline CreateConnectionRequest() : CreateConnectionRequest(nullptr) {}
  virtual ~CreateConnectionRequest();

  CreateConnectionRequest(const CreateConnectionRequest& from);
  CreateConnectionRequest(CreateConnectionRequest&& from) noexcept
    : CreateConnectionRequest() {
    *this = ::std::move(from);
  }

  inline CreateConnectionRequest& operator=(const CreateConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConnectionRequest& operator=(CreateConnectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateConnectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateConnectionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateConnectionRequest*>(
               &_CreateConnectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CreateConnectionRequest& a, CreateConnectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConnectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateConnectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateConnectionRequest* New() const final {
    return CreateMaybeMessage<CreateConnectionRequest>(nullptr);
  }

  CreateConnectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateConnectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateConnectionRequest& from);
  void MergeFrom(const CreateConnectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateConnectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.CreateConnectionRequest";
  }
  protected:
  explicit CreateConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateConnectionRequest_Providers Providers;
  static constexpr Providers NONE =
    CreateConnectionRequest_Providers_NONE;
  static constexpr Providers OPENID =
    CreateConnectionRequest_Providers_OPENID;
  static constexpr Providers AMAZON =
    CreateConnectionRequest_Providers_AMAZON;
  static constexpr Providers BITBUCKET =
    CreateConnectionRequest_Providers_BITBUCKET;
  static constexpr Providers BOX =
    CreateConnectionRequest_Providers_BOX;
  static constexpr Providers DAILYMOTION =
    CreateConnectionRequest_Providers_DAILYMOTION;
  static constexpr Providers DEEZER =
    CreateConnectionRequest_Providers_DEEZER;
  static constexpr Providers DIGITALOCEAN =
    CreateConnectionRequest_Providers_DIGITALOCEAN;
  static constexpr Providers DISCORD =
    CreateConnectionRequest_Providers_DISCORD;
  static constexpr Providers DROPBOX =
    CreateConnectionRequest_Providers_DROPBOX;
  static constexpr Providers EVEONLINE =
    CreateConnectionRequest_Providers_EVEONLINE;
  static constexpr Providers FACEBOOK =
    CreateConnectionRequest_Providers_FACEBOOK;
  static constexpr Providers FITBIT =
    CreateConnectionRequest_Providers_FITBIT;
  static constexpr Providers GITEA =
    CreateConnectionRequest_Providers_GITEA;
  static constexpr Providers GITHUB =
    CreateConnectionRequest_Providers_GITHUB;
  static constexpr Providers GITLAB =
    CreateConnectionRequest_Providers_GITLAB;
  static constexpr Providers GOOGLE =
    CreateConnectionRequest_Providers_GOOGLE;
  static constexpr Providers SHOPIFY =
    CreateConnectionRequest_Providers_SHOPIFY;
  static constexpr Providers SOUNDCLOUD =
    CreateConnectionRequest_Providers_SOUNDCLOUD;
  static constexpr Providers SPOTIFY =
    CreateConnectionRequest_Providers_SPOTIFY;
  static constexpr Providers STEAM =
    CreateConnectionRequest_Providers_STEAM;
  static constexpr Providers STRIPE =
    CreateConnectionRequest_Providers_STRIPE;
  static constexpr Providers TWITCH =
    CreateConnectionRequest_Providers_TWITCH;
  static constexpr Providers UBER =
    CreateConnectionRequest_Providers_UBER;
  static constexpr Providers WEPAY =
    CreateConnectionRequest_Providers_WEPAY;
  static constexpr Providers YAHOO =
    CreateConnectionRequest_Providers_YAHOO;
  static constexpr Providers YAMMER =
    CreateConnectionRequest_Providers_YAMMER;
  static constexpr Providers HEROKU =
    CreateConnectionRequest_Providers_HEROKU;
  static constexpr Providers INSTAGRAM =
    CreateConnectionRequest_Providers_INSTAGRAM;
  static constexpr Providers INTERCOM =
    CreateConnectionRequest_Providers_INTERCOM;
  static constexpr Providers KAKAO =
    CreateConnectionRequest_Providers_KAKAO;
  static constexpr Providers LASTFM =
    CreateConnectionRequest_Providers_LASTFM;
  static constexpr Providers LINKEDIN =
    CreateConnectionRequest_Providers_LINKEDIN;
  static constexpr Providers LINE =
    CreateConnectionRequest_Providers_LINE;
  static constexpr Providers ONEDRIVE =
    CreateConnectionRequest_Providers_ONEDRIVE;
  static constexpr Providers AZUREAD =
    CreateConnectionRequest_Providers_AZUREAD;
  static constexpr Providers MICROSOFTONLINE =
    CreateConnectionRequest_Providers_MICROSOFTONLINE;
  static constexpr Providers BATTLENET =
    CreateConnectionRequest_Providers_BATTLENET;
  static constexpr Providers PAYPAL =
    CreateConnectionRequest_Providers_PAYPAL;
  static constexpr Providers TWITTER =
    CreateConnectionRequest_Providers_TWITTER;
  static constexpr Providers SALESFORCE =
    CreateConnectionRequest_Providers_SALESFORCE;
  static constexpr Providers TYPETALK =
    CreateConnectionRequest_Providers_TYPETALK;
  static constexpr Providers SLACK =
    CreateConnectionRequest_Providers_SLACK;
  static constexpr Providers MEETUP =
    CreateConnectionRequest_Providers_MEETUP;
  static constexpr Providers XERO =
    CreateConnectionRequest_Providers_XERO;
  static constexpr Providers VK =
    CreateConnectionRequest_Providers_VK;
  static constexpr Providers NAVER =
    CreateConnectionRequest_Providers_NAVER;
  static constexpr Providers YANDEX =
    CreateConnectionRequest_Providers_YANDEX;
  static constexpr Providers NEXTCLOUD =
    CreateConnectionRequest_Providers_NEXTCLOUD;
  static constexpr Providers APPLE =
    CreateConnectionRequest_Providers_APPLE;
  static constexpr Providers STRAVA =
    CreateConnectionRequest_Providers_STRAVA;
  static inline bool Providers_IsValid(int value) {
    return CreateConnectionRequest_Providers_IsValid(value);
  }
  static constexpr Providers Providers_MIN =
    CreateConnectionRequest_Providers_Providers_MIN;
  static constexpr Providers Providers_MAX =
    CreateConnectionRequest_Providers_Providers_MAX;
  static constexpr int Providers_ARRAYSIZE =
    CreateConnectionRequest_Providers_Providers_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Providers_descriptor() {
    return CreateConnectionRequest_Providers_descriptor();
  }
  template<typename T>
  static inline const std::string& Providers_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Providers>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Providers_Name.");
    return CreateConnectionRequest_Providers_Name(enum_t_value);
  }
  static inline bool Providers_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Providers* value) {
    return CreateConnectionRequest_Providers_Parse(name, value);
  }

  typedef CreateConnectionRequest_Types Types;
  static constexpr Types UNSET =
    CreateConnectionRequest_Types_UNSET;
  static constexpr Types PASSWORD =
    CreateConnectionRequest_Types_PASSWORD;
  static constexpr Types OTP =
    CreateConnectionRequest_Types_OTP;
  static constexpr Types TOTP =
    CreateConnectionRequest_Types_TOTP;
  static constexpr Types OIDC =
    CreateConnectionRequest_Types_OIDC;
  static inline bool Types_IsValid(int value) {
    return CreateConnectionRequest_Types_IsValid(value);
  }
  static constexpr Types Types_MIN =
    CreateConnectionRequest_Types_Types_MIN;
  static constexpr Types Types_MAX =
    CreateConnectionRequest_Types_Types_MAX;
  static constexpr int Types_ARRAYSIZE =
    CreateConnectionRequest_Types_Types_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Types_descriptor() {
    return CreateConnectionRequest_Types_descriptor();
  }
  template<typename T>
  static inline const std::string& Types_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Types>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Types_Name.");
    return CreateConnectionRequest_Types_Name(enum_t_value);
  }
  static inline bool Types_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Types* value) {
    return CreateConnectionRequest_Types_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMfaFieldNumber = 8,
    kIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kClientSecretFieldNumber = 3,
    kButtonImageUrlFieldNumber = 4,
    kOidcDiscoveryUrlFieldNumber = 7,
    kScopesFieldNumber = 10,
    kProviderFieldNumber = 6,
    kTypeFieldNumber = 9,
  };
  // repeated string mfa = 8[json_name = "mfa"];
  int mfa_size() const;
  private:
  int _internal_mfa_size() const;
  public:
  void clear_mfa();
  const std::string& mfa(int index) const;
  std::string* mutable_mfa(int index);
  void set_mfa(int index, const std::string& value);
  void set_mfa(int index, std::string&& value);
  void set_mfa(int index, const char* value);
  void set_mfa(int index, const char* value, size_t size);
  std::string* add_mfa();
  void add_mfa(const std::string& value);
  void add_mfa(std::string&& value);
  void add_mfa(const char* value);
  void add_mfa(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mfa() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mfa();
  private:
  const std::string& _internal_mfa(int index) const;
  std::string* _internal_add_mfa();
  public:

  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string client_id = 2[json_name = "clientId"];
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string client_secret = 3[json_name = "clientSecret"];
  void clear_client_secret();
  const std::string& client_secret() const;
  void set_client_secret(const std::string& value);
  void set_client_secret(std::string&& value);
  void set_client_secret(const char* value);
  void set_client_secret(const char* value, size_t size);
  std::string* mutable_client_secret();
  std::string* release_client_secret();
  void set_allocated_client_secret(std::string* client_secret);
  private:
  const std::string& _internal_client_secret() const;
  void _internal_set_client_secret(const std::string& value);
  std::string* _internal_mutable_client_secret();
  public:

  // string button_image_url = 4[json_name = "buttonImageUrl"];
  void clear_button_image_url();
  const std::string& button_image_url() const;
  void set_button_image_url(const std::string& value);
  void set_button_image_url(std::string&& value);
  void set_button_image_url(const char* value);
  void set_button_image_url(const char* value, size_t size);
  std::string* mutable_button_image_url();
  std::string* release_button_image_url();
  void set_allocated_button_image_url(std::string* button_image_url);
  private:
  const std::string& _internal_button_image_url() const;
  void _internal_set_button_image_url(const std::string& value);
  std::string* _internal_mutable_button_image_url();
  public:

  // string oidc_discovery_url = 7[json_name = "oidcDiscoveryUrl"];
  void clear_oidc_discovery_url();
  const std::string& oidc_discovery_url() const;
  void set_oidc_discovery_url(const std::string& value);
  void set_oidc_discovery_url(std::string&& value);
  void set_oidc_discovery_url(const char* value);
  void set_oidc_discovery_url(const char* value, size_t size);
  std::string* mutable_oidc_discovery_url();
  std::string* release_oidc_discovery_url();
  void set_allocated_oidc_discovery_url(std::string* oidc_discovery_url);
  private:
  const std::string& _internal_oidc_discovery_url() const;
  void _internal_set_oidc_discovery_url(const std::string& value);
  std::string* _internal_mutable_oidc_discovery_url();
  public:

  // string scopes = 10[json_name = "scopes"];
  void clear_scopes();
  const std::string& scopes() const;
  void set_scopes(const std::string& value);
  void set_scopes(std::string&& value);
  void set_scopes(const char* value);
  void set_scopes(const char* value, size_t size);
  std::string* mutable_scopes();
  std::string* release_scopes();
  void set_allocated_scopes(std::string* scopes);
  private:
  const std::string& _internal_scopes() const;
  void _internal_set_scopes(const std::string& value);
  std::string* _internal_mutable_scopes();
  public:

  // .depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.Providers provider = 6[json_name = "provider"];
  void clear_provider();
  ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Providers provider() const;
  void set_provider(::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Providers value);
  private:
  ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Providers _internal_provider() const;
  void _internal_set_provider(::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Providers value);
  public:

  // .depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.Types type = 9[json_name = "type"];
  void clear_type();
  ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Types type() const;
  void set_type(::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Types value);
  private:
  ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Types _internal_type() const;
  void _internal_set_type(::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Types value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mfa_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr button_image_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oidc_discovery_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scopes_;
  int provider_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateConnectionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.CreateConnectionResponse) */ {
 public:
  inline CreateConnectionResponse() : CreateConnectionResponse(nullptr) {}
  virtual ~CreateConnectionResponse();

  CreateConnectionResponse(const CreateConnectionResponse& from);
  CreateConnectionResponse(CreateConnectionResponse&& from) noexcept
    : CreateConnectionResponse() {
    *this = ::std::move(from);
  }

  inline CreateConnectionResponse& operator=(const CreateConnectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConnectionResponse& operator=(CreateConnectionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateConnectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateConnectionResponse* internal_default_instance() {
    return reinterpret_cast<const CreateConnectionResponse*>(
               &_CreateConnectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CreateConnectionResponse& a, CreateConnectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConnectionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateConnectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateConnectionResponse* New() const final {
    return CreateMaybeMessage<CreateConnectionResponse>(nullptr);
  }

  CreateConnectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateConnectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateConnectionResponse& from);
  void MergeFrom(const CreateConnectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateConnectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.CreateConnectionResponse";
  }
  protected:
  explicit CreateConnectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.CreateConnectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetConnectionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetConnectionsRequest) */ {
 public:
  inline GetConnectionsRequest() : GetConnectionsRequest(nullptr) {}
  virtual ~GetConnectionsRequest();

  GetConnectionsRequest(const GetConnectionsRequest& from);
  GetConnectionsRequest(GetConnectionsRequest&& from) noexcept
    : GetConnectionsRequest() {
    *this = ::std::move(from);
  }

  inline GetConnectionsRequest& operator=(const GetConnectionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnectionsRequest& operator=(GetConnectionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConnectionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnectionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetConnectionsRequest*>(
               &_GetConnectionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetConnectionsRequest& a, GetConnectionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnectionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConnectionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConnectionsRequest* New() const final {
    return CreateMaybeMessage<GetConnectionsRequest>(nullptr);
  }

  GetConnectionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConnectionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConnectionsRequest& from);
  void MergeFrom(const GetConnectionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetConnectionsRequest";
  }
  protected:
  explicit GetConnectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetConnectionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetConnectionsResponse_Connection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection) */ {
 public:
  inline GetConnectionsResponse_Connection() : GetConnectionsResponse_Connection(nullptr) {}
  virtual ~GetConnectionsResponse_Connection();

  GetConnectionsResponse_Connection(const GetConnectionsResponse_Connection& from);
  GetConnectionsResponse_Connection(GetConnectionsResponse_Connection&& from) noexcept
    : GetConnectionsResponse_Connection() {
    *this = ::std::move(from);
  }

  inline GetConnectionsResponse_Connection& operator=(const GetConnectionsResponse_Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnectionsResponse_Connection& operator=(GetConnectionsResponse_Connection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConnectionsResponse_Connection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnectionsResponse_Connection* internal_default_instance() {
    return reinterpret_cast<const GetConnectionsResponse_Connection*>(
               &_GetConnectionsResponse_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetConnectionsResponse_Connection& a, GetConnectionsResponse_Connection& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnectionsResponse_Connection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConnectionsResponse_Connection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConnectionsResponse_Connection* New() const final {
    return CreateMaybeMessage<GetConnectionsResponse_Connection>(nullptr);
  }

  GetConnectionsResponse_Connection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConnectionsResponse_Connection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConnectionsResponse_Connection& from);
  void MergeFrom(const GetConnectionsResponse_Connection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectionsResponse_Connection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection";
  }
  protected:
  explicit GetConnectionsResponse_Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfaFieldNumber = 8,
    kIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kClientSecretFieldNumber = 3,
    kButtonImageUrlFieldNumber = 4,
    kOidcDiscoveryUrlFieldNumber = 7,
    kScopesFieldNumber = 10,
    kProviderFieldNumber = 6,
    kTypeFieldNumber = 9,
    kPurposeFieldNumber = 11,
  };
  // repeated string mfa = 8[json_name = "mfa"];
  int mfa_size() const;
  private:
  int _internal_mfa_size() const;
  public:
  void clear_mfa();
  const std::string& mfa(int index) const;
  std::string* mutable_mfa(int index);
  void set_mfa(int index, const std::string& value);
  void set_mfa(int index, std::string&& value);
  void set_mfa(int index, const char* value);
  void set_mfa(int index, const char* value, size_t size);
  std::string* add_mfa();
  void add_mfa(const std::string& value);
  void add_mfa(std::string&& value);
  void add_mfa(const char* value);
  void add_mfa(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mfa() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mfa();
  private:
  const std::string& _internal_mfa(int index) const;
  std::string* _internal_add_mfa();
  public:

  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string client_id = 2[json_name = "clientId"];
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string client_secret = 3[json_name = "clientSecret"];
  void clear_client_secret();
  const std::string& client_secret() const;
  void set_client_secret(const std::string& value);
  void set_client_secret(std::string&& value);
  void set_client_secret(const char* value);
  void set_client_secret(const char* value, size_t size);
  std::string* mutable_client_secret();
  std::string* release_client_secret();
  void set_allocated_client_secret(std::string* client_secret);
  private:
  const std::string& _internal_client_secret() const;
  void _internal_set_client_secret(const std::string& value);
  std::string* _internal_mutable_client_secret();
  public:

  // string button_image_url = 4[json_name = "buttonImageUrl"];
  void clear_button_image_url();
  const std::string& button_image_url() const;
  void set_button_image_url(const std::string& value);
  void set_button_image_url(std::string&& value);
  void set_button_image_url(const char* value);
  void set_button_image_url(const char* value, size_t size);
  std::string* mutable_button_image_url();
  std::string* release_button_image_url();
  void set_allocated_button_image_url(std::string* button_image_url);
  private:
  const std::string& _internal_button_image_url() const;
  void _internal_set_button_image_url(const std::string& value);
  std::string* _internal_mutable_button_image_url();
  public:

  // string oidc_discovery_url = 7[json_name = "oidcDiscoveryUrl"];
  void clear_oidc_discovery_url();
  const std::string& oidc_discovery_url() const;
  void set_oidc_discovery_url(const std::string& value);
  void set_oidc_discovery_url(std::string&& value);
  void set_oidc_discovery_url(const char* value);
  void set_oidc_discovery_url(const char* value, size_t size);
  std::string* mutable_oidc_discovery_url();
  std::string* release_oidc_discovery_url();
  void set_allocated_oidc_discovery_url(std::string* oidc_discovery_url);
  private:
  const std::string& _internal_oidc_discovery_url() const;
  void _internal_set_oidc_discovery_url(const std::string& value);
  std::string* _internal_mutable_oidc_discovery_url();
  public:

  // string scopes = 10[json_name = "scopes"];
  void clear_scopes();
  const std::string& scopes() const;
  void set_scopes(const std::string& value);
  void set_scopes(std::string&& value);
  void set_scopes(const char* value);
  void set_scopes(const char* value, size_t size);
  std::string* mutable_scopes();
  std::string* release_scopes();
  void set_allocated_scopes(std::string* scopes);
  private:
  const std::string& _internal_scopes() const;
  void _internal_set_scopes(const std::string& value);
  std::string* _internal_mutable_scopes();
  public:

  // .depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Providers provider = 6[json_name = "provider"];
  void clear_provider();
  ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Providers provider() const;
  void set_provider(::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Providers value);
  private:
  ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Providers _internal_provider() const;
  void _internal_set_provider(::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Providers value);
  public:

  // .depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Types type = 9[json_name = "type"];
  void clear_type();
  ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Types type() const;
  void set_type(::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Types value);
  private:
  ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Types _internal_type() const;
  void _internal_set_type(::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Types value);
  public:

  // .depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Purposes purpose = 11[json_name = "purpose"];
  void clear_purpose();
  ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Purposes purpose() const;
  void set_purpose(::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Purposes value);
  private:
  ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Purposes _internal_purpose() const;
  void _internal_set_purpose(::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Purposes value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mfa_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr button_image_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oidc_discovery_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scopes_;
  int provider_;
  int type_;
  int purpose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetConnectionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse) */ {
 public:
  inline GetConnectionsResponse() : GetConnectionsResponse(nullptr) {}
  virtual ~GetConnectionsResponse();

  GetConnectionsResponse(const GetConnectionsResponse& from);
  GetConnectionsResponse(GetConnectionsResponse&& from) noexcept
    : GetConnectionsResponse() {
    *this = ::std::move(from);
  }

  inline GetConnectionsResponse& operator=(const GetConnectionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnectionsResponse& operator=(GetConnectionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConnectionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnectionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetConnectionsResponse*>(
               &_GetConnectionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetConnectionsResponse& a, GetConnectionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnectionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConnectionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConnectionsResponse* New() const final {
    return CreateMaybeMessage<GetConnectionsResponse>(nullptr);
  }

  GetConnectionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConnectionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConnectionsResponse& from);
  void MergeFrom(const GetConnectionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetConnectionsResponse";
  }
  protected:
  explicit GetConnectionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetConnectionsResponse_Connection Connection;

  typedef GetConnectionsResponse_Providers Providers;
  static constexpr Providers NONE =
    GetConnectionsResponse_Providers_NONE;
  static constexpr Providers OPENID =
    GetConnectionsResponse_Providers_OPENID;
  static constexpr Providers AMAZON =
    GetConnectionsResponse_Providers_AMAZON;
  static constexpr Providers BITBUCKET =
    GetConnectionsResponse_Providers_BITBUCKET;
  static constexpr Providers BOX =
    GetConnectionsResponse_Providers_BOX;
  static constexpr Providers DAILYMOTION =
    GetConnectionsResponse_Providers_DAILYMOTION;
  static constexpr Providers DEEZER =
    GetConnectionsResponse_Providers_DEEZER;
  static constexpr Providers DIGITALOCEAN =
    GetConnectionsResponse_Providers_DIGITALOCEAN;
  static constexpr Providers DISCORD =
    GetConnectionsResponse_Providers_DISCORD;
  static constexpr Providers DROPBOX =
    GetConnectionsResponse_Providers_DROPBOX;
  static constexpr Providers EVEONLINE =
    GetConnectionsResponse_Providers_EVEONLINE;
  static constexpr Providers FACEBOOK =
    GetConnectionsResponse_Providers_FACEBOOK;
  static constexpr Providers FITBIT =
    GetConnectionsResponse_Providers_FITBIT;
  static constexpr Providers GITEA =
    GetConnectionsResponse_Providers_GITEA;
  static constexpr Providers GITHUB =
    GetConnectionsResponse_Providers_GITHUB;
  static constexpr Providers GITLAB =
    GetConnectionsResponse_Providers_GITLAB;
  static constexpr Providers GOOGLE =
    GetConnectionsResponse_Providers_GOOGLE;
  static constexpr Providers SHOPIFY =
    GetConnectionsResponse_Providers_SHOPIFY;
  static constexpr Providers SOUNDCLOUD =
    GetConnectionsResponse_Providers_SOUNDCLOUD;
  static constexpr Providers SPOTIFY =
    GetConnectionsResponse_Providers_SPOTIFY;
  static constexpr Providers STEAM =
    GetConnectionsResponse_Providers_STEAM;
  static constexpr Providers STRIPE =
    GetConnectionsResponse_Providers_STRIPE;
  static constexpr Providers TWITCH =
    GetConnectionsResponse_Providers_TWITCH;
  static constexpr Providers UBER =
    GetConnectionsResponse_Providers_UBER;
  static constexpr Providers WEPAY =
    GetConnectionsResponse_Providers_WEPAY;
  static constexpr Providers YAHOO =
    GetConnectionsResponse_Providers_YAHOO;
  static constexpr Providers YAMMER =
    GetConnectionsResponse_Providers_YAMMER;
  static constexpr Providers HEROKU =
    GetConnectionsResponse_Providers_HEROKU;
  static constexpr Providers INSTAGRAM =
    GetConnectionsResponse_Providers_INSTAGRAM;
  static constexpr Providers INTERCOM =
    GetConnectionsResponse_Providers_INTERCOM;
  static constexpr Providers KAKAO =
    GetConnectionsResponse_Providers_KAKAO;
  static constexpr Providers LASTFM =
    GetConnectionsResponse_Providers_LASTFM;
  static constexpr Providers LINKEDIN =
    GetConnectionsResponse_Providers_LINKEDIN;
  static constexpr Providers LINE =
    GetConnectionsResponse_Providers_LINE;
  static constexpr Providers ONEDRIVE =
    GetConnectionsResponse_Providers_ONEDRIVE;
  static constexpr Providers AZUREAD =
    GetConnectionsResponse_Providers_AZUREAD;
  static constexpr Providers MICROSOFTONLINE =
    GetConnectionsResponse_Providers_MICROSOFTONLINE;
  static constexpr Providers BATTLENET =
    GetConnectionsResponse_Providers_BATTLENET;
  static constexpr Providers PAYPAL =
    GetConnectionsResponse_Providers_PAYPAL;
  static constexpr Providers TWITTER =
    GetConnectionsResponse_Providers_TWITTER;
  static constexpr Providers SALESFORCE =
    GetConnectionsResponse_Providers_SALESFORCE;
  static constexpr Providers TYPETALK =
    GetConnectionsResponse_Providers_TYPETALK;
  static constexpr Providers SLACK =
    GetConnectionsResponse_Providers_SLACK;
  static constexpr Providers MEETUP =
    GetConnectionsResponse_Providers_MEETUP;
  static constexpr Providers XERO =
    GetConnectionsResponse_Providers_XERO;
  static constexpr Providers VK =
    GetConnectionsResponse_Providers_VK;
  static constexpr Providers NAVER =
    GetConnectionsResponse_Providers_NAVER;
  static constexpr Providers YANDEX =
    GetConnectionsResponse_Providers_YANDEX;
  static constexpr Providers NEXTCLOUD =
    GetConnectionsResponse_Providers_NEXTCLOUD;
  static constexpr Providers APPLE =
    GetConnectionsResponse_Providers_APPLE;
  static constexpr Providers STRAVA =
    GetConnectionsResponse_Providers_STRAVA;
  static inline bool Providers_IsValid(int value) {
    return GetConnectionsResponse_Providers_IsValid(value);
  }
  static constexpr Providers Providers_MIN =
    GetConnectionsResponse_Providers_Providers_MIN;
  static constexpr Providers Providers_MAX =
    GetConnectionsResponse_Providers_Providers_MAX;
  static constexpr int Providers_ARRAYSIZE =
    GetConnectionsResponse_Providers_Providers_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Providers_descriptor() {
    return GetConnectionsResponse_Providers_descriptor();
  }
  template<typename T>
  static inline const std::string& Providers_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Providers>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Providers_Name.");
    return GetConnectionsResponse_Providers_Name(enum_t_value);
  }
  static inline bool Providers_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Providers* value) {
    return GetConnectionsResponse_Providers_Parse(name, value);
  }

  typedef GetConnectionsResponse_Types Types;
  static constexpr Types UNSET =
    GetConnectionsResponse_Types_UNSET;
  static constexpr Types PASSWORD =
    GetConnectionsResponse_Types_PASSWORD;
  static constexpr Types OTP =
    GetConnectionsResponse_Types_OTP;
  static constexpr Types TOTP =
    GetConnectionsResponse_Types_TOTP;
  static constexpr Types OIDC =
    GetConnectionsResponse_Types_OIDC;
  static inline bool Types_IsValid(int value) {
    return GetConnectionsResponse_Types_IsValid(value);
  }
  static constexpr Types Types_MIN =
    GetConnectionsResponse_Types_Types_MIN;
  static constexpr Types Types_MAX =
    GetConnectionsResponse_Types_Types_MAX;
  static constexpr int Types_ARRAYSIZE =
    GetConnectionsResponse_Types_Types_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Types_descriptor() {
    return GetConnectionsResponse_Types_descriptor();
  }
  template<typename T>
  static inline const std::string& Types_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Types>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Types_Name.");
    return GetConnectionsResponse_Types_Name(enum_t_value);
  }
  static inline bool Types_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Types* value) {
    return GetConnectionsResponse_Types_Parse(name, value);
  }

  typedef GetConnectionsResponse_Purposes Purposes;
  static constexpr Purposes PURPOSE_UNKNOWN =
    GetConnectionsResponse_Purposes_PURPOSE_UNKNOWN;
  static constexpr Purposes PURPOSE_MAIN_FACTOR =
    GetConnectionsResponse_Purposes_PURPOSE_MAIN_FACTOR;
  static constexpr Purposes PURPOSE_SECOND_FACTOR =
    GetConnectionsResponse_Purposes_PURPOSE_SECOND_FACTOR;
  static inline bool Purposes_IsValid(int value) {
    return GetConnectionsResponse_Purposes_IsValid(value);
  }
  static constexpr Purposes Purposes_MIN =
    GetConnectionsResponse_Purposes_Purposes_MIN;
  static constexpr Purposes Purposes_MAX =
    GetConnectionsResponse_Purposes_Purposes_MAX;
  static constexpr int Purposes_ARRAYSIZE =
    GetConnectionsResponse_Purposes_Purposes_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Purposes_descriptor() {
    return GetConnectionsResponse_Purposes_descriptor();
  }
  template<typename T>
  static inline const std::string& Purposes_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Purposes>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Purposes_Name.");
    return GetConnectionsResponse_Purposes_Name(enum_t_value);
  }
  static inline bool Purposes_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Purposes* value) {
    return GetConnectionsResponse_Purposes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionsFieldNumber = 1,
  };
  // repeated .depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection connections = 1[json_name = "connections"];
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection >*
      mutable_connections();
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection& _internal_connections(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection* _internal_add_connections();
  public:
  const ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection& connections(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection >&
      connections() const;

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection > connections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateConnectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest) */ {
 public:
  inline UpdateConnectionRequest() : UpdateConnectionRequest(nullptr) {}
  virtual ~UpdateConnectionRequest();

  UpdateConnectionRequest(const UpdateConnectionRequest& from);
  UpdateConnectionRequest(UpdateConnectionRequest&& from) noexcept
    : UpdateConnectionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateConnectionRequest& operator=(const UpdateConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateConnectionRequest& operator=(UpdateConnectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateConnectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateConnectionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateConnectionRequest*>(
               &_UpdateConnectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UpdateConnectionRequest& a, UpdateConnectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateConnectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateConnectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateConnectionRequest* New() const final {
    return CreateMaybeMessage<UpdateConnectionRequest>(nullptr);
  }

  UpdateConnectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateConnectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateConnectionRequest& from);
  void MergeFrom(const UpdateConnectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateConnectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest";
  }
  protected:
  explicit UpdateConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateConnectionRequest_Providers Providers;
  static constexpr Providers NONE =
    UpdateConnectionRequest_Providers_NONE;
  static constexpr Providers OPENID =
    UpdateConnectionRequest_Providers_OPENID;
  static constexpr Providers AMAZON =
    UpdateConnectionRequest_Providers_AMAZON;
  static constexpr Providers BITBUCKET =
    UpdateConnectionRequest_Providers_BITBUCKET;
  static constexpr Providers BOX =
    UpdateConnectionRequest_Providers_BOX;
  static constexpr Providers DAILYMOTION =
    UpdateConnectionRequest_Providers_DAILYMOTION;
  static constexpr Providers DEEZER =
    UpdateConnectionRequest_Providers_DEEZER;
  static constexpr Providers DIGITALOCEAN =
    UpdateConnectionRequest_Providers_DIGITALOCEAN;
  static constexpr Providers DISCORD =
    UpdateConnectionRequest_Providers_DISCORD;
  static constexpr Providers DROPBOX =
    UpdateConnectionRequest_Providers_DROPBOX;
  static constexpr Providers EVEONLINE =
    UpdateConnectionRequest_Providers_EVEONLINE;
  static constexpr Providers FACEBOOK =
    UpdateConnectionRequest_Providers_FACEBOOK;
  static constexpr Providers FITBIT =
    UpdateConnectionRequest_Providers_FITBIT;
  static constexpr Providers GITEA =
    UpdateConnectionRequest_Providers_GITEA;
  static constexpr Providers GITHUB =
    UpdateConnectionRequest_Providers_GITHUB;
  static constexpr Providers GITLAB =
    UpdateConnectionRequest_Providers_GITLAB;
  static constexpr Providers GOOGLE =
    UpdateConnectionRequest_Providers_GOOGLE;
  static constexpr Providers SHOPIFY =
    UpdateConnectionRequest_Providers_SHOPIFY;
  static constexpr Providers SOUNDCLOUD =
    UpdateConnectionRequest_Providers_SOUNDCLOUD;
  static constexpr Providers SPOTIFY =
    UpdateConnectionRequest_Providers_SPOTIFY;
  static constexpr Providers STEAM =
    UpdateConnectionRequest_Providers_STEAM;
  static constexpr Providers STRIPE =
    UpdateConnectionRequest_Providers_STRIPE;
  static constexpr Providers TWITCH =
    UpdateConnectionRequest_Providers_TWITCH;
  static constexpr Providers UBER =
    UpdateConnectionRequest_Providers_UBER;
  static constexpr Providers WEPAY =
    UpdateConnectionRequest_Providers_WEPAY;
  static constexpr Providers YAHOO =
    UpdateConnectionRequest_Providers_YAHOO;
  static constexpr Providers YAMMER =
    UpdateConnectionRequest_Providers_YAMMER;
  static constexpr Providers HEROKU =
    UpdateConnectionRequest_Providers_HEROKU;
  static constexpr Providers INSTAGRAM =
    UpdateConnectionRequest_Providers_INSTAGRAM;
  static constexpr Providers INTERCOM =
    UpdateConnectionRequest_Providers_INTERCOM;
  static constexpr Providers KAKAO =
    UpdateConnectionRequest_Providers_KAKAO;
  static constexpr Providers LASTFM =
    UpdateConnectionRequest_Providers_LASTFM;
  static constexpr Providers LINKEDIN =
    UpdateConnectionRequest_Providers_LINKEDIN;
  static constexpr Providers LINE =
    UpdateConnectionRequest_Providers_LINE;
  static constexpr Providers ONEDRIVE =
    UpdateConnectionRequest_Providers_ONEDRIVE;
  static constexpr Providers AZUREAD =
    UpdateConnectionRequest_Providers_AZUREAD;
  static constexpr Providers MICROSOFTONLINE =
    UpdateConnectionRequest_Providers_MICROSOFTONLINE;
  static constexpr Providers BATTLENET =
    UpdateConnectionRequest_Providers_BATTLENET;
  static constexpr Providers PAYPAL =
    UpdateConnectionRequest_Providers_PAYPAL;
  static constexpr Providers TWITTER =
    UpdateConnectionRequest_Providers_TWITTER;
  static constexpr Providers SALESFORCE =
    UpdateConnectionRequest_Providers_SALESFORCE;
  static constexpr Providers TYPETALK =
    UpdateConnectionRequest_Providers_TYPETALK;
  static constexpr Providers SLACK =
    UpdateConnectionRequest_Providers_SLACK;
  static constexpr Providers MEETUP =
    UpdateConnectionRequest_Providers_MEETUP;
  static constexpr Providers XERO =
    UpdateConnectionRequest_Providers_XERO;
  static constexpr Providers VK =
    UpdateConnectionRequest_Providers_VK;
  static constexpr Providers NAVER =
    UpdateConnectionRequest_Providers_NAVER;
  static constexpr Providers YANDEX =
    UpdateConnectionRequest_Providers_YANDEX;
  static constexpr Providers NEXTCLOUD =
    UpdateConnectionRequest_Providers_NEXTCLOUD;
  static constexpr Providers APPLE =
    UpdateConnectionRequest_Providers_APPLE;
  static constexpr Providers STRAVA =
    UpdateConnectionRequest_Providers_STRAVA;
  static inline bool Providers_IsValid(int value) {
    return UpdateConnectionRequest_Providers_IsValid(value);
  }
  static constexpr Providers Providers_MIN =
    UpdateConnectionRequest_Providers_Providers_MIN;
  static constexpr Providers Providers_MAX =
    UpdateConnectionRequest_Providers_Providers_MAX;
  static constexpr int Providers_ARRAYSIZE =
    UpdateConnectionRequest_Providers_Providers_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Providers_descriptor() {
    return UpdateConnectionRequest_Providers_descriptor();
  }
  template<typename T>
  static inline const std::string& Providers_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Providers>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Providers_Name.");
    return UpdateConnectionRequest_Providers_Name(enum_t_value);
  }
  static inline bool Providers_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Providers* value) {
    return UpdateConnectionRequest_Providers_Parse(name, value);
  }

  typedef UpdateConnectionRequest_Types Types;
  static constexpr Types UNSET =
    UpdateConnectionRequest_Types_UNSET;
  static constexpr Types PASSWORD =
    UpdateConnectionRequest_Types_PASSWORD;
  static constexpr Types OTP =
    UpdateConnectionRequest_Types_OTP;
  static constexpr Types TOTP =
    UpdateConnectionRequest_Types_TOTP;
  static constexpr Types OIDC =
    UpdateConnectionRequest_Types_OIDC;
  static inline bool Types_IsValid(int value) {
    return UpdateConnectionRequest_Types_IsValid(value);
  }
  static constexpr Types Types_MIN =
    UpdateConnectionRequest_Types_Types_MIN;
  static constexpr Types Types_MAX =
    UpdateConnectionRequest_Types_Types_MAX;
  static constexpr int Types_ARRAYSIZE =
    UpdateConnectionRequest_Types_Types_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Types_descriptor() {
    return UpdateConnectionRequest_Types_descriptor();
  }
  template<typename T>
  static inline const std::string& Types_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Types>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Types_Name.");
    return UpdateConnectionRequest_Types_Name(enum_t_value);
  }
  static inline bool Types_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Types* value) {
    return UpdateConnectionRequest_Types_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMfaFieldNumber = 8,
    kClientIdFieldNumber = 2,
    kClientSecretFieldNumber = 3,
    kButtonImageUrlFieldNumber = 4,
    kOidcDiscoveryUrlFieldNumber = 7,
    kIdFieldNumber = 10,
    kScopesFieldNumber = 11,
    kProviderFieldNumber = 6,
    kTypeFieldNumber = 9,
  };
  // repeated string mfa = 8[json_name = "mfa"];
  int mfa_size() const;
  private:
  int _internal_mfa_size() const;
  public:
  void clear_mfa();
  const std::string& mfa(int index) const;
  std::string* mutable_mfa(int index);
  void set_mfa(int index, const std::string& value);
  void set_mfa(int index, std::string&& value);
  void set_mfa(int index, const char* value);
  void set_mfa(int index, const char* value, size_t size);
  std::string* add_mfa();
  void add_mfa(const std::string& value);
  void add_mfa(std::string&& value);
  void add_mfa(const char* value);
  void add_mfa(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mfa() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mfa();
  private:
  const std::string& _internal_mfa(int index) const;
  std::string* _internal_add_mfa();
  public:

  // string client_id = 2[json_name = "clientId"];
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string client_secret = 3[json_name = "clientSecret"];
  void clear_client_secret();
  const std::string& client_secret() const;
  void set_client_secret(const std::string& value);
  void set_client_secret(std::string&& value);
  void set_client_secret(const char* value);
  void set_client_secret(const char* value, size_t size);
  std::string* mutable_client_secret();
  std::string* release_client_secret();
  void set_allocated_client_secret(std::string* client_secret);
  private:
  const std::string& _internal_client_secret() const;
  void _internal_set_client_secret(const std::string& value);
  std::string* _internal_mutable_client_secret();
  public:

  // string button_image_url = 4[json_name = "buttonImageUrl"];
  void clear_button_image_url();
  const std::string& button_image_url() const;
  void set_button_image_url(const std::string& value);
  void set_button_image_url(std::string&& value);
  void set_button_image_url(const char* value);
  void set_button_image_url(const char* value, size_t size);
  std::string* mutable_button_image_url();
  std::string* release_button_image_url();
  void set_allocated_button_image_url(std::string* button_image_url);
  private:
  const std::string& _internal_button_image_url() const;
  void _internal_set_button_image_url(const std::string& value);
  std::string* _internal_mutable_button_image_url();
  public:

  // string oidc_discovery_url = 7[json_name = "oidcDiscoveryUrl"];
  void clear_oidc_discovery_url();
  const std::string& oidc_discovery_url() const;
  void set_oidc_discovery_url(const std::string& value);
  void set_oidc_discovery_url(std::string&& value);
  void set_oidc_discovery_url(const char* value);
  void set_oidc_discovery_url(const char* value, size_t size);
  std::string* mutable_oidc_discovery_url();
  std::string* release_oidc_discovery_url();
  void set_allocated_oidc_discovery_url(std::string* oidc_discovery_url);
  private:
  const std::string& _internal_oidc_discovery_url() const;
  void _internal_set_oidc_discovery_url(const std::string& value);
  std::string* _internal_mutable_oidc_discovery_url();
  public:

  // string id = 10[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string scopes = 11[json_name = "scopes"];
  void clear_scopes();
  const std::string& scopes() const;
  void set_scopes(const std::string& value);
  void set_scopes(std::string&& value);
  void set_scopes(const char* value);
  void set_scopes(const char* value, size_t size);
  std::string* mutable_scopes();
  std::string* release_scopes();
  void set_allocated_scopes(std::string* scopes);
  private:
  const std::string& _internal_scopes() const;
  void _internal_set_scopes(const std::string& value);
  std::string* _internal_mutable_scopes();
  public:

  // .depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.Providers provider = 6[json_name = "provider"];
  void clear_provider();
  ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Providers provider() const;
  void set_provider(::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Providers value);
  private:
  ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Providers _internal_provider() const;
  void _internal_set_provider(::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Providers value);
  public:

  // .depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.Types type = 9[json_name = "type"];
  void clear_type();
  ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Types type() const;
  void set_type(::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Types value);
  private:
  ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Types _internal_type() const;
  void _internal_set_type(::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Types value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mfa_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr button_image_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oidc_discovery_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scopes_;
  int provider_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateConnectionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateConnectionResponse) */ {
 public:
  inline UpdateConnectionResponse() : UpdateConnectionResponse(nullptr) {}
  virtual ~UpdateConnectionResponse();

  UpdateConnectionResponse(const UpdateConnectionResponse& from);
  UpdateConnectionResponse(UpdateConnectionResponse&& from) noexcept
    : UpdateConnectionResponse() {
    *this = ::std::move(from);
  }

  inline UpdateConnectionResponse& operator=(const UpdateConnectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateConnectionResponse& operator=(UpdateConnectionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateConnectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateConnectionResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateConnectionResponse*>(
               &_UpdateConnectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(UpdateConnectionResponse& a, UpdateConnectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateConnectionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateConnectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateConnectionResponse* New() const final {
    return CreateMaybeMessage<UpdateConnectionResponse>(nullptr);
  }

  UpdateConnectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateConnectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateConnectionResponse& from);
  void MergeFrom(const UpdateConnectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateConnectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateConnectionResponse";
  }
  protected:
  explicit UpdateConnectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateConnectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteConnectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.DeleteConnectionRequest) */ {
 public:
  inline DeleteConnectionRequest() : DeleteConnectionRequest(nullptr) {}
  virtual ~DeleteConnectionRequest();

  DeleteConnectionRequest(const DeleteConnectionRequest& from);
  DeleteConnectionRequest(DeleteConnectionRequest&& from) noexcept
    : DeleteConnectionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteConnectionRequest& operator=(const DeleteConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteConnectionRequest& operator=(DeleteConnectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteConnectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteConnectionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteConnectionRequest*>(
               &_DeleteConnectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DeleteConnectionRequest& a, DeleteConnectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteConnectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteConnectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteConnectionRequest* New() const final {
    return CreateMaybeMessage<DeleteConnectionRequest>(nullptr);
  }

  DeleteConnectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteConnectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteConnectionRequest& from);
  void MergeFrom(const DeleteConnectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteConnectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.DeleteConnectionRequest";
  }
  protected:
  explicit DeleteConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.DeleteConnectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteConnectionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.DeleteConnectionResponse) */ {
 public:
  inline DeleteConnectionResponse() : DeleteConnectionResponse(nullptr) {}
  virtual ~DeleteConnectionResponse();

  DeleteConnectionResponse(const DeleteConnectionResponse& from);
  DeleteConnectionResponse(DeleteConnectionResponse&& from) noexcept
    : DeleteConnectionResponse() {
    *this = ::std::move(from);
  }

  inline DeleteConnectionResponse& operator=(const DeleteConnectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteConnectionResponse& operator=(DeleteConnectionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteConnectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteConnectionResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteConnectionResponse*>(
               &_DeleteConnectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(DeleteConnectionResponse& a, DeleteConnectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteConnectionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteConnectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteConnectionResponse* New() const final {
    return CreateMaybeMessage<DeleteConnectionResponse>(nullptr);
  }

  DeleteConnectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteConnectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteConnectionResponse& from);
  void MergeFrom(const DeleteConnectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteConnectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.DeleteConnectionResponse";
  }
  protected:
  explicit DeleteConnectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.DeleteConnectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetOAuth2ClientsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsRequest) */ {
 public:
  inline GetOAuth2ClientsRequest() : GetOAuth2ClientsRequest(nullptr) {}
  virtual ~GetOAuth2ClientsRequest();

  GetOAuth2ClientsRequest(const GetOAuth2ClientsRequest& from);
  GetOAuth2ClientsRequest(GetOAuth2ClientsRequest&& from) noexcept
    : GetOAuth2ClientsRequest() {
    *this = ::std::move(from);
  }

  inline GetOAuth2ClientsRequest& operator=(const GetOAuth2ClientsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOAuth2ClientsRequest& operator=(GetOAuth2ClientsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOAuth2ClientsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOAuth2ClientsRequest* internal_default_instance() {
    return reinterpret_cast<const GetOAuth2ClientsRequest*>(
               &_GetOAuth2ClientsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetOAuth2ClientsRequest& a, GetOAuth2ClientsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOAuth2ClientsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOAuth2ClientsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOAuth2ClientsRequest* New() const final {
    return CreateMaybeMessage<GetOAuth2ClientsRequest>(nullptr);
  }

  GetOAuth2ClientsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOAuth2ClientsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOAuth2ClientsRequest& from);
  void MergeFrom(const GetOAuth2ClientsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOAuth2ClientsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsRequest";
  }
  protected:
  explicit GetOAuth2ClientsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetOAuth2ClientsResponse_Client PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client) */ {
 public:
  inline GetOAuth2ClientsResponse_Client() : GetOAuth2ClientsResponse_Client(nullptr) {}
  virtual ~GetOAuth2ClientsResponse_Client();

  GetOAuth2ClientsResponse_Client(const GetOAuth2ClientsResponse_Client& from);
  GetOAuth2ClientsResponse_Client(GetOAuth2ClientsResponse_Client&& from) noexcept
    : GetOAuth2ClientsResponse_Client() {
    *this = ::std::move(from);
  }

  inline GetOAuth2ClientsResponse_Client& operator=(const GetOAuth2ClientsResponse_Client& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOAuth2ClientsResponse_Client& operator=(GetOAuth2ClientsResponse_Client&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOAuth2ClientsResponse_Client& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOAuth2ClientsResponse_Client* internal_default_instance() {
    return reinterpret_cast<const GetOAuth2ClientsResponse_Client*>(
               &_GetOAuth2ClientsResponse_Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetOAuth2ClientsResponse_Client& a, GetOAuth2ClientsResponse_Client& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOAuth2ClientsResponse_Client* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOAuth2ClientsResponse_Client* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOAuth2ClientsResponse_Client* New() const final {
    return CreateMaybeMessage<GetOAuth2ClientsResponse_Client>(nullptr);
  }

  GetOAuth2ClientsResponse_Client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOAuth2ClientsResponse_Client>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOAuth2ClientsResponse_Client& from);
  void MergeFrom(const GetOAuth2ClientsResponse_Client& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOAuth2ClientsResponse_Client* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client";
  }
  protected:
  explicit GetOAuth2ClientsResponse_Client(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedCorsOriginsFieldNumber = 1,
    kAudienceFieldNumber = 2,
    kContactsFieldNumber = 9,
    kGrantTypesFieldNumber = 13,
    kPostLogoutRedirectUrisFieldNumber = 20,
    kRedirectUrisFieldNumber = 21,
    kRequestUrisFieldNumber = 23,
    kResponseTypesFieldNumber = 24,
    kBackchannelLogoutUriFieldNumber = 4,
    kClientIdFieldNumber = 5,
    kClientNameFieldNumber = 6,
    kClientUriFieldNumber = 8,
    kFrontchannelLogoutUriFieldNumber = 12,
    kJwksUriFieldNumber = 15,
    kLogoUriFieldNumber = 16,
    kOwnerFieldNumber = 18,
    kPolicyUriFieldNumber = 19,
    kScopeFieldNumber = 25,
    kSectorIdentifierUriFieldNumber = 26,
    kTosUriFieldNumber = 30,
    kCreatedAtFieldNumber = 10,
    kJwksFieldNumber = 14,
    kMetadataFieldNumber = 17,
    kUpdatedAtFieldNumber = 31,
    kClientSecretExpiresAtFieldNumber = 7,
    kBackchannelLogoutSessionRequiredFieldNumber = 3,
    kFrontchannelLogoutSessionRequiredFieldNumber = 11,
    kRequestObjectSigningAlgFieldNumber = 22,
    kSubjectTypeFieldNumber = 27,
    kTokenEndpointAuthMethodFieldNumber = 28,
    kTokenEndpointAuthSigningAlgFieldNumber = 29,
    kUserinfoSignedResponseAlgFieldNumber = 32,
    kClientTypeFieldNumber = 33,
  };
  // repeated string allowed_cors_origins = 1[json_name = "allowedCorsOrigins"];
  int allowed_cors_origins_size() const;
  private:
  int _internal_allowed_cors_origins_size() const;
  public:
  void clear_allowed_cors_origins();
  const std::string& allowed_cors_origins(int index) const;
  std::string* mutable_allowed_cors_origins(int index);
  void set_allowed_cors_origins(int index, const std::string& value);
  void set_allowed_cors_origins(int index, std::string&& value);
  void set_allowed_cors_origins(int index, const char* value);
  void set_allowed_cors_origins(int index, const char* value, size_t size);
  std::string* add_allowed_cors_origins();
  void add_allowed_cors_origins(const std::string& value);
  void add_allowed_cors_origins(std::string&& value);
  void add_allowed_cors_origins(const char* value);
  void add_allowed_cors_origins(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_cors_origins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_cors_origins();
  private:
  const std::string& _internal_allowed_cors_origins(int index) const;
  std::string* _internal_add_allowed_cors_origins();
  public:

  // repeated string audience = 2[json_name = "audience"];
  int audience_size() const;
  private:
  int _internal_audience_size() const;
  public:
  void clear_audience();
  const std::string& audience(int index) const;
  std::string* mutable_audience(int index);
  void set_audience(int index, const std::string& value);
  void set_audience(int index, std::string&& value);
  void set_audience(int index, const char* value);
  void set_audience(int index, const char* value, size_t size);
  std::string* add_audience();
  void add_audience(const std::string& value);
  void add_audience(std::string&& value);
  void add_audience(const char* value);
  void add_audience(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& audience() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_audience();
  private:
  const std::string& _internal_audience(int index) const;
  std::string* _internal_add_audience();
  public:

  // repeated string contacts = 9[json_name = "contacts"];
  int contacts_size() const;
  private:
  int _internal_contacts_size() const;
  public:
  void clear_contacts();
  const std::string& contacts(int index) const;
  std::string* mutable_contacts(int index);
  void set_contacts(int index, const std::string& value);
  void set_contacts(int index, std::string&& value);
  void set_contacts(int index, const char* value);
  void set_contacts(int index, const char* value, size_t size);
  std::string* add_contacts();
  void add_contacts(const std::string& value);
  void add_contacts(std::string&& value);
  void add_contacts(const char* value);
  void add_contacts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& contacts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_contacts();
  private:
  const std::string& _internal_contacts(int index) const;
  std::string* _internal_add_contacts();
  public:

  // repeated .depot.devtools.auth.v0.identity.admin.GrantType grant_types = 13[json_name = "grantTypes"];
  int grant_types_size() const;
  private:
  int _internal_grant_types_size() const;
  public:
  void clear_grant_types();
  private:
  ::depot::devtools::auth::v0::identity::admin::GrantType _internal_grant_types(int index) const;
  void _internal_add_grant_types(::depot::devtools::auth::v0::identity::admin::GrantType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_grant_types();
  public:
  ::depot::devtools::auth::v0::identity::admin::GrantType grant_types(int index) const;
  void set_grant_types(int index, ::depot::devtools::auth::v0::identity::admin::GrantType value);
  void add_grant_types(::depot::devtools::auth::v0::identity::admin::GrantType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& grant_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_grant_types();

  // repeated string post_logout_redirect_uris = 20[json_name = "postLogoutRedirectUris"];
  int post_logout_redirect_uris_size() const;
  private:
  int _internal_post_logout_redirect_uris_size() const;
  public:
  void clear_post_logout_redirect_uris();
  const std::string& post_logout_redirect_uris(int index) const;
  std::string* mutable_post_logout_redirect_uris(int index);
  void set_post_logout_redirect_uris(int index, const std::string& value);
  void set_post_logout_redirect_uris(int index, std::string&& value);
  void set_post_logout_redirect_uris(int index, const char* value);
  void set_post_logout_redirect_uris(int index, const char* value, size_t size);
  std::string* add_post_logout_redirect_uris();
  void add_post_logout_redirect_uris(const std::string& value);
  void add_post_logout_redirect_uris(std::string&& value);
  void add_post_logout_redirect_uris(const char* value);
  void add_post_logout_redirect_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& post_logout_redirect_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_post_logout_redirect_uris();
  private:
  const std::string& _internal_post_logout_redirect_uris(int index) const;
  std::string* _internal_add_post_logout_redirect_uris();
  public:

  // repeated string redirect_uris = 21[json_name = "redirectUris"];
  int redirect_uris_size() const;
  private:
  int _internal_redirect_uris_size() const;
  public:
  void clear_redirect_uris();
  const std::string& redirect_uris(int index) const;
  std::string* mutable_redirect_uris(int index);
  void set_redirect_uris(int index, const std::string& value);
  void set_redirect_uris(int index, std::string&& value);
  void set_redirect_uris(int index, const char* value);
  void set_redirect_uris(int index, const char* value, size_t size);
  std::string* add_redirect_uris();
  void add_redirect_uris(const std::string& value);
  void add_redirect_uris(std::string&& value);
  void add_redirect_uris(const char* value);
  void add_redirect_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& redirect_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_redirect_uris();
  private:
  const std::string& _internal_redirect_uris(int index) const;
  std::string* _internal_add_redirect_uris();
  public:

  // repeated string request_uris = 23[json_name = "requestUris"];
  int request_uris_size() const;
  private:
  int _internal_request_uris_size() const;
  public:
  void clear_request_uris();
  const std::string& request_uris(int index) const;
  std::string* mutable_request_uris(int index);
  void set_request_uris(int index, const std::string& value);
  void set_request_uris(int index, std::string&& value);
  void set_request_uris(int index, const char* value);
  void set_request_uris(int index, const char* value, size_t size);
  std::string* add_request_uris();
  void add_request_uris(const std::string& value);
  void add_request_uris(std::string&& value);
  void add_request_uris(const char* value);
  void add_request_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& request_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_request_uris();
  private:
  const std::string& _internal_request_uris(int index) const;
  std::string* _internal_add_request_uris();
  public:

  // repeated .depot.devtools.auth.v0.identity.admin.ResponseType response_types = 24[json_name = "responseTypes"];
  int response_types_size() const;
  private:
  int _internal_response_types_size() const;
  public:
  void clear_response_types();
  private:
  ::depot::devtools::auth::v0::identity::admin::ResponseType _internal_response_types(int index) const;
  void _internal_add_response_types(::depot::devtools::auth::v0::identity::admin::ResponseType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_response_types();
  public:
  ::depot::devtools::auth::v0::identity::admin::ResponseType response_types(int index) const;
  void set_response_types(int index, ::depot::devtools::auth::v0::identity::admin::ResponseType value);
  void add_response_types(::depot::devtools::auth::v0::identity::admin::ResponseType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& response_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_response_types();

  // string backchannel_logout_uri = 4[json_name = "backchannelLogoutUri"];
  void clear_backchannel_logout_uri();
  const std::string& backchannel_logout_uri() const;
  void set_backchannel_logout_uri(const std::string& value);
  void set_backchannel_logout_uri(std::string&& value);
  void set_backchannel_logout_uri(const char* value);
  void set_backchannel_logout_uri(const char* value, size_t size);
  std::string* mutable_backchannel_logout_uri();
  std::string* release_backchannel_logout_uri();
  void set_allocated_backchannel_logout_uri(std::string* backchannel_logout_uri);
  private:
  const std::string& _internal_backchannel_logout_uri() const;
  void _internal_set_backchannel_logout_uri(const std::string& value);
  std::string* _internal_mutable_backchannel_logout_uri();
  public:

  // string client_id = 5[json_name = "clientId"];
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string client_name = 6[json_name = "clientName"];
  void clear_client_name();
  const std::string& client_name() const;
  void set_client_name(const std::string& value);
  void set_client_name(std::string&& value);
  void set_client_name(const char* value);
  void set_client_name(const char* value, size_t size);
  std::string* mutable_client_name();
  std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);
  private:
  const std::string& _internal_client_name() const;
  void _internal_set_client_name(const std::string& value);
  std::string* _internal_mutable_client_name();
  public:

  // string client_uri = 8[json_name = "clientUri"];
  void clear_client_uri();
  const std::string& client_uri() const;
  void set_client_uri(const std::string& value);
  void set_client_uri(std::string&& value);
  void set_client_uri(const char* value);
  void set_client_uri(const char* value, size_t size);
  std::string* mutable_client_uri();
  std::string* release_client_uri();
  void set_allocated_client_uri(std::string* client_uri);
  private:
  const std::string& _internal_client_uri() const;
  void _internal_set_client_uri(const std::string& value);
  std::string* _internal_mutable_client_uri();
  public:

  // string frontchannel_logout_uri = 12[json_name = "frontchannelLogoutUri"];
  void clear_frontchannel_logout_uri();
  const std::string& frontchannel_logout_uri() const;
  void set_frontchannel_logout_uri(const std::string& value);
  void set_frontchannel_logout_uri(std::string&& value);
  void set_frontchannel_logout_uri(const char* value);
  void set_frontchannel_logout_uri(const char* value, size_t size);
  std::string* mutable_frontchannel_logout_uri();
  std::string* release_frontchannel_logout_uri();
  void set_allocated_frontchannel_logout_uri(std::string* frontchannel_logout_uri);
  private:
  const std::string& _internal_frontchannel_logout_uri() const;
  void _internal_set_frontchannel_logout_uri(const std::string& value);
  std::string* _internal_mutable_frontchannel_logout_uri();
  public:

  // string jwks_uri = 15[json_name = "jwksUri"];
  void clear_jwks_uri();
  const std::string& jwks_uri() const;
  void set_jwks_uri(const std::string& value);
  void set_jwks_uri(std::string&& value);
  void set_jwks_uri(const char* value);
  void set_jwks_uri(const char* value, size_t size);
  std::string* mutable_jwks_uri();
  std::string* release_jwks_uri();
  void set_allocated_jwks_uri(std::string* jwks_uri);
  private:
  const std::string& _internal_jwks_uri() const;
  void _internal_set_jwks_uri(const std::string& value);
  std::string* _internal_mutable_jwks_uri();
  public:

  // string logo_uri = 16[json_name = "logoUri"];
  void clear_logo_uri();
  const std::string& logo_uri() const;
  void set_logo_uri(const std::string& value);
  void set_logo_uri(std::string&& value);
  void set_logo_uri(const char* value);
  void set_logo_uri(const char* value, size_t size);
  std::string* mutable_logo_uri();
  std::string* release_logo_uri();
  void set_allocated_logo_uri(std::string* logo_uri);
  private:
  const std::string& _internal_logo_uri() const;
  void _internal_set_logo_uri(const std::string& value);
  std::string* _internal_mutable_logo_uri();
  public:

  // string owner = 18[json_name = "owner"];
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string policy_uri = 19[json_name = "policyUri"];
  void clear_policy_uri();
  const std::string& policy_uri() const;
  void set_policy_uri(const std::string& value);
  void set_policy_uri(std::string&& value);
  void set_policy_uri(const char* value);
  void set_policy_uri(const char* value, size_t size);
  std::string* mutable_policy_uri();
  std::string* release_policy_uri();
  void set_allocated_policy_uri(std::string* policy_uri);
  private:
  const std::string& _internal_policy_uri() const;
  void _internal_set_policy_uri(const std::string& value);
  std::string* _internal_mutable_policy_uri();
  public:

  // string scope = 25[json_name = "scope"];
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // string sector_identifier_uri = 26[json_name = "sectorIdentifierUri"];
  void clear_sector_identifier_uri();
  const std::string& sector_identifier_uri() const;
  void set_sector_identifier_uri(const std::string& value);
  void set_sector_identifier_uri(std::string&& value);
  void set_sector_identifier_uri(const char* value);
  void set_sector_identifier_uri(const char* value, size_t size);
  std::string* mutable_sector_identifier_uri();
  std::string* release_sector_identifier_uri();
  void set_allocated_sector_identifier_uri(std::string* sector_identifier_uri);
  private:
  const std::string& _internal_sector_identifier_uri() const;
  void _internal_set_sector_identifier_uri(const std::string& value);
  std::string* _internal_mutable_sector_identifier_uri();
  public:

  // string tos_uri = 30[json_name = "tosUri"];
  void clear_tos_uri();
  const std::string& tos_uri() const;
  void set_tos_uri(const std::string& value);
  void set_tos_uri(std::string&& value);
  void set_tos_uri(const char* value);
  void set_tos_uri(const char* value, size_t size);
  std::string* mutable_tos_uri();
  std::string* release_tos_uri();
  void set_allocated_tos_uri(std::string* tos_uri);
  private:
  const std::string& _internal_tos_uri() const;
  void _internal_set_tos_uri(const std::string& value);
  std::string* _internal_mutable_tos_uri();
  public:

  // .google.protobuf.Timestamp created_at = 10[json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Struct jwks = 14[json_name = "jwks"];
  bool has_jwks() const;
  private:
  bool _internal_has_jwks() const;
  public:
  void clear_jwks();
  const PROTOBUF_NAMESPACE_ID::Struct& jwks() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_jwks();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_jwks();
  void set_allocated_jwks(PROTOBUF_NAMESPACE_ID::Struct* jwks);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_jwks() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_jwks();
  public:
  void unsafe_arena_set_allocated_jwks(
      PROTOBUF_NAMESPACE_ID::Struct* jwks);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_jwks();

  // .google.protobuf.Struct metadata = 17[json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      PROTOBUF_NAMESPACE_ID::Struct* metadata);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_metadata();

  // .google.protobuf.Timestamp updated_at = 31[json_name = "updatedAt"];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int64 client_secret_expires_at = 7[json_name = "clientSecretExpiresAt"];
  void clear_client_secret_expires_at();
  ::PROTOBUF_NAMESPACE_ID::int64 client_secret_expires_at() const;
  void set_client_secret_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_client_secret_expires_at() const;
  void _internal_set_client_secret_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool backchannel_logout_session_required = 3[json_name = "backchannelLogoutSessionRequired"];
  void clear_backchannel_logout_session_required();
  bool backchannel_logout_session_required() const;
  void set_backchannel_logout_session_required(bool value);
  private:
  bool _internal_backchannel_logout_session_required() const;
  void _internal_set_backchannel_logout_session_required(bool value);
  public:

  // bool frontchannel_logout_session_required = 11[json_name = "frontchannelLogoutSessionRequired"];
  void clear_frontchannel_logout_session_required();
  bool frontchannel_logout_session_required() const;
  void set_frontchannel_logout_session_required(bool value);
  private:
  bool _internal_frontchannel_logout_session_required() const;
  void _internal_set_frontchannel_logout_session_required(bool value);
  public:

  // .depot.devtools.auth.v0.identity.admin.RequestObjectSigningAlg request_object_signing_alg = 22[json_name = "requestObjectSigningAlg"];
  void clear_request_object_signing_alg();
  ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg request_object_signing_alg() const;
  void set_request_object_signing_alg(::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg value);
  private:
  ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg _internal_request_object_signing_alg() const;
  void _internal_set_request_object_signing_alg(::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg value);
  public:

  // .depot.devtools.auth.v0.identity.admin.SubjectType subject_type = 27[json_name = "subjectType"];
  void clear_subject_type();
  ::depot::devtools::auth::v0::identity::admin::SubjectType subject_type() const;
  void set_subject_type(::depot::devtools::auth::v0::identity::admin::SubjectType value);
  private:
  ::depot::devtools::auth::v0::identity::admin::SubjectType _internal_subject_type() const;
  void _internal_set_subject_type(::depot::devtools::auth::v0::identity::admin::SubjectType value);
  public:

  // .depot.devtools.auth.v0.identity.admin.TokenEndpointAuthMethod token_endpoint_auth_method = 28[json_name = "tokenEndpointAuthMethod"];
  void clear_token_endpoint_auth_method();
  ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod token_endpoint_auth_method() const;
  void set_token_endpoint_auth_method(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod value);
  private:
  ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod _internal_token_endpoint_auth_method() const;
  void _internal_set_token_endpoint_auth_method(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod value);
  public:

  // .depot.devtools.auth.v0.identity.admin.TokenEndpointAuthSigningAlg token_endpoint_auth_signing_alg = 29[json_name = "tokenEndpointAuthSigningAlg"];
  void clear_token_endpoint_auth_signing_alg();
  ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg token_endpoint_auth_signing_alg() const;
  void set_token_endpoint_auth_signing_alg(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg value);
  private:
  ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg _internal_token_endpoint_auth_signing_alg() const;
  void _internal_set_token_endpoint_auth_signing_alg(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg value);
  public:

  // .depot.devtools.auth.v0.identity.admin.UserinfoSignedResponseAlg userinfo_signed_response_alg = 32[json_name = "userinfoSignedResponseAlg"];
  void clear_userinfo_signed_response_alg();
  ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg userinfo_signed_response_alg() const;
  void set_userinfo_signed_response_alg(::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg value);
  private:
  ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg _internal_userinfo_signed_response_alg() const;
  void _internal_set_userinfo_signed_response_alg(::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg value);
  public:

  // .depot.devtools.auth.v0.identity.admin.ClientType client_type = 33[json_name = "clientType"];
  void clear_client_type();
  ::depot::devtools::auth::v0::identity::admin::ClientType client_type() const;
  void set_client_type(::depot::devtools::auth::v0::identity::admin::ClientType value);
  private:
  ::depot::devtools::auth::v0::identity::admin::ClientType _internal_client_type() const;
  void _internal_set_client_type(::depot::devtools::auth::v0::identity::admin::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_cors_origins_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> audience_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> contacts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> grant_types_;
  mutable std::atomic<int> _grant_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> post_logout_redirect_uris_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> redirect_uris_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> request_uris_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> response_types_;
  mutable std::atomic<int> _response_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backchannel_logout_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frontchannel_logout_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwks_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sector_identifier_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tos_uri_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Struct* jwks_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_secret_expires_at_;
  bool backchannel_logout_session_required_;
  bool frontchannel_logout_session_required_;
  int request_object_signing_alg_;
  int subject_type_;
  int token_endpoint_auth_method_;
  int token_endpoint_auth_signing_alg_;
  int userinfo_signed_response_alg_;
  int client_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetOAuth2ClientsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse) */ {
 public:
  inline GetOAuth2ClientsResponse() : GetOAuth2ClientsResponse(nullptr) {}
  virtual ~GetOAuth2ClientsResponse();

  GetOAuth2ClientsResponse(const GetOAuth2ClientsResponse& from);
  GetOAuth2ClientsResponse(GetOAuth2ClientsResponse&& from) noexcept
    : GetOAuth2ClientsResponse() {
    *this = ::std::move(from);
  }

  inline GetOAuth2ClientsResponse& operator=(const GetOAuth2ClientsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOAuth2ClientsResponse& operator=(GetOAuth2ClientsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOAuth2ClientsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOAuth2ClientsResponse* internal_default_instance() {
    return reinterpret_cast<const GetOAuth2ClientsResponse*>(
               &_GetOAuth2ClientsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetOAuth2ClientsResponse& a, GetOAuth2ClientsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOAuth2ClientsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOAuth2ClientsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOAuth2ClientsResponse* New() const final {
    return CreateMaybeMessage<GetOAuth2ClientsResponse>(nullptr);
  }

  GetOAuth2ClientsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOAuth2ClientsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOAuth2ClientsResponse& from);
  void MergeFrom(const GetOAuth2ClientsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOAuth2ClientsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse";
  }
  protected:
  explicit GetOAuth2ClientsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetOAuth2ClientsResponse_Client Client;

  // accessors -------------------------------------------------------

  enum : int {
    kClientsFieldNumber = 1,
  };
  // repeated .depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client clients = 1[json_name = "clients"];
  int clients_size() const;
  private:
  int _internal_clients_size() const;
  public:
  void clear_clients();
  ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client* mutable_clients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client >*
      mutable_clients();
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client& _internal_clients(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client* _internal_add_clients();
  public:
  const ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client& clients(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client* add_clients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client >&
      clients() const;

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client > clients_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateOAuth2ClientRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest) */ {
 public:
  inline CreateOAuth2ClientRequest() : CreateOAuth2ClientRequest(nullptr) {}
  virtual ~CreateOAuth2ClientRequest();

  CreateOAuth2ClientRequest(const CreateOAuth2ClientRequest& from);
  CreateOAuth2ClientRequest(CreateOAuth2ClientRequest&& from) noexcept
    : CreateOAuth2ClientRequest() {
    *this = ::std::move(from);
  }

  inline CreateOAuth2ClientRequest& operator=(const CreateOAuth2ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOAuth2ClientRequest& operator=(CreateOAuth2ClientRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateOAuth2ClientRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOAuth2ClientRequest* internal_default_instance() {
    return reinterpret_cast<const CreateOAuth2ClientRequest*>(
               &_CreateOAuth2ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CreateOAuth2ClientRequest& a, CreateOAuth2ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOAuth2ClientRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOAuth2ClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOAuth2ClientRequest* New() const final {
    return CreateMaybeMessage<CreateOAuth2ClientRequest>(nullptr);
  }

  CreateOAuth2ClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOAuth2ClientRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateOAuth2ClientRequest& from);
  void MergeFrom(const CreateOAuth2ClientRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOAuth2ClientRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest";
  }
  protected:
  explicit CreateOAuth2ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedCorsOriginsFieldNumber = 1,
    kAudienceFieldNumber = 2,
    kContactsFieldNumber = 9,
    kGrantTypesFieldNumber = 13,
    kPostLogoutRedirectUrisFieldNumber = 20,
    kRedirectUrisFieldNumber = 21,
    kRequestUrisFieldNumber = 23,
    kResponseTypesFieldNumber = 24,
    kBackchannelLogoutUriFieldNumber = 4,
    kClientNameFieldNumber = 6,
    kClientUriFieldNumber = 8,
    kFrontchannelLogoutUriFieldNumber = 12,
    kJwksUriFieldNumber = 15,
    kLogoUriFieldNumber = 16,
    kOwnerFieldNumber = 18,
    kPolicyUriFieldNumber = 19,
    kScopeFieldNumber = 25,
    kSectorIdentifierUriFieldNumber = 26,
    kTosUriFieldNumber = 30,
    kClientSecretFieldNumber = 32,
    kJwksFieldNumber = 14,
    kMetadataFieldNumber = 17,
    kBackchannelLogoutSessionRequiredFieldNumber = 3,
    kFrontchannelLogoutSessionRequiredFieldNumber = 11,
    kRequestObjectSigningAlgFieldNumber = 22,
    kSubjectTypeFieldNumber = 27,
    kTokenEndpointAuthMethodFieldNumber = 28,
    kTokenEndpointAuthSigningAlgFieldNumber = 29,
    kUserinfoSignedResponseAlgFieldNumber = 31,
    kClientTypeFieldNumber = 33,
  };
  // repeated string allowed_cors_origins = 1[json_name = "allowedCorsOrigins"];
  int allowed_cors_origins_size() const;
  private:
  int _internal_allowed_cors_origins_size() const;
  public:
  void clear_allowed_cors_origins();
  const std::string& allowed_cors_origins(int index) const;
  std::string* mutable_allowed_cors_origins(int index);
  void set_allowed_cors_origins(int index, const std::string& value);
  void set_allowed_cors_origins(int index, std::string&& value);
  void set_allowed_cors_origins(int index, const char* value);
  void set_allowed_cors_origins(int index, const char* value, size_t size);
  std::string* add_allowed_cors_origins();
  void add_allowed_cors_origins(const std::string& value);
  void add_allowed_cors_origins(std::string&& value);
  void add_allowed_cors_origins(const char* value);
  void add_allowed_cors_origins(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_cors_origins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_cors_origins();
  private:
  const std::string& _internal_allowed_cors_origins(int index) const;
  std::string* _internal_add_allowed_cors_origins();
  public:

  // repeated string audience = 2[json_name = "audience"];
  int audience_size() const;
  private:
  int _internal_audience_size() const;
  public:
  void clear_audience();
  const std::string& audience(int index) const;
  std::string* mutable_audience(int index);
  void set_audience(int index, const std::string& value);
  void set_audience(int index, std::string&& value);
  void set_audience(int index, const char* value);
  void set_audience(int index, const char* value, size_t size);
  std::string* add_audience();
  void add_audience(const std::string& value);
  void add_audience(std::string&& value);
  void add_audience(const char* value);
  void add_audience(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& audience() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_audience();
  private:
  const std::string& _internal_audience(int index) const;
  std::string* _internal_add_audience();
  public:

  // repeated string contacts = 9[json_name = "contacts"];
  int contacts_size() const;
  private:
  int _internal_contacts_size() const;
  public:
  void clear_contacts();
  const std::string& contacts(int index) const;
  std::string* mutable_contacts(int index);
  void set_contacts(int index, const std::string& value);
  void set_contacts(int index, std::string&& value);
  void set_contacts(int index, const char* value);
  void set_contacts(int index, const char* value, size_t size);
  std::string* add_contacts();
  void add_contacts(const std::string& value);
  void add_contacts(std::string&& value);
  void add_contacts(const char* value);
  void add_contacts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& contacts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_contacts();
  private:
  const std::string& _internal_contacts(int index) const;
  std::string* _internal_add_contacts();
  public:

  // repeated .depot.devtools.auth.v0.identity.admin.GrantType grant_types = 13[json_name = "grantTypes"];
  int grant_types_size() const;
  private:
  int _internal_grant_types_size() const;
  public:
  void clear_grant_types();
  private:
  ::depot::devtools::auth::v0::identity::admin::GrantType _internal_grant_types(int index) const;
  void _internal_add_grant_types(::depot::devtools::auth::v0::identity::admin::GrantType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_grant_types();
  public:
  ::depot::devtools::auth::v0::identity::admin::GrantType grant_types(int index) const;
  void set_grant_types(int index, ::depot::devtools::auth::v0::identity::admin::GrantType value);
  void add_grant_types(::depot::devtools::auth::v0::identity::admin::GrantType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& grant_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_grant_types();

  // repeated string post_logout_redirect_uris = 20[json_name = "postLogoutRedirectUris"];
  int post_logout_redirect_uris_size() const;
  private:
  int _internal_post_logout_redirect_uris_size() const;
  public:
  void clear_post_logout_redirect_uris();
  const std::string& post_logout_redirect_uris(int index) const;
  std::string* mutable_post_logout_redirect_uris(int index);
  void set_post_logout_redirect_uris(int index, const std::string& value);
  void set_post_logout_redirect_uris(int index, std::string&& value);
  void set_post_logout_redirect_uris(int index, const char* value);
  void set_post_logout_redirect_uris(int index, const char* value, size_t size);
  std::string* add_post_logout_redirect_uris();
  void add_post_logout_redirect_uris(const std::string& value);
  void add_post_logout_redirect_uris(std::string&& value);
  void add_post_logout_redirect_uris(const char* value);
  void add_post_logout_redirect_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& post_logout_redirect_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_post_logout_redirect_uris();
  private:
  const std::string& _internal_post_logout_redirect_uris(int index) const;
  std::string* _internal_add_post_logout_redirect_uris();
  public:

  // repeated string redirect_uris = 21[json_name = "redirectUris"];
  int redirect_uris_size() const;
  private:
  int _internal_redirect_uris_size() const;
  public:
  void clear_redirect_uris();
  const std::string& redirect_uris(int index) const;
  std::string* mutable_redirect_uris(int index);
  void set_redirect_uris(int index, const std::string& value);
  void set_redirect_uris(int index, std::string&& value);
  void set_redirect_uris(int index, const char* value);
  void set_redirect_uris(int index, const char* value, size_t size);
  std::string* add_redirect_uris();
  void add_redirect_uris(const std::string& value);
  void add_redirect_uris(std::string&& value);
  void add_redirect_uris(const char* value);
  void add_redirect_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& redirect_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_redirect_uris();
  private:
  const std::string& _internal_redirect_uris(int index) const;
  std::string* _internal_add_redirect_uris();
  public:

  // repeated string request_uris = 23[json_name = "requestUris"];
  int request_uris_size() const;
  private:
  int _internal_request_uris_size() const;
  public:
  void clear_request_uris();
  const std::string& request_uris(int index) const;
  std::string* mutable_request_uris(int index);
  void set_request_uris(int index, const std::string& value);
  void set_request_uris(int index, std::string&& value);
  void set_request_uris(int index, const char* value);
  void set_request_uris(int index, const char* value, size_t size);
  std::string* add_request_uris();
  void add_request_uris(const std::string& value);
  void add_request_uris(std::string&& value);
  void add_request_uris(const char* value);
  void add_request_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& request_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_request_uris();
  private:
  const std::string& _internal_request_uris(int index) const;
  std::string* _internal_add_request_uris();
  public:

  // repeated .depot.devtools.auth.v0.identity.admin.ResponseType response_types = 24[json_name = "responseTypes"];
  int response_types_size() const;
  private:
  int _internal_response_types_size() const;
  public:
  void clear_response_types();
  private:
  ::depot::devtools::auth::v0::identity::admin::ResponseType _internal_response_types(int index) const;
  void _internal_add_response_types(::depot::devtools::auth::v0::identity::admin::ResponseType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_response_types();
  public:
  ::depot::devtools::auth::v0::identity::admin::ResponseType response_types(int index) const;
  void set_response_types(int index, ::depot::devtools::auth::v0::identity::admin::ResponseType value);
  void add_response_types(::depot::devtools::auth::v0::identity::admin::ResponseType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& response_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_response_types();

  // string backchannel_logout_uri = 4[json_name = "backchannelLogoutUri"];
  void clear_backchannel_logout_uri();
  const std::string& backchannel_logout_uri() const;
  void set_backchannel_logout_uri(const std::string& value);
  void set_backchannel_logout_uri(std::string&& value);
  void set_backchannel_logout_uri(const char* value);
  void set_backchannel_logout_uri(const char* value, size_t size);
  std::string* mutable_backchannel_logout_uri();
  std::string* release_backchannel_logout_uri();
  void set_allocated_backchannel_logout_uri(std::string* backchannel_logout_uri);
  private:
  const std::string& _internal_backchannel_logout_uri() const;
  void _internal_set_backchannel_logout_uri(const std::string& value);
  std::string* _internal_mutable_backchannel_logout_uri();
  public:

  // string client_name = 6[json_name = "clientName"];
  void clear_client_name();
  const std::string& client_name() const;
  void set_client_name(const std::string& value);
  void set_client_name(std::string&& value);
  void set_client_name(const char* value);
  void set_client_name(const char* value, size_t size);
  std::string* mutable_client_name();
  std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);
  private:
  const std::string& _internal_client_name() const;
  void _internal_set_client_name(const std::string& value);
  std::string* _internal_mutable_client_name();
  public:

  // string client_uri = 8[json_name = "clientUri"];
  void clear_client_uri();
  const std::string& client_uri() const;
  void set_client_uri(const std::string& value);
  void set_client_uri(std::string&& value);
  void set_client_uri(const char* value);
  void set_client_uri(const char* value, size_t size);
  std::string* mutable_client_uri();
  std::string* release_client_uri();
  void set_allocated_client_uri(std::string* client_uri);
  private:
  const std::string& _internal_client_uri() const;
  void _internal_set_client_uri(const std::string& value);
  std::string* _internal_mutable_client_uri();
  public:

  // string frontchannel_logout_uri = 12[json_name = "frontchannelLogoutUri"];
  void clear_frontchannel_logout_uri();
  const std::string& frontchannel_logout_uri() const;
  void set_frontchannel_logout_uri(const std::string& value);
  void set_frontchannel_logout_uri(std::string&& value);
  void set_frontchannel_logout_uri(const char* value);
  void set_frontchannel_logout_uri(const char* value, size_t size);
  std::string* mutable_frontchannel_logout_uri();
  std::string* release_frontchannel_logout_uri();
  void set_allocated_frontchannel_logout_uri(std::string* frontchannel_logout_uri);
  private:
  const std::string& _internal_frontchannel_logout_uri() const;
  void _internal_set_frontchannel_logout_uri(const std::string& value);
  std::string* _internal_mutable_frontchannel_logout_uri();
  public:

  // string jwks_uri = 15[json_name = "jwksUri"];
  void clear_jwks_uri();
  const std::string& jwks_uri() const;
  void set_jwks_uri(const std::string& value);
  void set_jwks_uri(std::string&& value);
  void set_jwks_uri(const char* value);
  void set_jwks_uri(const char* value, size_t size);
  std::string* mutable_jwks_uri();
  std::string* release_jwks_uri();
  void set_allocated_jwks_uri(std::string* jwks_uri);
  private:
  const std::string& _internal_jwks_uri() const;
  void _internal_set_jwks_uri(const std::string& value);
  std::string* _internal_mutable_jwks_uri();
  public:

  // string logo_uri = 16[json_name = "logoUri"];
  void clear_logo_uri();
  const std::string& logo_uri() const;
  void set_logo_uri(const std::string& value);
  void set_logo_uri(std::string&& value);
  void set_logo_uri(const char* value);
  void set_logo_uri(const char* value, size_t size);
  std::string* mutable_logo_uri();
  std::string* release_logo_uri();
  void set_allocated_logo_uri(std::string* logo_uri);
  private:
  const std::string& _internal_logo_uri() const;
  void _internal_set_logo_uri(const std::string& value);
  std::string* _internal_mutable_logo_uri();
  public:

  // string owner = 18[json_name = "owner"];
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string policy_uri = 19[json_name = "policyUri"];
  void clear_policy_uri();
  const std::string& policy_uri() const;
  void set_policy_uri(const std::string& value);
  void set_policy_uri(std::string&& value);
  void set_policy_uri(const char* value);
  void set_policy_uri(const char* value, size_t size);
  std::string* mutable_policy_uri();
  std::string* release_policy_uri();
  void set_allocated_policy_uri(std::string* policy_uri);
  private:
  const std::string& _internal_policy_uri() const;
  void _internal_set_policy_uri(const std::string& value);
  std::string* _internal_mutable_policy_uri();
  public:

  // string scope = 25[json_name = "scope"];
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // string sector_identifier_uri = 26[json_name = "sectorIdentifierUri"];
  void clear_sector_identifier_uri();
  const std::string& sector_identifier_uri() const;
  void set_sector_identifier_uri(const std::string& value);
  void set_sector_identifier_uri(std::string&& value);
  void set_sector_identifier_uri(const char* value);
  void set_sector_identifier_uri(const char* value, size_t size);
  std::string* mutable_sector_identifier_uri();
  std::string* release_sector_identifier_uri();
  void set_allocated_sector_identifier_uri(std::string* sector_identifier_uri);
  private:
  const std::string& _internal_sector_identifier_uri() const;
  void _internal_set_sector_identifier_uri(const std::string& value);
  std::string* _internal_mutable_sector_identifier_uri();
  public:

  // string tos_uri = 30[json_name = "tosUri"];
  void clear_tos_uri();
  const std::string& tos_uri() const;
  void set_tos_uri(const std::string& value);
  void set_tos_uri(std::string&& value);
  void set_tos_uri(const char* value);
  void set_tos_uri(const char* value, size_t size);
  std::string* mutable_tos_uri();
  std::string* release_tos_uri();
  void set_allocated_tos_uri(std::string* tos_uri);
  private:
  const std::string& _internal_tos_uri() const;
  void _internal_set_tos_uri(const std::string& value);
  std::string* _internal_mutable_tos_uri();
  public:

  // string client_secret = 32[json_name = "clientSecret"];
  void clear_client_secret();
  const std::string& client_secret() const;
  void set_client_secret(const std::string& value);
  void set_client_secret(std::string&& value);
  void set_client_secret(const char* value);
  void set_client_secret(const char* value, size_t size);
  std::string* mutable_client_secret();
  std::string* release_client_secret();
  void set_allocated_client_secret(std::string* client_secret);
  private:
  const std::string& _internal_client_secret() const;
  void _internal_set_client_secret(const std::string& value);
  std::string* _internal_mutable_client_secret();
  public:

  // .google.protobuf.Struct jwks = 14[json_name = "jwks"];
  bool has_jwks() const;
  private:
  bool _internal_has_jwks() const;
  public:
  void clear_jwks();
  const PROTOBUF_NAMESPACE_ID::Struct& jwks() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_jwks();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_jwks();
  void set_allocated_jwks(PROTOBUF_NAMESPACE_ID::Struct* jwks);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_jwks() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_jwks();
  public:
  void unsafe_arena_set_allocated_jwks(
      PROTOBUF_NAMESPACE_ID::Struct* jwks);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_jwks();

  // .google.protobuf.Struct metadata = 17[json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      PROTOBUF_NAMESPACE_ID::Struct* metadata);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_metadata();

  // bool backchannel_logout_session_required = 3[json_name = "backchannelLogoutSessionRequired"];
  void clear_backchannel_logout_session_required();
  bool backchannel_logout_session_required() const;
  void set_backchannel_logout_session_required(bool value);
  private:
  bool _internal_backchannel_logout_session_required() const;
  void _internal_set_backchannel_logout_session_required(bool value);
  public:

  // bool frontchannel_logout_session_required = 11[json_name = "frontchannelLogoutSessionRequired"];
  void clear_frontchannel_logout_session_required();
  bool frontchannel_logout_session_required() const;
  void set_frontchannel_logout_session_required(bool value);
  private:
  bool _internal_frontchannel_logout_session_required() const;
  void _internal_set_frontchannel_logout_session_required(bool value);
  public:

  // .depot.devtools.auth.v0.identity.admin.RequestObjectSigningAlg request_object_signing_alg = 22[json_name = "requestObjectSigningAlg"];
  void clear_request_object_signing_alg();
  ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg request_object_signing_alg() const;
  void set_request_object_signing_alg(::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg value);
  private:
  ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg _internal_request_object_signing_alg() const;
  void _internal_set_request_object_signing_alg(::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg value);
  public:

  // .depot.devtools.auth.v0.identity.admin.SubjectType subject_type = 27[json_name = "subjectType"];
  void clear_subject_type();
  ::depot::devtools::auth::v0::identity::admin::SubjectType subject_type() const;
  void set_subject_type(::depot::devtools::auth::v0::identity::admin::SubjectType value);
  private:
  ::depot::devtools::auth::v0::identity::admin::SubjectType _internal_subject_type() const;
  void _internal_set_subject_type(::depot::devtools::auth::v0::identity::admin::SubjectType value);
  public:

  // .depot.devtools.auth.v0.identity.admin.TokenEndpointAuthMethod token_endpoint_auth_method = 28[json_name = "tokenEndpointAuthMethod"];
  void clear_token_endpoint_auth_method();
  ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod token_endpoint_auth_method() const;
  void set_token_endpoint_auth_method(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod value);
  private:
  ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod _internal_token_endpoint_auth_method() const;
  void _internal_set_token_endpoint_auth_method(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod value);
  public:

  // .depot.devtools.auth.v0.identity.admin.TokenEndpointAuthSigningAlg token_endpoint_auth_signing_alg = 29[json_name = "tokenEndpointAuthSigningAlg"];
  void clear_token_endpoint_auth_signing_alg();
  ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg token_endpoint_auth_signing_alg() const;
  void set_token_endpoint_auth_signing_alg(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg value);
  private:
  ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg _internal_token_endpoint_auth_signing_alg() const;
  void _internal_set_token_endpoint_auth_signing_alg(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg value);
  public:

  // .depot.devtools.auth.v0.identity.admin.UserinfoSignedResponseAlg userinfo_signed_response_alg = 31[json_name = "userinfoSignedResponseAlg"];
  void clear_userinfo_signed_response_alg();
  ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg userinfo_signed_response_alg() const;
  void set_userinfo_signed_response_alg(::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg value);
  private:
  ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg _internal_userinfo_signed_response_alg() const;
  void _internal_set_userinfo_signed_response_alg(::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg value);
  public:

  // .depot.devtools.auth.v0.identity.admin.ClientType client_type = 33[json_name = "clientType"];
  void clear_client_type();
  ::depot::devtools::auth::v0::identity::admin::ClientType client_type() const;
  void set_client_type(::depot::devtools::auth::v0::identity::admin::ClientType value);
  private:
  ::depot::devtools::auth::v0::identity::admin::ClientType _internal_client_type() const;
  void _internal_set_client_type(::depot::devtools::auth::v0::identity::admin::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_cors_origins_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> audience_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> contacts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> grant_types_;
  mutable std::atomic<int> _grant_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> post_logout_redirect_uris_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> redirect_uris_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> request_uris_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> response_types_;
  mutable std::atomic<int> _response_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backchannel_logout_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frontchannel_logout_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwks_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sector_identifier_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tos_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_secret_;
  PROTOBUF_NAMESPACE_ID::Struct* jwks_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  bool backchannel_logout_session_required_;
  bool frontchannel_logout_session_required_;
  int request_object_signing_alg_;
  int subject_type_;
  int token_endpoint_auth_method_;
  int token_endpoint_auth_signing_alg_;
  int userinfo_signed_response_alg_;
  int client_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateOAuth2ClientResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse) */ {
 public:
  inline CreateOAuth2ClientResponse() : CreateOAuth2ClientResponse(nullptr) {}
  virtual ~CreateOAuth2ClientResponse();

  CreateOAuth2ClientResponse(const CreateOAuth2ClientResponse& from);
  CreateOAuth2ClientResponse(CreateOAuth2ClientResponse&& from) noexcept
    : CreateOAuth2ClientResponse() {
    *this = ::std::move(from);
  }

  inline CreateOAuth2ClientResponse& operator=(const CreateOAuth2ClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOAuth2ClientResponse& operator=(CreateOAuth2ClientResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateOAuth2ClientResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOAuth2ClientResponse* internal_default_instance() {
    return reinterpret_cast<const CreateOAuth2ClientResponse*>(
               &_CreateOAuth2ClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CreateOAuth2ClientResponse& a, CreateOAuth2ClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOAuth2ClientResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOAuth2ClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOAuth2ClientResponse* New() const final {
    return CreateMaybeMessage<CreateOAuth2ClientResponse>(nullptr);
  }

  CreateOAuth2ClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOAuth2ClientResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateOAuth2ClientResponse& from);
  void MergeFrom(const CreateOAuth2ClientResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOAuth2ClientResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse";
  }
  protected:
  explicit CreateOAuth2ClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kClientSecretFieldNumber = 2,
  };
  // string client_id = 1[json_name = "clientId"];
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string client_secret = 2[json_name = "clientSecret"];
  void clear_client_secret();
  const std::string& client_secret() const;
  void set_client_secret(const std::string& value);
  void set_client_secret(std::string&& value);
  void set_client_secret(const char* value);
  void set_client_secret(const char* value, size_t size);
  std::string* mutable_client_secret();
  std::string* release_client_secret();
  void set_allocated_client_secret(std::string* client_secret);
  private:
  const std::string& _internal_client_secret() const;
  void _internal_set_client_secret(const std::string& value);
  std::string* _internal_mutable_client_secret();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_secret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateOAuth2ClientRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest) */ {
 public:
  inline UpdateOAuth2ClientRequest() : UpdateOAuth2ClientRequest(nullptr) {}
  virtual ~UpdateOAuth2ClientRequest();

  UpdateOAuth2ClientRequest(const UpdateOAuth2ClientRequest& from);
  UpdateOAuth2ClientRequest(UpdateOAuth2ClientRequest&& from) noexcept
    : UpdateOAuth2ClientRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOAuth2ClientRequest& operator=(const UpdateOAuth2ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOAuth2ClientRequest& operator=(UpdateOAuth2ClientRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateOAuth2ClientRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOAuth2ClientRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOAuth2ClientRequest*>(
               &_UpdateOAuth2ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(UpdateOAuth2ClientRequest& a, UpdateOAuth2ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOAuth2ClientRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOAuth2ClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateOAuth2ClientRequest* New() const final {
    return CreateMaybeMessage<UpdateOAuth2ClientRequest>(nullptr);
  }

  UpdateOAuth2ClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOAuth2ClientRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateOAuth2ClientRequest& from);
  void MergeFrom(const UpdateOAuth2ClientRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOAuth2ClientRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest";
  }
  protected:
  explicit UpdateOAuth2ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedCorsOriginsFieldNumber = 1,
    kAudienceFieldNumber = 2,
    kContactsFieldNumber = 9,
    kGrantTypesFieldNumber = 13,
    kPostLogoutRedirectUrisFieldNumber = 20,
    kRedirectUrisFieldNumber = 21,
    kRequestUrisFieldNumber = 23,
    kResponseTypesFieldNumber = 24,
    kBackchannelLogoutUriFieldNumber = 4,
    kClientNameFieldNumber = 6,
    kClientUriFieldNumber = 8,
    kFrontchannelLogoutUriFieldNumber = 12,
    kJwksUriFieldNumber = 15,
    kLogoUriFieldNumber = 16,
    kOwnerFieldNumber = 18,
    kPolicyUriFieldNumber = 19,
    kScopeFieldNumber = 25,
    kSectorIdentifierUriFieldNumber = 26,
    kTosUriFieldNumber = 30,
    kClientSecretFieldNumber = 32,
    kClientIdFieldNumber = 33,
    kJwksFieldNumber = 14,
    kMetadataFieldNumber = 17,
    kBackchannelLogoutSessionRequiredFieldNumber = 3,
    kFrontchannelLogoutSessionRequiredFieldNumber = 11,
    kRequestObjectSigningAlgFieldNumber = 22,
    kSubjectTypeFieldNumber = 27,
    kTokenEndpointAuthMethodFieldNumber = 28,
    kTokenEndpointAuthSigningAlgFieldNumber = 29,
    kUserinfoSignedResponseAlgFieldNumber = 31,
  };
  // repeated string allowed_cors_origins = 1[json_name = "allowedCorsOrigins"];
  int allowed_cors_origins_size() const;
  private:
  int _internal_allowed_cors_origins_size() const;
  public:
  void clear_allowed_cors_origins();
  const std::string& allowed_cors_origins(int index) const;
  std::string* mutable_allowed_cors_origins(int index);
  void set_allowed_cors_origins(int index, const std::string& value);
  void set_allowed_cors_origins(int index, std::string&& value);
  void set_allowed_cors_origins(int index, const char* value);
  void set_allowed_cors_origins(int index, const char* value, size_t size);
  std::string* add_allowed_cors_origins();
  void add_allowed_cors_origins(const std::string& value);
  void add_allowed_cors_origins(std::string&& value);
  void add_allowed_cors_origins(const char* value);
  void add_allowed_cors_origins(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_cors_origins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_cors_origins();
  private:
  const std::string& _internal_allowed_cors_origins(int index) const;
  std::string* _internal_add_allowed_cors_origins();
  public:

  // repeated string audience = 2[json_name = "audience"];
  int audience_size() const;
  private:
  int _internal_audience_size() const;
  public:
  void clear_audience();
  const std::string& audience(int index) const;
  std::string* mutable_audience(int index);
  void set_audience(int index, const std::string& value);
  void set_audience(int index, std::string&& value);
  void set_audience(int index, const char* value);
  void set_audience(int index, const char* value, size_t size);
  std::string* add_audience();
  void add_audience(const std::string& value);
  void add_audience(std::string&& value);
  void add_audience(const char* value);
  void add_audience(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& audience() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_audience();
  private:
  const std::string& _internal_audience(int index) const;
  std::string* _internal_add_audience();
  public:

  // repeated string contacts = 9[json_name = "contacts"];
  int contacts_size() const;
  private:
  int _internal_contacts_size() const;
  public:
  void clear_contacts();
  const std::string& contacts(int index) const;
  std::string* mutable_contacts(int index);
  void set_contacts(int index, const std::string& value);
  void set_contacts(int index, std::string&& value);
  void set_contacts(int index, const char* value);
  void set_contacts(int index, const char* value, size_t size);
  std::string* add_contacts();
  void add_contacts(const std::string& value);
  void add_contacts(std::string&& value);
  void add_contacts(const char* value);
  void add_contacts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& contacts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_contacts();
  private:
  const std::string& _internal_contacts(int index) const;
  std::string* _internal_add_contacts();
  public:

  // repeated .depot.devtools.auth.v0.identity.admin.GrantType grant_types = 13[json_name = "grantTypes"];
  int grant_types_size() const;
  private:
  int _internal_grant_types_size() const;
  public:
  void clear_grant_types();
  private:
  ::depot::devtools::auth::v0::identity::admin::GrantType _internal_grant_types(int index) const;
  void _internal_add_grant_types(::depot::devtools::auth::v0::identity::admin::GrantType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_grant_types();
  public:
  ::depot::devtools::auth::v0::identity::admin::GrantType grant_types(int index) const;
  void set_grant_types(int index, ::depot::devtools::auth::v0::identity::admin::GrantType value);
  void add_grant_types(::depot::devtools::auth::v0::identity::admin::GrantType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& grant_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_grant_types();

  // repeated string post_logout_redirect_uris = 20[json_name = "postLogoutRedirectUris"];
  int post_logout_redirect_uris_size() const;
  private:
  int _internal_post_logout_redirect_uris_size() const;
  public:
  void clear_post_logout_redirect_uris();
  const std::string& post_logout_redirect_uris(int index) const;
  std::string* mutable_post_logout_redirect_uris(int index);
  void set_post_logout_redirect_uris(int index, const std::string& value);
  void set_post_logout_redirect_uris(int index, std::string&& value);
  void set_post_logout_redirect_uris(int index, const char* value);
  void set_post_logout_redirect_uris(int index, const char* value, size_t size);
  std::string* add_post_logout_redirect_uris();
  void add_post_logout_redirect_uris(const std::string& value);
  void add_post_logout_redirect_uris(std::string&& value);
  void add_post_logout_redirect_uris(const char* value);
  void add_post_logout_redirect_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& post_logout_redirect_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_post_logout_redirect_uris();
  private:
  const std::string& _internal_post_logout_redirect_uris(int index) const;
  std::string* _internal_add_post_logout_redirect_uris();
  public:

  // repeated string redirect_uris = 21[json_name = "redirectUris"];
  int redirect_uris_size() const;
  private:
  int _internal_redirect_uris_size() const;
  public:
  void clear_redirect_uris();
  const std::string& redirect_uris(int index) const;
  std::string* mutable_redirect_uris(int index);
  void set_redirect_uris(int index, const std::string& value);
  void set_redirect_uris(int index, std::string&& value);
  void set_redirect_uris(int index, const char* value);
  void set_redirect_uris(int index, const char* value, size_t size);
  std::string* add_redirect_uris();
  void add_redirect_uris(const std::string& value);
  void add_redirect_uris(std::string&& value);
  void add_redirect_uris(const char* value);
  void add_redirect_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& redirect_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_redirect_uris();
  private:
  const std::string& _internal_redirect_uris(int index) const;
  std::string* _internal_add_redirect_uris();
  public:

  // repeated string request_uris = 23[json_name = "requestUris"];
  int request_uris_size() const;
  private:
  int _internal_request_uris_size() const;
  public:
  void clear_request_uris();
  const std::string& request_uris(int index) const;
  std::string* mutable_request_uris(int index);
  void set_request_uris(int index, const std::string& value);
  void set_request_uris(int index, std::string&& value);
  void set_request_uris(int index, const char* value);
  void set_request_uris(int index, const char* value, size_t size);
  std::string* add_request_uris();
  void add_request_uris(const std::string& value);
  void add_request_uris(std::string&& value);
  void add_request_uris(const char* value);
  void add_request_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& request_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_request_uris();
  private:
  const std::string& _internal_request_uris(int index) const;
  std::string* _internal_add_request_uris();
  public:

  // repeated .depot.devtools.auth.v0.identity.admin.ResponseType response_types = 24[json_name = "responseTypes"];
  int response_types_size() const;
  private:
  int _internal_response_types_size() const;
  public:
  void clear_response_types();
  private:
  ::depot::devtools::auth::v0::identity::admin::ResponseType _internal_response_types(int index) const;
  void _internal_add_response_types(::depot::devtools::auth::v0::identity::admin::ResponseType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_response_types();
  public:
  ::depot::devtools::auth::v0::identity::admin::ResponseType response_types(int index) const;
  void set_response_types(int index, ::depot::devtools::auth::v0::identity::admin::ResponseType value);
  void add_response_types(::depot::devtools::auth::v0::identity::admin::ResponseType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& response_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_response_types();

  // string backchannel_logout_uri = 4[json_name = "backchannelLogoutUri"];
  void clear_backchannel_logout_uri();
  const std::string& backchannel_logout_uri() const;
  void set_backchannel_logout_uri(const std::string& value);
  void set_backchannel_logout_uri(std::string&& value);
  void set_backchannel_logout_uri(const char* value);
  void set_backchannel_logout_uri(const char* value, size_t size);
  std::string* mutable_backchannel_logout_uri();
  std::string* release_backchannel_logout_uri();
  void set_allocated_backchannel_logout_uri(std::string* backchannel_logout_uri);
  private:
  const std::string& _internal_backchannel_logout_uri() const;
  void _internal_set_backchannel_logout_uri(const std::string& value);
  std::string* _internal_mutable_backchannel_logout_uri();
  public:

  // string client_name = 6[json_name = "clientName"];
  void clear_client_name();
  const std::string& client_name() const;
  void set_client_name(const std::string& value);
  void set_client_name(std::string&& value);
  void set_client_name(const char* value);
  void set_client_name(const char* value, size_t size);
  std::string* mutable_client_name();
  std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);
  private:
  const std::string& _internal_client_name() const;
  void _internal_set_client_name(const std::string& value);
  std::string* _internal_mutable_client_name();
  public:

  // string client_uri = 8[json_name = "clientUri"];
  void clear_client_uri();
  const std::string& client_uri() const;
  void set_client_uri(const std::string& value);
  void set_client_uri(std::string&& value);
  void set_client_uri(const char* value);
  void set_client_uri(const char* value, size_t size);
  std::string* mutable_client_uri();
  std::string* release_client_uri();
  void set_allocated_client_uri(std::string* client_uri);
  private:
  const std::string& _internal_client_uri() const;
  void _internal_set_client_uri(const std::string& value);
  std::string* _internal_mutable_client_uri();
  public:

  // string frontchannel_logout_uri = 12[json_name = "frontchannelLogoutUri"];
  void clear_frontchannel_logout_uri();
  const std::string& frontchannel_logout_uri() const;
  void set_frontchannel_logout_uri(const std::string& value);
  void set_frontchannel_logout_uri(std::string&& value);
  void set_frontchannel_logout_uri(const char* value);
  void set_frontchannel_logout_uri(const char* value, size_t size);
  std::string* mutable_frontchannel_logout_uri();
  std::string* release_frontchannel_logout_uri();
  void set_allocated_frontchannel_logout_uri(std::string* frontchannel_logout_uri);
  private:
  const std::string& _internal_frontchannel_logout_uri() const;
  void _internal_set_frontchannel_logout_uri(const std::string& value);
  std::string* _internal_mutable_frontchannel_logout_uri();
  public:

  // string jwks_uri = 15[json_name = "jwksUri"];
  void clear_jwks_uri();
  const std::string& jwks_uri() const;
  void set_jwks_uri(const std::string& value);
  void set_jwks_uri(std::string&& value);
  void set_jwks_uri(const char* value);
  void set_jwks_uri(const char* value, size_t size);
  std::string* mutable_jwks_uri();
  std::string* release_jwks_uri();
  void set_allocated_jwks_uri(std::string* jwks_uri);
  private:
  const std::string& _internal_jwks_uri() const;
  void _internal_set_jwks_uri(const std::string& value);
  std::string* _internal_mutable_jwks_uri();
  public:

  // string logo_uri = 16[json_name = "logoUri"];
  void clear_logo_uri();
  const std::string& logo_uri() const;
  void set_logo_uri(const std::string& value);
  void set_logo_uri(std::string&& value);
  void set_logo_uri(const char* value);
  void set_logo_uri(const char* value, size_t size);
  std::string* mutable_logo_uri();
  std::string* release_logo_uri();
  void set_allocated_logo_uri(std::string* logo_uri);
  private:
  const std::string& _internal_logo_uri() const;
  void _internal_set_logo_uri(const std::string& value);
  std::string* _internal_mutable_logo_uri();
  public:

  // string owner = 18[json_name = "owner"];
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string policy_uri = 19[json_name = "policyUri"];
  void clear_policy_uri();
  const std::string& policy_uri() const;
  void set_policy_uri(const std::string& value);
  void set_policy_uri(std::string&& value);
  void set_policy_uri(const char* value);
  void set_policy_uri(const char* value, size_t size);
  std::string* mutable_policy_uri();
  std::string* release_policy_uri();
  void set_allocated_policy_uri(std::string* policy_uri);
  private:
  const std::string& _internal_policy_uri() const;
  void _internal_set_policy_uri(const std::string& value);
  std::string* _internal_mutable_policy_uri();
  public:

  // string scope = 25[json_name = "scope"];
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // string sector_identifier_uri = 26[json_name = "sectorIdentifierUri"];
  void clear_sector_identifier_uri();
  const std::string& sector_identifier_uri() const;
  void set_sector_identifier_uri(const std::string& value);
  void set_sector_identifier_uri(std::string&& value);
  void set_sector_identifier_uri(const char* value);
  void set_sector_identifier_uri(const char* value, size_t size);
  std::string* mutable_sector_identifier_uri();
  std::string* release_sector_identifier_uri();
  void set_allocated_sector_identifier_uri(std::string* sector_identifier_uri);
  private:
  const std::string& _internal_sector_identifier_uri() const;
  void _internal_set_sector_identifier_uri(const std::string& value);
  std::string* _internal_mutable_sector_identifier_uri();
  public:

  // string tos_uri = 30[json_name = "tosUri"];
  void clear_tos_uri();
  const std::string& tos_uri() const;
  void set_tos_uri(const std::string& value);
  void set_tos_uri(std::string&& value);
  void set_tos_uri(const char* value);
  void set_tos_uri(const char* value, size_t size);
  std::string* mutable_tos_uri();
  std::string* release_tos_uri();
  void set_allocated_tos_uri(std::string* tos_uri);
  private:
  const std::string& _internal_tos_uri() const;
  void _internal_set_tos_uri(const std::string& value);
  std::string* _internal_mutable_tos_uri();
  public:

  // string client_secret = 32[json_name = "clientSecret"];
  void clear_client_secret();
  const std::string& client_secret() const;
  void set_client_secret(const std::string& value);
  void set_client_secret(std::string&& value);
  void set_client_secret(const char* value);
  void set_client_secret(const char* value, size_t size);
  std::string* mutable_client_secret();
  std::string* release_client_secret();
  void set_allocated_client_secret(std::string* client_secret);
  private:
  const std::string& _internal_client_secret() const;
  void _internal_set_client_secret(const std::string& value);
  std::string* _internal_mutable_client_secret();
  public:

  // string client_id = 33[json_name = "clientId"];
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // .google.protobuf.Struct jwks = 14[json_name = "jwks"];
  bool has_jwks() const;
  private:
  bool _internal_has_jwks() const;
  public:
  void clear_jwks();
  const PROTOBUF_NAMESPACE_ID::Struct& jwks() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_jwks();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_jwks();
  void set_allocated_jwks(PROTOBUF_NAMESPACE_ID::Struct* jwks);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_jwks() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_jwks();
  public:
  void unsafe_arena_set_allocated_jwks(
      PROTOBUF_NAMESPACE_ID::Struct* jwks);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_jwks();

  // .google.protobuf.Struct metadata = 17[json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      PROTOBUF_NAMESPACE_ID::Struct* metadata);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_metadata();

  // bool backchannel_logout_session_required = 3[json_name = "backchannelLogoutSessionRequired"];
  void clear_backchannel_logout_session_required();
  bool backchannel_logout_session_required() const;
  void set_backchannel_logout_session_required(bool value);
  private:
  bool _internal_backchannel_logout_session_required() const;
  void _internal_set_backchannel_logout_session_required(bool value);
  public:

  // bool frontchannel_logout_session_required = 11[json_name = "frontchannelLogoutSessionRequired"];
  void clear_frontchannel_logout_session_required();
  bool frontchannel_logout_session_required() const;
  void set_frontchannel_logout_session_required(bool value);
  private:
  bool _internal_frontchannel_logout_session_required() const;
  void _internal_set_frontchannel_logout_session_required(bool value);
  public:

  // .depot.devtools.auth.v0.identity.admin.RequestObjectSigningAlg request_object_signing_alg = 22[json_name = "requestObjectSigningAlg"];
  void clear_request_object_signing_alg();
  ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg request_object_signing_alg() const;
  void set_request_object_signing_alg(::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg value);
  private:
  ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg _internal_request_object_signing_alg() const;
  void _internal_set_request_object_signing_alg(::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg value);
  public:

  // .depot.devtools.auth.v0.identity.admin.SubjectType subject_type = 27[json_name = "subjectType"];
  void clear_subject_type();
  ::depot::devtools::auth::v0::identity::admin::SubjectType subject_type() const;
  void set_subject_type(::depot::devtools::auth::v0::identity::admin::SubjectType value);
  private:
  ::depot::devtools::auth::v0::identity::admin::SubjectType _internal_subject_type() const;
  void _internal_set_subject_type(::depot::devtools::auth::v0::identity::admin::SubjectType value);
  public:

  // .depot.devtools.auth.v0.identity.admin.TokenEndpointAuthMethod token_endpoint_auth_method = 28[json_name = "tokenEndpointAuthMethod"];
  void clear_token_endpoint_auth_method();
  ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod token_endpoint_auth_method() const;
  void set_token_endpoint_auth_method(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod value);
  private:
  ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod _internal_token_endpoint_auth_method() const;
  void _internal_set_token_endpoint_auth_method(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod value);
  public:

  // .depot.devtools.auth.v0.identity.admin.TokenEndpointAuthSigningAlg token_endpoint_auth_signing_alg = 29[json_name = "tokenEndpointAuthSigningAlg"];
  void clear_token_endpoint_auth_signing_alg();
  ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg token_endpoint_auth_signing_alg() const;
  void set_token_endpoint_auth_signing_alg(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg value);
  private:
  ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg _internal_token_endpoint_auth_signing_alg() const;
  void _internal_set_token_endpoint_auth_signing_alg(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg value);
  public:

  // .depot.devtools.auth.v0.identity.admin.UserinfoSignedResponseAlg userinfo_signed_response_alg = 31[json_name = "userinfoSignedResponseAlg"];
  void clear_userinfo_signed_response_alg();
  ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg userinfo_signed_response_alg() const;
  void set_userinfo_signed_response_alg(::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg value);
  private:
  ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg _internal_userinfo_signed_response_alg() const;
  void _internal_set_userinfo_signed_response_alg(::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_cors_origins_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> audience_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> contacts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> grant_types_;
  mutable std::atomic<int> _grant_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> post_logout_redirect_uris_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> redirect_uris_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> request_uris_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> response_types_;
  mutable std::atomic<int> _response_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backchannel_logout_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frontchannel_logout_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwks_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sector_identifier_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tos_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  PROTOBUF_NAMESPACE_ID::Struct* jwks_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  bool backchannel_logout_session_required_;
  bool frontchannel_logout_session_required_;
  int request_object_signing_alg_;
  int subject_type_;
  int token_endpoint_auth_method_;
  int token_endpoint_auth_signing_alg_;
  int userinfo_signed_response_alg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateOAuth2ClientResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse) */ {
 public:
  inline UpdateOAuth2ClientResponse() : UpdateOAuth2ClientResponse(nullptr) {}
  virtual ~UpdateOAuth2ClientResponse();

  UpdateOAuth2ClientResponse(const UpdateOAuth2ClientResponse& from);
  UpdateOAuth2ClientResponse(UpdateOAuth2ClientResponse&& from) noexcept
    : UpdateOAuth2ClientResponse() {
    *this = ::std::move(from);
  }

  inline UpdateOAuth2ClientResponse& operator=(const UpdateOAuth2ClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOAuth2ClientResponse& operator=(UpdateOAuth2ClientResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateOAuth2ClientResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOAuth2ClientResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateOAuth2ClientResponse*>(
               &_UpdateOAuth2ClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(UpdateOAuth2ClientResponse& a, UpdateOAuth2ClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOAuth2ClientResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOAuth2ClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateOAuth2ClientResponse* New() const final {
    return CreateMaybeMessage<UpdateOAuth2ClientResponse>(nullptr);
  }

  UpdateOAuth2ClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOAuth2ClientResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateOAuth2ClientResponse& from);
  void MergeFrom(const UpdateOAuth2ClientResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOAuth2ClientResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse";
  }
  protected:
  explicit UpdateOAuth2ClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kClientSecretFieldNumber = 2,
  };
  // string client_id = 1[json_name = "clientId"];
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string client_secret = 2[json_name = "clientSecret"];
  void clear_client_secret();
  const std::string& client_secret() const;
  void set_client_secret(const std::string& value);
  void set_client_secret(std::string&& value);
  void set_client_secret(const char* value);
  void set_client_secret(const char* value, size_t size);
  std::string* mutable_client_secret();
  std::string* release_client_secret();
  void set_allocated_client_secret(std::string* client_secret);
  private:
  const std::string& _internal_client_secret() const;
  void _internal_set_client_secret(const std::string& value);
  std::string* _internal_mutable_client_secret();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_secret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteOAuth2ClientRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientRequest) */ {
 public:
  inline DeleteOAuth2ClientRequest() : DeleteOAuth2ClientRequest(nullptr) {}
  virtual ~DeleteOAuth2ClientRequest();

  DeleteOAuth2ClientRequest(const DeleteOAuth2ClientRequest& from);
  DeleteOAuth2ClientRequest(DeleteOAuth2ClientRequest&& from) noexcept
    : DeleteOAuth2ClientRequest() {
    *this = ::std::move(from);
  }

  inline DeleteOAuth2ClientRequest& operator=(const DeleteOAuth2ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteOAuth2ClientRequest& operator=(DeleteOAuth2ClientRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteOAuth2ClientRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteOAuth2ClientRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteOAuth2ClientRequest*>(
               &_DeleteOAuth2ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(DeleteOAuth2ClientRequest& a, DeleteOAuth2ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteOAuth2ClientRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteOAuth2ClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteOAuth2ClientRequest* New() const final {
    return CreateMaybeMessage<DeleteOAuth2ClientRequest>(nullptr);
  }

  DeleteOAuth2ClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOAuth2ClientRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteOAuth2ClientRequest& from);
  void MergeFrom(const DeleteOAuth2ClientRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOAuth2ClientRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientRequest";
  }
  protected:
  explicit DeleteOAuth2ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1[json_name = "clientId"];
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteOAuth2ClientResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientResponse) */ {
 public:
  inline DeleteOAuth2ClientResponse() : DeleteOAuth2ClientResponse(nullptr) {}
  virtual ~DeleteOAuth2ClientResponse();

  DeleteOAuth2ClientResponse(const DeleteOAuth2ClientResponse& from);
  DeleteOAuth2ClientResponse(DeleteOAuth2ClientResponse&& from) noexcept
    : DeleteOAuth2ClientResponse() {
    *this = ::std::move(from);
  }

  inline DeleteOAuth2ClientResponse& operator=(const DeleteOAuth2ClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteOAuth2ClientResponse& operator=(DeleteOAuth2ClientResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteOAuth2ClientResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteOAuth2ClientResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteOAuth2ClientResponse*>(
               &_DeleteOAuth2ClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(DeleteOAuth2ClientResponse& a, DeleteOAuth2ClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteOAuth2ClientResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteOAuth2ClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteOAuth2ClientResponse* New() const final {
    return CreateMaybeMessage<DeleteOAuth2ClientResponse>(nullptr);
  }

  DeleteOAuth2ClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOAuth2ClientResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteOAuth2ClientResponse& from);
  void MergeFrom(const DeleteOAuth2ClientResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOAuth2ClientResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientResponse";
  }
  protected:
  explicit DeleteOAuth2ClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetAddressesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetAddressesRequest) */ {
 public:
  inline GetAddressesRequest() : GetAddressesRequest(nullptr) {}
  virtual ~GetAddressesRequest();

  GetAddressesRequest(const GetAddressesRequest& from);
  GetAddressesRequest(GetAddressesRequest&& from) noexcept
    : GetAddressesRequest() {
    *this = ::std::move(from);
  }

  inline GetAddressesRequest& operator=(const GetAddressesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressesRequest& operator=(GetAddressesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddressesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressesRequest* internal_default_instance() {
    return reinterpret_cast<const GetAddressesRequest*>(
               &_GetAddressesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetAddressesRequest& a, GetAddressesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAddressesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddressesRequest* New() const final {
    return CreateMaybeMessage<GetAddressesRequest>(nullptr);
  }

  GetAddressesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddressesRequest& from);
  void MergeFrom(const GetAddressesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetAddressesRequest";
  }
  protected:
  explicit GetAddressesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityIdFieldNumber = 1,
  };
  // string identity_id = 1[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetAddressesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetAddressesResponse_Address PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address) */ {
 public:
  inline GetAddressesResponse_Address() : GetAddressesResponse_Address(nullptr) {}
  virtual ~GetAddressesResponse_Address();

  GetAddressesResponse_Address(const GetAddressesResponse_Address& from);
  GetAddressesResponse_Address(GetAddressesResponse_Address&& from) noexcept
    : GetAddressesResponse_Address() {
    *this = ::std::move(from);
  }

  inline GetAddressesResponse_Address& operator=(const GetAddressesResponse_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressesResponse_Address& operator=(GetAddressesResponse_Address&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddressesResponse_Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressesResponse_Address* internal_default_instance() {
    return reinterpret_cast<const GetAddressesResponse_Address*>(
               &_GetAddressesResponse_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GetAddressesResponse_Address& a, GetAddressesResponse_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressesResponse_Address* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAddressesResponse_Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddressesResponse_Address* New() const final {
    return CreateMaybeMessage<GetAddressesResponse_Address>(nullptr);
  }

  GetAddressesResponse_Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressesResponse_Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddressesResponse_Address& from);
  void MergeFrom(const GetAddressesResponse_Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressesResponse_Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address";
  }
  protected:
  explicit GetAddressesResponse_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIdentityIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kAddressFieldNumber = 4,
    kIdSchemaKeyFieldNumber = 6,
    kVerifiedFieldNumber = 5,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string identity_id = 2[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // string name = 3[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address = 4[json_name = "address"];
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string id_schema_key = 6[json_name = "idSchemaKey"];
  void clear_id_schema_key();
  const std::string& id_schema_key() const;
  void set_id_schema_key(const std::string& value);
  void set_id_schema_key(std::string&& value);
  void set_id_schema_key(const char* value);
  void set_id_schema_key(const char* value, size_t size);
  std::string* mutable_id_schema_key();
  std::string* release_id_schema_key();
  void set_allocated_id_schema_key(std::string* id_schema_key);
  private:
  const std::string& _internal_id_schema_key() const;
  void _internal_set_id_schema_key(const std::string& value);
  std::string* _internal_mutable_id_schema_key();
  public:

  // bool verified = 5[json_name = "verified"];
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_schema_key_;
  bool verified_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetAddressesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetAddressesResponse) */ {
 public:
  inline GetAddressesResponse() : GetAddressesResponse(nullptr) {}
  virtual ~GetAddressesResponse();

  GetAddressesResponse(const GetAddressesResponse& from);
  GetAddressesResponse(GetAddressesResponse&& from) noexcept
    : GetAddressesResponse() {
    *this = ::std::move(from);
  }

  inline GetAddressesResponse& operator=(const GetAddressesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressesResponse& operator=(GetAddressesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddressesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressesResponse* internal_default_instance() {
    return reinterpret_cast<const GetAddressesResponse*>(
               &_GetAddressesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetAddressesResponse& a, GetAddressesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAddressesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddressesResponse* New() const final {
    return CreateMaybeMessage<GetAddressesResponse>(nullptr);
  }

  GetAddressesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddressesResponse& from);
  void MergeFrom(const GetAddressesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetAddressesResponse";
  }
  protected:
  explicit GetAddressesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetAddressesResponse_Address Address;

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
  };
  // repeated .depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address addresses = 1[json_name = "addresses"];
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address* mutable_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address >*
      mutable_addresses();
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address& _internal_addresses(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address* _internal_add_addresses();
  public:
  const ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address& addresses(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address* add_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address >&
      addresses() const;

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetAddressesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address > addresses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetAddressRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetAddressRequest) */ {
 public:
  inline GetAddressRequest() : GetAddressRequest(nullptr) {}
  virtual ~GetAddressRequest();

  GetAddressRequest(const GetAddressRequest& from);
  GetAddressRequest(GetAddressRequest&& from) noexcept
    : GetAddressRequest() {
    *this = ::std::move(from);
  }

  inline GetAddressRequest& operator=(const GetAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressRequest& operator=(GetAddressRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddressRequest& default_instance();

  enum MatchCase {
    kId = 1,
    kVerification = 2,
    MATCH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressRequest* internal_default_instance() {
    return reinterpret_cast<const GetAddressRequest*>(
               &_GetAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetAddressRequest& a, GetAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAddressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddressRequest* New() const final {
    return CreateMaybeMessage<GetAddressRequest>(nullptr);
  }

  GetAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddressRequest& from);
  void MergeFrom(const GetAddressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetAddressRequest";
  }
  protected:
  explicit GetAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVerificationFieldNumber = 2,
  };
  // string id = 1[json_name = "id"];
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string verification = 2[json_name = "verification"];
  private:
  bool _internal_has_verification() const;
  public:
  void clear_verification();
  const std::string& verification() const;
  void set_verification(const std::string& value);
  void set_verification(std::string&& value);
  void set_verification(const char* value);
  void set_verification(const char* value, size_t size);
  std::string* mutable_verification();
  std::string* release_verification();
  void set_allocated_verification(std::string* verification);
  private:
  const std::string& _internal_verification() const;
  void _internal_set_verification(const std::string& value);
  std::string* _internal_mutable_verification();
  public:

  void clear_match();
  MatchCase match_case() const;
  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetAddressRequest)
 private:
  class _Internal;
  void set_has_id();
  void set_has_verification();

  inline bool has_match() const;
  inline void clear_has_match();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MatchUnion {
    MatchUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verification_;
  } match_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetAddressResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetAddressResponse) */ {
 public:
  inline GetAddressResponse() : GetAddressResponse(nullptr) {}
  virtual ~GetAddressResponse();

  GetAddressResponse(const GetAddressResponse& from);
  GetAddressResponse(GetAddressResponse&& from) noexcept
    : GetAddressResponse() {
    *this = ::std::move(from);
  }

  inline GetAddressResponse& operator=(const GetAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressResponse& operator=(GetAddressResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressResponse* internal_default_instance() {
    return reinterpret_cast<const GetAddressResponse*>(
               &_GetAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetAddressResponse& a, GetAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAddressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddressResponse* New() const final {
    return CreateMaybeMessage<GetAddressResponse>(nullptr);
  }

  GetAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddressResponse& from);
  void MergeFrom(const GetAddressResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetAddressResponse";
  }
  protected:
  explicit GetAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIdentityIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kAddressFieldNumber = 4,
    kIdSchemaKeyFieldNumber = 6,
    kVerifiedFieldNumber = 5,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string identity_id = 2[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // string name = 3[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address = 4[json_name = "address"];
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string id_schema_key = 6[json_name = "idSchemaKey"];
  void clear_id_schema_key();
  const std::string& id_schema_key() const;
  void set_id_schema_key(const std::string& value);
  void set_id_schema_key(std::string&& value);
  void set_id_schema_key(const char* value);
  void set_id_schema_key(const char* value, size_t size);
  std::string* mutable_id_schema_key();
  std::string* release_id_schema_key();
  void set_allocated_id_schema_key(std::string* id_schema_key);
  private:
  const std::string& _internal_id_schema_key() const;
  void _internal_set_id_schema_key(const std::string& value);
  std::string* _internal_mutable_id_schema_key();
  public:

  // bool verified = 5[json_name = "verified"];
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetAddressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_schema_key_;
  bool verified_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateAddressRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest) */ {
 public:
  inline UpdateAddressRequest() : UpdateAddressRequest(nullptr) {}
  virtual ~UpdateAddressRequest();

  UpdateAddressRequest(const UpdateAddressRequest& from);
  UpdateAddressRequest(UpdateAddressRequest&& from) noexcept
    : UpdateAddressRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAddressRequest& operator=(const UpdateAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAddressRequest& operator=(UpdateAddressRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateAddressRequest& default_instance();

  enum AttributeCase {
    kVerified = 2,
    kAddress = 3,
    ATTRIBUTE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAddressRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAddressRequest*>(
               &_UpdateAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(UpdateAddressRequest& a, UpdateAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAddressRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAddressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAddressRequest* New() const final {
    return CreateMaybeMessage<UpdateAddressRequest>(nullptr);
  }

  UpdateAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAddressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateAddressRequest& from);
  void MergeFrom(const UpdateAddressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAddressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateAddressRequest";
  }
  protected:
  explicit UpdateAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVerifiedFieldNumber = 2,
    kAddressFieldNumber = 3,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool verified = 2[json_name = "verified"];
  private:
  bool _internal_has_verified() const;
  public:
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // string address = 3[json_name = "address"];
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  void clear_attribute();
  AttributeCase attribute_case() const;
  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest)
 private:
  class _Internal;
  void set_has_verified();
  void set_has_address();

  inline bool has_attribute() const;
  inline void clear_has_attribute();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  union AttributeUnion {
    AttributeUnion() {}
    bool verified_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  } attribute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateAddressResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateAddressResponse) */ {
 public:
  inline UpdateAddressResponse() : UpdateAddressResponse(nullptr) {}
  virtual ~UpdateAddressResponse();

  UpdateAddressResponse(const UpdateAddressResponse& from);
  UpdateAddressResponse(UpdateAddressResponse&& from) noexcept
    : UpdateAddressResponse() {
    *this = ::std::move(from);
  }

  inline UpdateAddressResponse& operator=(const UpdateAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAddressResponse& operator=(UpdateAddressResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAddressResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateAddressResponse*>(
               &_UpdateAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(UpdateAddressResponse& a, UpdateAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAddressResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAddressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAddressResponse* New() const final {
    return CreateMaybeMessage<UpdateAddressResponse>(nullptr);
  }

  UpdateAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAddressResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateAddressResponse& from);
  void MergeFrom(const UpdateAddressResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAddressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateAddressResponse";
  }
  protected:
  explicit UpdateAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateAddressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetProfileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetProfileRequest) */ {
 public:
  inline GetProfileRequest() : GetProfileRequest(nullptr) {}
  virtual ~GetProfileRequest();

  GetProfileRequest(const GetProfileRequest& from);
  GetProfileRequest(GetProfileRequest&& from) noexcept
    : GetProfileRequest() {
    *this = ::std::move(from);
  }

  inline GetProfileRequest& operator=(const GetProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProfileRequest& operator=(GetProfileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProfileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProfileRequest* internal_default_instance() {
    return reinterpret_cast<const GetProfileRequest*>(
               &_GetProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GetProfileRequest& a, GetProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProfileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProfileRequest* New() const final {
    return CreateMaybeMessage<GetProfileRequest>(nullptr);
  }

  GetProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProfileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProfileRequest& from);
  void MergeFrom(const GetProfileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProfileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetProfileRequest";
  }
  protected:
  explicit GetProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityIdFieldNumber = 1,
  };
  // string identity_id = 1[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetProfileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetProfileResponse) */ {
 public:
  inline GetProfileResponse() : GetProfileResponse(nullptr) {}
  virtual ~GetProfileResponse();

  GetProfileResponse(const GetProfileResponse& from);
  GetProfileResponse(GetProfileResponse&& from) noexcept
    : GetProfileResponse() {
    *this = ::std::move(from);
  }

  inline GetProfileResponse& operator=(const GetProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProfileResponse& operator=(GetProfileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProfileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProfileResponse* internal_default_instance() {
    return reinterpret_cast<const GetProfileResponse*>(
               &_GetProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetProfileResponse& a, GetProfileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProfileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProfileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProfileResponse* New() const final {
    return CreateMaybeMessage<GetProfileResponse>(nullptr);
  }

  GetProfileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProfileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProfileResponse& from);
  void MergeFrom(const GetProfileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProfileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetProfileResponse";
  }
  protected:
  explicit GetProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileFieldNumber = 1,
  };
  // string profile = 1[json_name = "profile"];
  void clear_profile();
  const std::string& profile() const;
  void set_profile(const std::string& value);
  void set_profile(std::string&& value);
  void set_profile(const char* value);
  void set_profile(const char* value, size_t size);
  std::string* mutable_profile();
  std::string* release_profile();
  void set_allocated_profile(std::string* profile);
  private:
  const std::string& _internal_profile() const;
  void _internal_set_profile(const std::string& value);
  std::string* _internal_mutable_profile();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetProfileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateProfileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest) */ {
 public:
  inline UpdateProfileRequest() : UpdateProfileRequest(nullptr) {}
  virtual ~UpdateProfileRequest();

  UpdateProfileRequest(const UpdateProfileRequest& from);
  UpdateProfileRequest(UpdateProfileRequest&& from) noexcept
    : UpdateProfileRequest() {
    *this = ::std::move(from);
  }

  inline UpdateProfileRequest& operator=(const UpdateProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProfileRequest& operator=(UpdateProfileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateProfileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateProfileRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateProfileRequest*>(
               &_UpdateProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(UpdateProfileRequest& a, UpdateProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProfileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProfileRequest* New() const final {
    return CreateMaybeMessage<UpdateProfileRequest>(nullptr);
  }

  UpdateProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProfileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateProfileRequest& from);
  void MergeFrom(const UpdateProfileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProfileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateProfileRequest";
  }
  protected:
  explicit UpdateProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityIdFieldNumber = 1,
    kProfileFieldNumber = 2,
  };
  // string identity_id = 1[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // string profile = 2[json_name = "profile"];
  void clear_profile();
  const std::string& profile() const;
  void set_profile(const std::string& value);
  void set_profile(std::string&& value);
  void set_profile(const char* value);
  void set_profile(const char* value, size_t size);
  std::string* mutable_profile();
  std::string* release_profile();
  void set_allocated_profile(std::string* profile);
  private:
  const std::string& _internal_profile() const;
  void _internal_set_profile(const std::string& value);
  std::string* _internal_mutable_profile();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateProfileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateProfileResponse) */ {
 public:
  inline UpdateProfileResponse() : UpdateProfileResponse(nullptr) {}
  virtual ~UpdateProfileResponse();

  UpdateProfileResponse(const UpdateProfileResponse& from);
  UpdateProfileResponse(UpdateProfileResponse&& from) noexcept
    : UpdateProfileResponse() {
    *this = ::std::move(from);
  }

  inline UpdateProfileResponse& operator=(const UpdateProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProfileResponse& operator=(UpdateProfileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateProfileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateProfileResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateProfileResponse*>(
               &_UpdateProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(UpdateProfileResponse& a, UpdateProfileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProfileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProfileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProfileResponse* New() const final {
    return CreateMaybeMessage<UpdateProfileResponse>(nullptr);
  }

  UpdateProfileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProfileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateProfileResponse& from);
  void MergeFrom(const UpdateProfileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProfileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateProfileResponse";
  }
  protected:
  explicit UpdateProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateProfileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityLoginAttemptsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsRequest) */ {
 public:
  inline GetIdentityLoginAttemptsRequest() : GetIdentityLoginAttemptsRequest(nullptr) {}
  virtual ~GetIdentityLoginAttemptsRequest();

  GetIdentityLoginAttemptsRequest(const GetIdentityLoginAttemptsRequest& from);
  GetIdentityLoginAttemptsRequest(GetIdentityLoginAttemptsRequest&& from) noexcept
    : GetIdentityLoginAttemptsRequest() {
    *this = ::std::move(from);
  }

  inline GetIdentityLoginAttemptsRequest& operator=(const GetIdentityLoginAttemptsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityLoginAttemptsRequest& operator=(GetIdentityLoginAttemptsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentityLoginAttemptsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentityLoginAttemptsRequest* internal_default_instance() {
    return reinterpret_cast<const GetIdentityLoginAttemptsRequest*>(
               &_GetIdentityLoginAttemptsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetIdentityLoginAttemptsRequest& a, GetIdentityLoginAttemptsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityLoginAttemptsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentityLoginAttemptsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityLoginAttemptsRequest* New() const final {
    return CreateMaybeMessage<GetIdentityLoginAttemptsRequest>(nullptr);
  }

  GetIdentityLoginAttemptsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityLoginAttemptsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityLoginAttemptsRequest& from);
  void MergeFrom(const GetIdentityLoginAttemptsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityLoginAttemptsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsRequest";
  }
  protected:
  explicit GetIdentityLoginAttemptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityIdFieldNumber = 1,
  };
  // string identity_id = 1[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityLoginAttemptsResponse_Attempt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt) */ {
 public:
  inline GetIdentityLoginAttemptsResponse_Attempt() : GetIdentityLoginAttemptsResponse_Attempt(nullptr) {}
  virtual ~GetIdentityLoginAttemptsResponse_Attempt();

  GetIdentityLoginAttemptsResponse_Attempt(const GetIdentityLoginAttemptsResponse_Attempt& from);
  GetIdentityLoginAttemptsResponse_Attempt(GetIdentityLoginAttemptsResponse_Attempt&& from) noexcept
    : GetIdentityLoginAttemptsResponse_Attempt() {
    *this = ::std::move(from);
  }

  inline GetIdentityLoginAttemptsResponse_Attempt& operator=(const GetIdentityLoginAttemptsResponse_Attempt& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityLoginAttemptsResponse_Attempt& operator=(GetIdentityLoginAttemptsResponse_Attempt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentityLoginAttemptsResponse_Attempt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentityLoginAttemptsResponse_Attempt* internal_default_instance() {
    return reinterpret_cast<const GetIdentityLoginAttemptsResponse_Attempt*>(
               &_GetIdentityLoginAttemptsResponse_Attempt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetIdentityLoginAttemptsResponse_Attempt& a, GetIdentityLoginAttemptsResponse_Attempt& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityLoginAttemptsResponse_Attempt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentityLoginAttemptsResponse_Attempt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityLoginAttemptsResponse_Attempt* New() const final {
    return CreateMaybeMessage<GetIdentityLoginAttemptsResponse_Attempt>(nullptr);
  }

  GetIdentityLoginAttemptsResponse_Attempt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityLoginAttemptsResponse_Attempt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityLoginAttemptsResponse_Attempt& from);
  void MergeFrom(const GetIdentityLoginAttemptsResponse_Attempt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityLoginAttemptsResponse_Attempt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt";
  }
  protected:
  explicit GetIdentityLoginAttemptsResponse_Attempt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthenticationMethodsFieldNumber = 4,
    kIdFieldNumber = 1,
    kIdentityIdFieldNumber = 2,
    kStatusFieldNumber = 3,
    kCreatedAtFieldNumber = 5,
    kExpiresAtFieldNumber = 6,
  };
  // repeated string authentication_methods = 4[json_name = "authenticationMethods"];
  int authentication_methods_size() const;
  private:
  int _internal_authentication_methods_size() const;
  public:
  void clear_authentication_methods();
  const std::string& authentication_methods(int index) const;
  std::string* mutable_authentication_methods(int index);
  void set_authentication_methods(int index, const std::string& value);
  void set_authentication_methods(int index, std::string&& value);
  void set_authentication_methods(int index, const char* value);
  void set_authentication_methods(int index, const char* value, size_t size);
  std::string* add_authentication_methods();
  void add_authentication_methods(const std::string& value);
  void add_authentication_methods(std::string&& value);
  void add_authentication_methods(const char* value);
  void add_authentication_methods(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& authentication_methods() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_authentication_methods();
  private:
  const std::string& _internal_authentication_methods(int index) const;
  std::string* _internal_add_authentication_methods();
  public:

  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string identity_id = 2[json_name = "identityId"];
  void clear_identity_id();
  const std::string& identity_id() const;
  void set_identity_id(const std::string& value);
  void set_identity_id(std::string&& value);
  void set_identity_id(const char* value);
  void set_identity_id(const char* value, size_t size);
  std::string* mutable_identity_id();
  std::string* release_identity_id();
  void set_allocated_identity_id(std::string* identity_id);
  private:
  const std::string& _internal_identity_id() const;
  void _internal_set_identity_id(const std::string& value);
  std::string* _internal_mutable_identity_id();
  public:

  // string status = 3[json_name = "status"];
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .google.protobuf.Timestamp created_at = 5[json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp expires_at = 6[json_name = "expiresAt"];
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expires_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expires_at();
  public:
  void unsafe_arena_set_allocated_expires_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expires_at();

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> authentication_methods_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expires_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityLoginAttemptsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse) */ {
 public:
  inline GetIdentityLoginAttemptsResponse() : GetIdentityLoginAttemptsResponse(nullptr) {}
  virtual ~GetIdentityLoginAttemptsResponse();

  GetIdentityLoginAttemptsResponse(const GetIdentityLoginAttemptsResponse& from);
  GetIdentityLoginAttemptsResponse(GetIdentityLoginAttemptsResponse&& from) noexcept
    : GetIdentityLoginAttemptsResponse() {
    *this = ::std::move(from);
  }

  inline GetIdentityLoginAttemptsResponse& operator=(const GetIdentityLoginAttemptsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityLoginAttemptsResponse& operator=(GetIdentityLoginAttemptsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentityLoginAttemptsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentityLoginAttemptsResponse* internal_default_instance() {
    return reinterpret_cast<const GetIdentityLoginAttemptsResponse*>(
               &_GetIdentityLoginAttemptsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetIdentityLoginAttemptsResponse& a, GetIdentityLoginAttemptsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityLoginAttemptsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentityLoginAttemptsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityLoginAttemptsResponse* New() const final {
    return CreateMaybeMessage<GetIdentityLoginAttemptsResponse>(nullptr);
  }

  GetIdentityLoginAttemptsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityLoginAttemptsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityLoginAttemptsResponse& from);
  void MergeFrom(const GetIdentityLoginAttemptsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityLoginAttemptsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse";
  }
  protected:
  explicit GetIdentityLoginAttemptsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetIdentityLoginAttemptsResponse_Attempt Attempt;

  // accessors -------------------------------------------------------

  enum : int {
    kAttemptsFieldNumber = 1,
  };
  // repeated .depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt attempts = 1[json_name = "attempts"];
  int attempts_size() const;
  private:
  int _internal_attempts_size() const;
  public:
  void clear_attempts();
  ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt* mutable_attempts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt >*
      mutable_attempts();
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt& _internal_attempts(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt* _internal_add_attempts();
  public:
  const ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt& attempts(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt* add_attempts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt >&
      attempts() const;

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt > attempts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateIdSchemaRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest) */ {
 public:
  inline CreateIdSchemaRequest() : CreateIdSchemaRequest(nullptr) {}
  virtual ~CreateIdSchemaRequest();

  CreateIdSchemaRequest(const CreateIdSchemaRequest& from);
  CreateIdSchemaRequest(CreateIdSchemaRequest&& from) noexcept
    : CreateIdSchemaRequest() {
    *this = ::std::move(from);
  }

  inline CreateIdSchemaRequest& operator=(const CreateIdSchemaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIdSchemaRequest& operator=(CreateIdSchemaRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateIdSchemaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateIdSchemaRequest* internal_default_instance() {
    return reinterpret_cast<const CreateIdSchemaRequest*>(
               &_CreateIdSchemaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CreateIdSchemaRequest& a, CreateIdSchemaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIdSchemaRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIdSchemaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateIdSchemaRequest* New() const final {
    return CreateMaybeMessage<CreateIdSchemaRequest>(nullptr);
  }

  CreateIdSchemaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateIdSchemaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateIdSchemaRequest& from);
  void MergeFrom(const CreateIdSchemaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIdSchemaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest";
  }
  protected:
  explicit CreateIdSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string name = 1[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct content = 2[json_name = "content"];
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const PROTOBUF_NAMESPACE_ID::Struct& content() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_content();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_content();
  void set_allocated_content(PROTOBUF_NAMESPACE_ID::Struct* content);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_content() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      PROTOBUF_NAMESPACE_ID::Struct* content);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_content();

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Struct* content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class CreateIdSchemaResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.CreateIdSchemaResponse) */ {
 public:
  inline CreateIdSchemaResponse() : CreateIdSchemaResponse(nullptr) {}
  virtual ~CreateIdSchemaResponse();

  CreateIdSchemaResponse(const CreateIdSchemaResponse& from);
  CreateIdSchemaResponse(CreateIdSchemaResponse&& from) noexcept
    : CreateIdSchemaResponse() {
    *this = ::std::move(from);
  }

  inline CreateIdSchemaResponse& operator=(const CreateIdSchemaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIdSchemaResponse& operator=(CreateIdSchemaResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateIdSchemaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateIdSchemaResponse* internal_default_instance() {
    return reinterpret_cast<const CreateIdSchemaResponse*>(
               &_CreateIdSchemaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CreateIdSchemaResponse& a, CreateIdSchemaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIdSchemaResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIdSchemaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateIdSchemaResponse* New() const final {
    return CreateMaybeMessage<CreateIdSchemaResponse>(nullptr);
  }

  CreateIdSchemaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateIdSchemaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateIdSchemaResponse& from);
  void MergeFrom(const CreateIdSchemaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIdSchemaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.CreateIdSchemaResponse";
  }
  protected:
  explicit CreateIdSchemaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
  };
  // string id = 2[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.CreateIdSchemaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdSchemasRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdSchemasRequest) */ {
 public:
  inline GetIdSchemasRequest() : GetIdSchemasRequest(nullptr) {}
  virtual ~GetIdSchemasRequest();

  GetIdSchemasRequest(const GetIdSchemasRequest& from);
  GetIdSchemasRequest(GetIdSchemasRequest&& from) noexcept
    : GetIdSchemasRequest() {
    *this = ::std::move(from);
  }

  inline GetIdSchemasRequest& operator=(const GetIdSchemasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdSchemasRequest& operator=(GetIdSchemasRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdSchemasRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdSchemasRequest* internal_default_instance() {
    return reinterpret_cast<const GetIdSchemasRequest*>(
               &_GetIdSchemasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GetIdSchemasRequest& a, GetIdSchemasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdSchemasRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdSchemasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdSchemasRequest* New() const final {
    return CreateMaybeMessage<GetIdSchemasRequest>(nullptr);
  }

  GetIdSchemasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdSchemasRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdSchemasRequest& from);
  void MergeFrom(const GetIdSchemasRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdSchemasRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdSchemasRequest";
  }
  protected:
  explicit GetIdSchemasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdSchemasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdSchemasResponse_JsonSchema PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema) */ {
 public:
  inline GetIdSchemasResponse_JsonSchema() : GetIdSchemasResponse_JsonSchema(nullptr) {}
  virtual ~GetIdSchemasResponse_JsonSchema();

  GetIdSchemasResponse_JsonSchema(const GetIdSchemasResponse_JsonSchema& from);
  GetIdSchemasResponse_JsonSchema(GetIdSchemasResponse_JsonSchema&& from) noexcept
    : GetIdSchemasResponse_JsonSchema() {
    *this = ::std::move(from);
  }

  inline GetIdSchemasResponse_JsonSchema& operator=(const GetIdSchemasResponse_JsonSchema& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdSchemasResponse_JsonSchema& operator=(GetIdSchemasResponse_JsonSchema&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdSchemasResponse_JsonSchema& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdSchemasResponse_JsonSchema* internal_default_instance() {
    return reinterpret_cast<const GetIdSchemasResponse_JsonSchema*>(
               &_GetIdSchemasResponse_JsonSchema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GetIdSchemasResponse_JsonSchema& a, GetIdSchemasResponse_JsonSchema& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdSchemasResponse_JsonSchema* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdSchemasResponse_JsonSchema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdSchemasResponse_JsonSchema* New() const final {
    return CreateMaybeMessage<GetIdSchemasResponse_JsonSchema>(nullptr);
  }

  GetIdSchemasResponse_JsonSchema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdSchemasResponse_JsonSchema>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdSchemasResponse_JsonSchema& from);
  void MergeFrom(const GetIdSchemasResponse_JsonSchema& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdSchemasResponse_JsonSchema* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema";
  }
  protected:
  explicit GetIdSchemasResponse_JsonSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kContentFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kUpdatedAtFieldNumber = 5,
    kIsDefaultFieldNumber = 6,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct content = 3[json_name = "content"];
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const PROTOBUF_NAMESPACE_ID::Struct& content() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_content();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_content();
  void set_allocated_content(PROTOBUF_NAMESPACE_ID::Struct* content);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_content() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      PROTOBUF_NAMESPACE_ID::Struct* content);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_content();

  // .google.protobuf.Timestamp created_at = 4[json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 5[json_name = "updatedAt"];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // bool is_default = 6[json_name = "isDefault"];
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Struct* content_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  bool is_default_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdSchemasResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse) */ {
 public:
  inline GetIdSchemasResponse() : GetIdSchemasResponse(nullptr) {}
  virtual ~GetIdSchemasResponse();

  GetIdSchemasResponse(const GetIdSchemasResponse& from);
  GetIdSchemasResponse(GetIdSchemasResponse&& from) noexcept
    : GetIdSchemasResponse() {
    *this = ::std::move(from);
  }

  inline GetIdSchemasResponse& operator=(const GetIdSchemasResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdSchemasResponse& operator=(GetIdSchemasResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdSchemasResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdSchemasResponse* internal_default_instance() {
    return reinterpret_cast<const GetIdSchemasResponse*>(
               &_GetIdSchemasResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GetIdSchemasResponse& a, GetIdSchemasResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdSchemasResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdSchemasResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdSchemasResponse* New() const final {
    return CreateMaybeMessage<GetIdSchemasResponse>(nullptr);
  }

  GetIdSchemasResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdSchemasResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdSchemasResponse& from);
  void MergeFrom(const GetIdSchemasResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdSchemasResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse";
  }
  protected:
  explicit GetIdSchemasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetIdSchemasResponse_JsonSchema JsonSchema;

  // accessors -------------------------------------------------------

  enum : int {
    kJsonschemasFieldNumber = 1,
  };
  // repeated .depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema jsonschemas = 1[json_name = "jsonschemas"];
  int jsonschemas_size() const;
  private:
  int _internal_jsonschemas_size() const;
  public:
  void clear_jsonschemas();
  ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema* mutable_jsonschemas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema >*
      mutable_jsonschemas();
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema& _internal_jsonschemas(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema* _internal_add_jsonschemas();
  public:
  const ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema& jsonschemas(int index) const;
  ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema* add_jsonschemas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema >&
      jsonschemas() const;

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema > jsonschemas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdSchemaRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdSchemaRequest) */ {
 public:
  inline GetIdSchemaRequest() : GetIdSchemaRequest(nullptr) {}
  virtual ~GetIdSchemaRequest();

  GetIdSchemaRequest(const GetIdSchemaRequest& from);
  GetIdSchemaRequest(GetIdSchemaRequest&& from) noexcept
    : GetIdSchemaRequest() {
    *this = ::std::move(from);
  }

  inline GetIdSchemaRequest& operator=(const GetIdSchemaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdSchemaRequest& operator=(GetIdSchemaRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdSchemaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdSchemaRequest* internal_default_instance() {
    return reinterpret_cast<const GetIdSchemaRequest*>(
               &_GetIdSchemaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GetIdSchemaRequest& a, GetIdSchemaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdSchemaRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdSchemaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdSchemaRequest* New() const final {
    return CreateMaybeMessage<GetIdSchemaRequest>(nullptr);
  }

  GetIdSchemaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdSchemaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdSchemaRequest& from);
  void MergeFrom(const GetIdSchemaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdSchemaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdSchemaRequest";
  }
  protected:
  explicit GetIdSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdSchemaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetIdSchemaResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse) */ {
 public:
  inline GetIdSchemaResponse() : GetIdSchemaResponse(nullptr) {}
  virtual ~GetIdSchemaResponse();

  GetIdSchemaResponse(const GetIdSchemaResponse& from);
  GetIdSchemaResponse(GetIdSchemaResponse&& from) noexcept
    : GetIdSchemaResponse() {
    *this = ::std::move(from);
  }

  inline GetIdSchemaResponse& operator=(const GetIdSchemaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdSchemaResponse& operator=(GetIdSchemaResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdSchemaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdSchemaResponse* internal_default_instance() {
    return reinterpret_cast<const GetIdSchemaResponse*>(
               &_GetIdSchemaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetIdSchemaResponse& a, GetIdSchemaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdSchemaResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdSchemaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdSchemaResponse* New() const final {
    return CreateMaybeMessage<GetIdSchemaResponse>(nullptr);
  }

  GetIdSchemaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdSchemaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdSchemaResponse& from);
  void MergeFrom(const GetIdSchemaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdSchemaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse";
  }
  protected:
  explicit GetIdSchemaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kContentFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kUpdatedAtFieldNumber = 5,
    kIsDefaultFieldNumber = 6,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct content = 3[json_name = "content"];
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const PROTOBUF_NAMESPACE_ID::Struct& content() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_content();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_content();
  void set_allocated_content(PROTOBUF_NAMESPACE_ID::Struct* content);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_content() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      PROTOBUF_NAMESPACE_ID::Struct* content);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_content();

  // .google.protobuf.Timestamp created_at = 4[json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 5[json_name = "updatedAt"];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // bool is_default = 6[json_name = "isDefault"];
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Struct* content_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  bool is_default_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetDefaultIdSchemaRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaRequest) */ {
 public:
  inline GetDefaultIdSchemaRequest() : GetDefaultIdSchemaRequest(nullptr) {}
  virtual ~GetDefaultIdSchemaRequest();

  GetDefaultIdSchemaRequest(const GetDefaultIdSchemaRequest& from);
  GetDefaultIdSchemaRequest(GetDefaultIdSchemaRequest&& from) noexcept
    : GetDefaultIdSchemaRequest() {
    *this = ::std::move(from);
  }

  inline GetDefaultIdSchemaRequest& operator=(const GetDefaultIdSchemaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDefaultIdSchemaRequest& operator=(GetDefaultIdSchemaRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDefaultIdSchemaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDefaultIdSchemaRequest* internal_default_instance() {
    return reinterpret_cast<const GetDefaultIdSchemaRequest*>(
               &_GetDefaultIdSchemaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GetDefaultIdSchemaRequest& a, GetDefaultIdSchemaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDefaultIdSchemaRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDefaultIdSchemaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDefaultIdSchemaRequest* New() const final {
    return CreateMaybeMessage<GetDefaultIdSchemaRequest>(nullptr);
  }

  GetDefaultIdSchemaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDefaultIdSchemaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDefaultIdSchemaRequest& from);
  void MergeFrom(const GetDefaultIdSchemaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDefaultIdSchemaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaRequest";
  }
  protected:
  explicit GetDefaultIdSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetDefaultIdSchemaResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse) */ {
 public:
  inline GetDefaultIdSchemaResponse() : GetDefaultIdSchemaResponse(nullptr) {}
  virtual ~GetDefaultIdSchemaResponse();

  GetDefaultIdSchemaResponse(const GetDefaultIdSchemaResponse& from);
  GetDefaultIdSchemaResponse(GetDefaultIdSchemaResponse&& from) noexcept
    : GetDefaultIdSchemaResponse() {
    *this = ::std::move(from);
  }

  inline GetDefaultIdSchemaResponse& operator=(const GetDefaultIdSchemaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDefaultIdSchemaResponse& operator=(GetDefaultIdSchemaResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDefaultIdSchemaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDefaultIdSchemaResponse* internal_default_instance() {
    return reinterpret_cast<const GetDefaultIdSchemaResponse*>(
               &_GetDefaultIdSchemaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetDefaultIdSchemaResponse& a, GetDefaultIdSchemaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDefaultIdSchemaResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDefaultIdSchemaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDefaultIdSchemaResponse* New() const final {
    return CreateMaybeMessage<GetDefaultIdSchemaResponse>(nullptr);
  }

  GetDefaultIdSchemaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDefaultIdSchemaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDefaultIdSchemaResponse& from);
  void MergeFrom(const GetDefaultIdSchemaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDefaultIdSchemaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse";
  }
  protected:
  explicit GetDefaultIdSchemaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kContentFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kUpdatedAtFieldNumber = 5,
    kIsDefaultFieldNumber = 6,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct content = 3[json_name = "content"];
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const PROTOBUF_NAMESPACE_ID::Struct& content() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_content();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_content();
  void set_allocated_content(PROTOBUF_NAMESPACE_ID::Struct* content);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_content() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      PROTOBUF_NAMESPACE_ID::Struct* content);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_content();

  // .google.protobuf.Timestamp created_at = 4[json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 5[json_name = "updatedAt"];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // bool is_default = 6[json_name = "isDefault"];
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Struct* content_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  bool is_default_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateIdSchemaRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest) */ {
 public:
  inline UpdateIdSchemaRequest() : UpdateIdSchemaRequest(nullptr) {}
  virtual ~UpdateIdSchemaRequest();

  UpdateIdSchemaRequest(const UpdateIdSchemaRequest& from);
  UpdateIdSchemaRequest(UpdateIdSchemaRequest&& from) noexcept
    : UpdateIdSchemaRequest() {
    *this = ::std::move(from);
  }

  inline UpdateIdSchemaRequest& operator=(const UpdateIdSchemaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateIdSchemaRequest& operator=(UpdateIdSchemaRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateIdSchemaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateIdSchemaRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateIdSchemaRequest*>(
               &_UpdateIdSchemaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(UpdateIdSchemaRequest& a, UpdateIdSchemaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateIdSchemaRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateIdSchemaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateIdSchemaRequest* New() const final {
    return CreateMaybeMessage<UpdateIdSchemaRequest>(nullptr);
  }

  UpdateIdSchemaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateIdSchemaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateIdSchemaRequest& from);
  void MergeFrom(const UpdateIdSchemaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateIdSchemaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest";
  }
  protected:
  explicit UpdateIdSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kContentFieldNumber = 3,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct content = 3[json_name = "content"];
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const PROTOBUF_NAMESPACE_ID::Struct& content() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_content();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_content();
  void set_allocated_content(PROTOBUF_NAMESPACE_ID::Struct* content);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_content() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      PROTOBUF_NAMESPACE_ID::Struct* content);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_content();

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Struct* content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateIdSchemaResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaResponse) */ {
 public:
  inline UpdateIdSchemaResponse() : UpdateIdSchemaResponse(nullptr) {}
  virtual ~UpdateIdSchemaResponse();

  UpdateIdSchemaResponse(const UpdateIdSchemaResponse& from);
  UpdateIdSchemaResponse(UpdateIdSchemaResponse&& from) noexcept
    : UpdateIdSchemaResponse() {
    *this = ::std::move(from);
  }

  inline UpdateIdSchemaResponse& operator=(const UpdateIdSchemaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateIdSchemaResponse& operator=(UpdateIdSchemaResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateIdSchemaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateIdSchemaResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateIdSchemaResponse*>(
               &_UpdateIdSchemaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(UpdateIdSchemaResponse& a, UpdateIdSchemaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateIdSchemaResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateIdSchemaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateIdSchemaResponse* New() const final {
    return CreateMaybeMessage<UpdateIdSchemaResponse>(nullptr);
  }

  UpdateIdSchemaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateIdSchemaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateIdSchemaResponse& from);
  void MergeFrom(const UpdateIdSchemaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateIdSchemaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateIdSchemaResponse";
  }
  protected:
  explicit UpdateIdSchemaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class MarkDefaultIdSchemaRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaRequest) */ {
 public:
  inline MarkDefaultIdSchemaRequest() : MarkDefaultIdSchemaRequest(nullptr) {}
  virtual ~MarkDefaultIdSchemaRequest();

  MarkDefaultIdSchemaRequest(const MarkDefaultIdSchemaRequest& from);
  MarkDefaultIdSchemaRequest(MarkDefaultIdSchemaRequest&& from) noexcept
    : MarkDefaultIdSchemaRequest() {
    *this = ::std::move(from);
  }

  inline MarkDefaultIdSchemaRequest& operator=(const MarkDefaultIdSchemaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkDefaultIdSchemaRequest& operator=(MarkDefaultIdSchemaRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarkDefaultIdSchemaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarkDefaultIdSchemaRequest* internal_default_instance() {
    return reinterpret_cast<const MarkDefaultIdSchemaRequest*>(
               &_MarkDefaultIdSchemaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(MarkDefaultIdSchemaRequest& a, MarkDefaultIdSchemaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkDefaultIdSchemaRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkDefaultIdSchemaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarkDefaultIdSchemaRequest* New() const final {
    return CreateMaybeMessage<MarkDefaultIdSchemaRequest>(nullptr);
  }

  MarkDefaultIdSchemaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarkDefaultIdSchemaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarkDefaultIdSchemaRequest& from);
  void MergeFrom(const MarkDefaultIdSchemaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkDefaultIdSchemaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaRequest";
  }
  protected:
  explicit MarkDefaultIdSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class MarkDefaultIdSchemaResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaResponse) */ {
 public:
  inline MarkDefaultIdSchemaResponse() : MarkDefaultIdSchemaResponse(nullptr) {}
  virtual ~MarkDefaultIdSchemaResponse();

  MarkDefaultIdSchemaResponse(const MarkDefaultIdSchemaResponse& from);
  MarkDefaultIdSchemaResponse(MarkDefaultIdSchemaResponse&& from) noexcept
    : MarkDefaultIdSchemaResponse() {
    *this = ::std::move(from);
  }

  inline MarkDefaultIdSchemaResponse& operator=(const MarkDefaultIdSchemaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkDefaultIdSchemaResponse& operator=(MarkDefaultIdSchemaResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarkDefaultIdSchemaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarkDefaultIdSchemaResponse* internal_default_instance() {
    return reinterpret_cast<const MarkDefaultIdSchemaResponse*>(
               &_MarkDefaultIdSchemaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(MarkDefaultIdSchemaResponse& a, MarkDefaultIdSchemaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkDefaultIdSchemaResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkDefaultIdSchemaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarkDefaultIdSchemaResponse* New() const final {
    return CreateMaybeMessage<MarkDefaultIdSchemaResponse>(nullptr);
  }

  MarkDefaultIdSchemaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarkDefaultIdSchemaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarkDefaultIdSchemaResponse& from);
  void MergeFrom(const MarkDefaultIdSchemaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkDefaultIdSchemaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaResponse";
  }
  protected:
  explicit MarkDefaultIdSchemaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteIdSchemaRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.DeleteIdSchemaRequest) */ {
 public:
  inline DeleteIdSchemaRequest() : DeleteIdSchemaRequest(nullptr) {}
  virtual ~DeleteIdSchemaRequest();

  DeleteIdSchemaRequest(const DeleteIdSchemaRequest& from);
  DeleteIdSchemaRequest(DeleteIdSchemaRequest&& from) noexcept
    : DeleteIdSchemaRequest() {
    *this = ::std::move(from);
  }

  inline DeleteIdSchemaRequest& operator=(const DeleteIdSchemaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteIdSchemaRequest& operator=(DeleteIdSchemaRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteIdSchemaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteIdSchemaRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteIdSchemaRequest*>(
               &_DeleteIdSchemaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(DeleteIdSchemaRequest& a, DeleteIdSchemaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteIdSchemaRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteIdSchemaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteIdSchemaRequest* New() const final {
    return CreateMaybeMessage<DeleteIdSchemaRequest>(nullptr);
  }

  DeleteIdSchemaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteIdSchemaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteIdSchemaRequest& from);
  void MergeFrom(const DeleteIdSchemaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteIdSchemaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.DeleteIdSchemaRequest";
  }
  protected:
  explicit DeleteIdSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.DeleteIdSchemaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class DeleteIdSchemaResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.DeleteIdSchemaResponse) */ {
 public:
  inline DeleteIdSchemaResponse() : DeleteIdSchemaResponse(nullptr) {}
  virtual ~DeleteIdSchemaResponse();

  DeleteIdSchemaResponse(const DeleteIdSchemaResponse& from);
  DeleteIdSchemaResponse(DeleteIdSchemaResponse&& from) noexcept
    : DeleteIdSchemaResponse() {
    *this = ::std::move(from);
  }

  inline DeleteIdSchemaResponse& operator=(const DeleteIdSchemaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteIdSchemaResponse& operator=(DeleteIdSchemaResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteIdSchemaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteIdSchemaResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteIdSchemaResponse*>(
               &_DeleteIdSchemaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(DeleteIdSchemaResponse& a, DeleteIdSchemaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteIdSchemaResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteIdSchemaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteIdSchemaResponse* New() const final {
    return CreateMaybeMessage<DeleteIdSchemaResponse>(nullptr);
  }

  DeleteIdSchemaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteIdSchemaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteIdSchemaResponse& from);
  void MergeFrom(const DeleteIdSchemaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteIdSchemaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.DeleteIdSchemaResponse";
  }
  protected:
  explicit DeleteIdSchemaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.DeleteIdSchemaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetEmailsSetupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetEmailsSetupRequest) */ {
 public:
  inline GetEmailsSetupRequest() : GetEmailsSetupRequest(nullptr) {}
  virtual ~GetEmailsSetupRequest();

  GetEmailsSetupRequest(const GetEmailsSetupRequest& from);
  GetEmailsSetupRequest(GetEmailsSetupRequest&& from) noexcept
    : GetEmailsSetupRequest() {
    *this = ::std::move(from);
  }

  inline GetEmailsSetupRequest& operator=(const GetEmailsSetupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmailsSetupRequest& operator=(GetEmailsSetupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEmailsSetupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEmailsSetupRequest* internal_default_instance() {
    return reinterpret_cast<const GetEmailsSetupRequest*>(
               &_GetEmailsSetupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GetEmailsSetupRequest& a, GetEmailsSetupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEmailsSetupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmailsSetupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEmailsSetupRequest* New() const final {
    return CreateMaybeMessage<GetEmailsSetupRequest>(nullptr);
  }

  GetEmailsSetupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEmailsSetupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEmailsSetupRequest& from);
  void MergeFrom(const GetEmailsSetupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmailsSetupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetEmailsSetupRequest";
  }
  protected:
  explicit GetEmailsSetupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetEmailsSetupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetEmailsSetupResponse_EmailTemplate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate) */ {
 public:
  inline GetEmailsSetupResponse_EmailTemplate() : GetEmailsSetupResponse_EmailTemplate(nullptr) {}
  virtual ~GetEmailsSetupResponse_EmailTemplate();

  GetEmailsSetupResponse_EmailTemplate(const GetEmailsSetupResponse_EmailTemplate& from);
  GetEmailsSetupResponse_EmailTemplate(GetEmailsSetupResponse_EmailTemplate&& from) noexcept
    : GetEmailsSetupResponse_EmailTemplate() {
    *this = ::std::move(from);
  }

  inline GetEmailsSetupResponse_EmailTemplate& operator=(const GetEmailsSetupResponse_EmailTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmailsSetupResponse_EmailTemplate& operator=(GetEmailsSetupResponse_EmailTemplate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEmailsSetupResponse_EmailTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEmailsSetupResponse_EmailTemplate* internal_default_instance() {
    return reinterpret_cast<const GetEmailsSetupResponse_EmailTemplate*>(
               &_GetEmailsSetupResponse_EmailTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GetEmailsSetupResponse_EmailTemplate& a, GetEmailsSetupResponse_EmailTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEmailsSetupResponse_EmailTemplate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmailsSetupResponse_EmailTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEmailsSetupResponse_EmailTemplate* New() const final {
    return CreateMaybeMessage<GetEmailsSetupResponse_EmailTemplate>(nullptr);
  }

  GetEmailsSetupResponse_EmailTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEmailsSetupResponse_EmailTemplate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEmailsSetupResponse_EmailTemplate& from);
  void MergeFrom(const GetEmailsSetupResponse_EmailTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmailsSetupResponse_EmailTemplate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate";
  }
  protected:
  explicit GetEmailsSetupResponse_EmailTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kSubjectFieldNumber = 4,
  };
  // string content = 3[json_name = "content"];
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string subject = 4[json_name = "subject"];
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetEmailsSetupResponse_EmailSender PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender) */ {
 public:
  inline GetEmailsSetupResponse_EmailSender() : GetEmailsSetupResponse_EmailSender(nullptr) {}
  virtual ~GetEmailsSetupResponse_EmailSender();

  GetEmailsSetupResponse_EmailSender(const GetEmailsSetupResponse_EmailSender& from);
  GetEmailsSetupResponse_EmailSender(GetEmailsSetupResponse_EmailSender&& from) noexcept
    : GetEmailsSetupResponse_EmailSender() {
    *this = ::std::move(from);
  }

  inline GetEmailsSetupResponse_EmailSender& operator=(const GetEmailsSetupResponse_EmailSender& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmailsSetupResponse_EmailSender& operator=(GetEmailsSetupResponse_EmailSender&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEmailsSetupResponse_EmailSender& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEmailsSetupResponse_EmailSender* internal_default_instance() {
    return reinterpret_cast<const GetEmailsSetupResponse_EmailSender*>(
               &_GetEmailsSetupResponse_EmailSender_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetEmailsSetupResponse_EmailSender& a, GetEmailsSetupResponse_EmailSender& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEmailsSetupResponse_EmailSender* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmailsSetupResponse_EmailSender* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEmailsSetupResponse_EmailSender* New() const final {
    return CreateMaybeMessage<GetEmailsSetupResponse_EmailSender>(nullptr);
  }

  GetEmailsSetupResponse_EmailSender* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEmailsSetupResponse_EmailSender>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEmailsSetupResponse_EmailSender& from);
  void MergeFrom(const GetEmailsSetupResponse_EmailSender& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmailsSetupResponse_EmailSender* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender";
  }
  protected:
  explicit GetEmailsSetupResponse_EmailSender(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailAddressFieldNumber = 1,
    kSmtpHostFieldNumber = 2,
    kSmtpUsernameFieldNumber = 4,
    kSmtpPasswordFieldNumber = 5,
    kSmtpPortFieldNumber = 3,
  };
  // string email_address = 1[json_name = "emailAddress"];
  void clear_email_address();
  const std::string& email_address() const;
  void set_email_address(const std::string& value);
  void set_email_address(std::string&& value);
  void set_email_address(const char* value);
  void set_email_address(const char* value, size_t size);
  std::string* mutable_email_address();
  std::string* release_email_address();
  void set_allocated_email_address(std::string* email_address);
  private:
  const std::string& _internal_email_address() const;
  void _internal_set_email_address(const std::string& value);
  std::string* _internal_mutable_email_address();
  public:

  // string smtp_host = 2[json_name = "smtpHost"];
  void clear_smtp_host();
  const std::string& smtp_host() const;
  void set_smtp_host(const std::string& value);
  void set_smtp_host(std::string&& value);
  void set_smtp_host(const char* value);
  void set_smtp_host(const char* value, size_t size);
  std::string* mutable_smtp_host();
  std::string* release_smtp_host();
  void set_allocated_smtp_host(std::string* smtp_host);
  private:
  const std::string& _internal_smtp_host() const;
  void _internal_set_smtp_host(const std::string& value);
  std::string* _internal_mutable_smtp_host();
  public:

  // string smtp_username = 4[json_name = "smtpUsername"];
  void clear_smtp_username();
  const std::string& smtp_username() const;
  void set_smtp_username(const std::string& value);
  void set_smtp_username(std::string&& value);
  void set_smtp_username(const char* value);
  void set_smtp_username(const char* value, size_t size);
  std::string* mutable_smtp_username();
  std::string* release_smtp_username();
  void set_allocated_smtp_username(std::string* smtp_username);
  private:
  const std::string& _internal_smtp_username() const;
  void _internal_set_smtp_username(const std::string& value);
  std::string* _internal_mutable_smtp_username();
  public:

  // string smtp_password = 5[json_name = "smtpPassword"];
  void clear_smtp_password();
  const std::string& smtp_password() const;
  void set_smtp_password(const std::string& value);
  void set_smtp_password(std::string&& value);
  void set_smtp_password(const char* value);
  void set_smtp_password(const char* value, size_t size);
  std::string* mutable_smtp_password();
  std::string* release_smtp_password();
  void set_allocated_smtp_password(std::string* smtp_password);
  private:
  const std::string& _internal_smtp_password() const;
  void _internal_set_smtp_password(const std::string& value);
  std::string* _internal_mutable_smtp_password();
  public:

  // uint32 smtp_port = 3[json_name = "smtpPort"];
  void clear_smtp_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 smtp_port() const;
  void set_smtp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_smtp_port() const;
  void _internal_set_smtp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smtp_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smtp_username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smtp_password_;
  ::PROTOBUF_NAMESPACE_ID::uint32 smtp_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetEmailsSetupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse) */ {
 public:
  inline GetEmailsSetupResponse() : GetEmailsSetupResponse(nullptr) {}
  virtual ~GetEmailsSetupResponse();

  GetEmailsSetupResponse(const GetEmailsSetupResponse& from);
  GetEmailsSetupResponse(GetEmailsSetupResponse&& from) noexcept
    : GetEmailsSetupResponse() {
    *this = ::std::move(from);
  }

  inline GetEmailsSetupResponse& operator=(const GetEmailsSetupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmailsSetupResponse& operator=(GetEmailsSetupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEmailsSetupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEmailsSetupResponse* internal_default_instance() {
    return reinterpret_cast<const GetEmailsSetupResponse*>(
               &_GetEmailsSetupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GetEmailsSetupResponse& a, GetEmailsSetupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEmailsSetupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmailsSetupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEmailsSetupResponse* New() const final {
    return CreateMaybeMessage<GetEmailsSetupResponse>(nullptr);
  }

  GetEmailsSetupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEmailsSetupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEmailsSetupResponse& from);
  void MergeFrom(const GetEmailsSetupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmailsSetupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse";
  }
  protected:
  explicit GetEmailsSetupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetEmailsSetupResponse_EmailTemplate EmailTemplate;
  typedef GetEmailsSetupResponse_EmailSender EmailSender;

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 7,
    kWelcomeFieldNumber = 1,
    kAccountVerificationFieldNumber = 2,
    kAccountRecoveryFieldNumber = 3,
    kAccountRecoveredFieldNumber = 4,
    kOtpFieldNumber = 5,
    kSmtpFieldNumber = 6,
  };
  // string project_id = 7[json_name = "projectId"];
  void clear_project_id();
  const std::string& project_id() const;
  void set_project_id(const std::string& value);
  void set_project_id(std::string&& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  std::string* mutable_project_id();
  std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // .depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate welcome = 1[json_name = "welcome"];
  bool has_welcome() const;
  private:
  bool _internal_has_welcome() const;
  public:
  void clear_welcome();
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& welcome() const;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* release_welcome();
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* mutable_welcome();
  void set_allocated_welcome(::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* welcome);
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& _internal_welcome() const;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* _internal_mutable_welcome();
  public:
  void unsafe_arena_set_allocated_welcome(
      ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* welcome);
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* unsafe_arena_release_welcome();

  // .depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate account_verification = 2[json_name = "accountVerification"];
  bool has_account_verification() const;
  private:
  bool _internal_has_account_verification() const;
  public:
  void clear_account_verification();
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& account_verification() const;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* release_account_verification();
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* mutable_account_verification();
  void set_allocated_account_verification(::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_verification);
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& _internal_account_verification() const;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* _internal_mutable_account_verification();
  public:
  void unsafe_arena_set_allocated_account_verification(
      ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_verification);
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* unsafe_arena_release_account_verification();

  // .depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate account_recovery = 3[json_name = "accountRecovery"];
  bool has_account_recovery() const;
  private:
  bool _internal_has_account_recovery() const;
  public:
  void clear_account_recovery();
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& account_recovery() const;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* release_account_recovery();
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* mutable_account_recovery();
  void set_allocated_account_recovery(::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_recovery);
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& _internal_account_recovery() const;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* _internal_mutable_account_recovery();
  public:
  void unsafe_arena_set_allocated_account_recovery(
      ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_recovery);
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* unsafe_arena_release_account_recovery();

  // .depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate account_recovered = 4[json_name = "accountRecovered"];
  bool has_account_recovered() const;
  private:
  bool _internal_has_account_recovered() const;
  public:
  void clear_account_recovered();
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& account_recovered() const;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* release_account_recovered();
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* mutable_account_recovered();
  void set_allocated_account_recovered(::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_recovered);
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& _internal_account_recovered() const;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* _internal_mutable_account_recovered();
  public:
  void unsafe_arena_set_allocated_account_recovered(
      ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_recovered);
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* unsafe_arena_release_account_recovered();

  // .depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate otp = 5[json_name = "otp"];
  bool has_otp() const;
  private:
  bool _internal_has_otp() const;
  public:
  void clear_otp();
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& otp() const;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* release_otp();
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* mutable_otp();
  void set_allocated_otp(::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* otp);
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& _internal_otp() const;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* _internal_mutable_otp();
  public:
  void unsafe_arena_set_allocated_otp(
      ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* otp);
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* unsafe_arena_release_otp();

  // .depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender smtp = 6[json_name = "smtp"];
  bool has_smtp() const;
  private:
  bool _internal_has_smtp() const;
  public:
  void clear_smtp();
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender& smtp() const;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* release_smtp();
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* mutable_smtp();
  void set_allocated_smtp(::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* smtp);
  private:
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender& _internal_smtp() const;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* _internal_mutable_smtp();
  public:
  void unsafe_arena_set_allocated_smtp(
      ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* smtp);
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* unsafe_arena_release_smtp();

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* welcome_;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_verification_;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_recovery_;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_recovered_;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* otp_;
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* smtp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateEmailsSetupRequest_EmailTemplate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate) */ {
 public:
  inline UpdateEmailsSetupRequest_EmailTemplate() : UpdateEmailsSetupRequest_EmailTemplate(nullptr) {}
  virtual ~UpdateEmailsSetupRequest_EmailTemplate();

  UpdateEmailsSetupRequest_EmailTemplate(const UpdateEmailsSetupRequest_EmailTemplate& from);
  UpdateEmailsSetupRequest_EmailTemplate(UpdateEmailsSetupRequest_EmailTemplate&& from) noexcept
    : UpdateEmailsSetupRequest_EmailTemplate() {
    *this = ::std::move(from);
  }

  inline UpdateEmailsSetupRequest_EmailTemplate& operator=(const UpdateEmailsSetupRequest_EmailTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEmailsSetupRequest_EmailTemplate& operator=(UpdateEmailsSetupRequest_EmailTemplate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEmailsSetupRequest_EmailTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateEmailsSetupRequest_EmailTemplate* internal_default_instance() {
    return reinterpret_cast<const UpdateEmailsSetupRequest_EmailTemplate*>(
               &_UpdateEmailsSetupRequest_EmailTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(UpdateEmailsSetupRequest_EmailTemplate& a, UpdateEmailsSetupRequest_EmailTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEmailsSetupRequest_EmailTemplate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEmailsSetupRequest_EmailTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEmailsSetupRequest_EmailTemplate* New() const final {
    return CreateMaybeMessage<UpdateEmailsSetupRequest_EmailTemplate>(nullptr);
  }

  UpdateEmailsSetupRequest_EmailTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEmailsSetupRequest_EmailTemplate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEmailsSetupRequest_EmailTemplate& from);
  void MergeFrom(const UpdateEmailsSetupRequest_EmailTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEmailsSetupRequest_EmailTemplate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate";
  }
  protected:
  explicit UpdateEmailsSetupRequest_EmailTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kSubjectFieldNumber = 2,
  };
  // string content = 1[json_name = "content"];
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string subject = 2[json_name = "subject"];
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateEmailsSetupRequest_EmailSender PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender) */ {
 public:
  inline UpdateEmailsSetupRequest_EmailSender() : UpdateEmailsSetupRequest_EmailSender(nullptr) {}
  virtual ~UpdateEmailsSetupRequest_EmailSender();

  UpdateEmailsSetupRequest_EmailSender(const UpdateEmailsSetupRequest_EmailSender& from);
  UpdateEmailsSetupRequest_EmailSender(UpdateEmailsSetupRequest_EmailSender&& from) noexcept
    : UpdateEmailsSetupRequest_EmailSender() {
    *this = ::std::move(from);
  }

  inline UpdateEmailsSetupRequest_EmailSender& operator=(const UpdateEmailsSetupRequest_EmailSender& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEmailsSetupRequest_EmailSender& operator=(UpdateEmailsSetupRequest_EmailSender&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEmailsSetupRequest_EmailSender& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateEmailsSetupRequest_EmailSender* internal_default_instance() {
    return reinterpret_cast<const UpdateEmailsSetupRequest_EmailSender*>(
               &_UpdateEmailsSetupRequest_EmailSender_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(UpdateEmailsSetupRequest_EmailSender& a, UpdateEmailsSetupRequest_EmailSender& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEmailsSetupRequest_EmailSender* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEmailsSetupRequest_EmailSender* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEmailsSetupRequest_EmailSender* New() const final {
    return CreateMaybeMessage<UpdateEmailsSetupRequest_EmailSender>(nullptr);
  }

  UpdateEmailsSetupRequest_EmailSender* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEmailsSetupRequest_EmailSender>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEmailsSetupRequest_EmailSender& from);
  void MergeFrom(const UpdateEmailsSetupRequest_EmailSender& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEmailsSetupRequest_EmailSender* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender";
  }
  protected:
  explicit UpdateEmailsSetupRequest_EmailSender(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailAddressFieldNumber = 1,
    kSmtpHostFieldNumber = 2,
    kSmtpUsernameFieldNumber = 4,
    kSmtpPasswordFieldNumber = 5,
    kSmtpPortFieldNumber = 3,
  };
  // string email_address = 1[json_name = "emailAddress"];
  void clear_email_address();
  const std::string& email_address() const;
  void set_email_address(const std::string& value);
  void set_email_address(std::string&& value);
  void set_email_address(const char* value);
  void set_email_address(const char* value, size_t size);
  std::string* mutable_email_address();
  std::string* release_email_address();
  void set_allocated_email_address(std::string* email_address);
  private:
  const std::string& _internal_email_address() const;
  void _internal_set_email_address(const std::string& value);
  std::string* _internal_mutable_email_address();
  public:

  // string smtp_host = 2[json_name = "smtpHost"];
  void clear_smtp_host();
  const std::string& smtp_host() const;
  void set_smtp_host(const std::string& value);
  void set_smtp_host(std::string&& value);
  void set_smtp_host(const char* value);
  void set_smtp_host(const char* value, size_t size);
  std::string* mutable_smtp_host();
  std::string* release_smtp_host();
  void set_allocated_smtp_host(std::string* smtp_host);
  private:
  const std::string& _internal_smtp_host() const;
  void _internal_set_smtp_host(const std::string& value);
  std::string* _internal_mutable_smtp_host();
  public:

  // string smtp_username = 4[json_name = "smtpUsername"];
  void clear_smtp_username();
  const std::string& smtp_username() const;
  void set_smtp_username(const std::string& value);
  void set_smtp_username(std::string&& value);
  void set_smtp_username(const char* value);
  void set_smtp_username(const char* value, size_t size);
  std::string* mutable_smtp_username();
  std::string* release_smtp_username();
  void set_allocated_smtp_username(std::string* smtp_username);
  private:
  const std::string& _internal_smtp_username() const;
  void _internal_set_smtp_username(const std::string& value);
  std::string* _internal_mutable_smtp_username();
  public:

  // string smtp_password = 5[json_name = "smtpPassword"];
  void clear_smtp_password();
  const std::string& smtp_password() const;
  void set_smtp_password(const std::string& value);
  void set_smtp_password(std::string&& value);
  void set_smtp_password(const char* value);
  void set_smtp_password(const char* value, size_t size);
  std::string* mutable_smtp_password();
  std::string* release_smtp_password();
  void set_allocated_smtp_password(std::string* smtp_password);
  private:
  const std::string& _internal_smtp_password() const;
  void _internal_set_smtp_password(const std::string& value);
  std::string* _internal_mutable_smtp_password();
  public:

  // uint32 smtp_port = 3[json_name = "smtpPort"];
  void clear_smtp_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 smtp_port() const;
  void set_smtp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_smtp_port() const;
  void _internal_set_smtp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smtp_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smtp_username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smtp_password_;
  ::PROTOBUF_NAMESPACE_ID::uint32 smtp_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateEmailsSetupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest) */ {
 public:
  inline UpdateEmailsSetupRequest() : UpdateEmailsSetupRequest(nullptr) {}
  virtual ~UpdateEmailsSetupRequest();

  UpdateEmailsSetupRequest(const UpdateEmailsSetupRequest& from);
  UpdateEmailsSetupRequest(UpdateEmailsSetupRequest&& from) noexcept
    : UpdateEmailsSetupRequest() {
    *this = ::std::move(from);
  }

  inline UpdateEmailsSetupRequest& operator=(const UpdateEmailsSetupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEmailsSetupRequest& operator=(UpdateEmailsSetupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEmailsSetupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateEmailsSetupRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateEmailsSetupRequest*>(
               &_UpdateEmailsSetupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(UpdateEmailsSetupRequest& a, UpdateEmailsSetupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEmailsSetupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEmailsSetupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEmailsSetupRequest* New() const final {
    return CreateMaybeMessage<UpdateEmailsSetupRequest>(nullptr);
  }

  UpdateEmailsSetupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEmailsSetupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEmailsSetupRequest& from);
  void MergeFrom(const UpdateEmailsSetupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEmailsSetupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest";
  }
  protected:
  explicit UpdateEmailsSetupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateEmailsSetupRequest_EmailTemplate EmailTemplate;
  typedef UpdateEmailsSetupRequest_EmailSender EmailSender;

  // accessors -------------------------------------------------------

  enum : int {
    kWelcomeFieldNumber = 1,
    kAccountVerificationFieldNumber = 2,
    kAccountRecoveryFieldNumber = 3,
    kAccountRecoveredFieldNumber = 4,
    kOtpFieldNumber = 5,
    kSmtpFieldNumber = 6,
  };
  // .depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate welcome = 1[json_name = "welcome"];
  bool has_welcome() const;
  private:
  bool _internal_has_welcome() const;
  public:
  void clear_welcome();
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& welcome() const;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* release_welcome();
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* mutable_welcome();
  void set_allocated_welcome(::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* welcome);
  private:
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& _internal_welcome() const;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* _internal_mutable_welcome();
  public:
  void unsafe_arena_set_allocated_welcome(
      ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* welcome);
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* unsafe_arena_release_welcome();

  // .depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate account_verification = 2[json_name = "accountVerification"];
  bool has_account_verification() const;
  private:
  bool _internal_has_account_verification() const;
  public:
  void clear_account_verification();
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& account_verification() const;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* release_account_verification();
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* mutable_account_verification();
  void set_allocated_account_verification(::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_verification);
  private:
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& _internal_account_verification() const;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* _internal_mutable_account_verification();
  public:
  void unsafe_arena_set_allocated_account_verification(
      ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_verification);
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* unsafe_arena_release_account_verification();

  // .depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate account_recovery = 3[json_name = "accountRecovery"];
  bool has_account_recovery() const;
  private:
  bool _internal_has_account_recovery() const;
  public:
  void clear_account_recovery();
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& account_recovery() const;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* release_account_recovery();
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* mutable_account_recovery();
  void set_allocated_account_recovery(::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_recovery);
  private:
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& _internal_account_recovery() const;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* _internal_mutable_account_recovery();
  public:
  void unsafe_arena_set_allocated_account_recovery(
      ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_recovery);
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* unsafe_arena_release_account_recovery();

  // .depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate account_recovered = 4[json_name = "accountRecovered"];
  bool has_account_recovered() const;
  private:
  bool _internal_has_account_recovered() const;
  public:
  void clear_account_recovered();
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& account_recovered() const;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* release_account_recovered();
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* mutable_account_recovered();
  void set_allocated_account_recovered(::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_recovered);
  private:
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& _internal_account_recovered() const;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* _internal_mutable_account_recovered();
  public:
  void unsafe_arena_set_allocated_account_recovered(
      ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_recovered);
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* unsafe_arena_release_account_recovered();

  // .depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate otp = 5[json_name = "otp"];
  bool has_otp() const;
  private:
  bool _internal_has_otp() const;
  public:
  void clear_otp();
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& otp() const;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* release_otp();
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* mutable_otp();
  void set_allocated_otp(::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* otp);
  private:
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& _internal_otp() const;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* _internal_mutable_otp();
  public:
  void unsafe_arena_set_allocated_otp(
      ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* otp);
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* unsafe_arena_release_otp();

  // .depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender smtp = 6[json_name = "smtp"];
  bool has_smtp() const;
  private:
  bool _internal_has_smtp() const;
  public:
  void clear_smtp();
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender& smtp() const;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* release_smtp();
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* mutable_smtp();
  void set_allocated_smtp(::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* smtp);
  private:
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender& _internal_smtp() const;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* _internal_mutable_smtp();
  public:
  void unsafe_arena_set_allocated_smtp(
      ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* smtp);
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* unsafe_arena_release_smtp();

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* welcome_;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_verification_;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_recovery_;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_recovered_;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* otp_;
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* smtp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UpdateEmailsSetupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupResponse) */ {
 public:
  inline UpdateEmailsSetupResponse() : UpdateEmailsSetupResponse(nullptr) {}
  virtual ~UpdateEmailsSetupResponse();

  UpdateEmailsSetupResponse(const UpdateEmailsSetupResponse& from);
  UpdateEmailsSetupResponse(UpdateEmailsSetupResponse&& from) noexcept
    : UpdateEmailsSetupResponse() {
    *this = ::std::move(from);
  }

  inline UpdateEmailsSetupResponse& operator=(const UpdateEmailsSetupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEmailsSetupResponse& operator=(UpdateEmailsSetupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEmailsSetupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateEmailsSetupResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateEmailsSetupResponse*>(
               &_UpdateEmailsSetupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(UpdateEmailsSetupResponse& a, UpdateEmailsSetupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEmailsSetupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEmailsSetupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEmailsSetupResponse* New() const final {
    return CreateMaybeMessage<UpdateEmailsSetupResponse>(nullptr);
  }

  UpdateEmailsSetupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEmailsSetupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEmailsSetupResponse& from);
  void MergeFrom(const UpdateEmailsSetupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEmailsSetupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupResponse";
  }
  protected:
  explicit UpdateEmailsSetupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetUserBaseStatisticsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest) */ {
 public:
  inline GetUserBaseStatisticsRequest() : GetUserBaseStatisticsRequest(nullptr) {}
  virtual ~GetUserBaseStatisticsRequest();

  GetUserBaseStatisticsRequest(const GetUserBaseStatisticsRequest& from);
  GetUserBaseStatisticsRequest(GetUserBaseStatisticsRequest&& from) noexcept
    : GetUserBaseStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetUserBaseStatisticsRequest& operator=(const GetUserBaseStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserBaseStatisticsRequest& operator=(GetUserBaseStatisticsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserBaseStatisticsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserBaseStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserBaseStatisticsRequest*>(
               &_GetUserBaseStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(GetUserBaseStatisticsRequest& a, GetUserBaseStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserBaseStatisticsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserBaseStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserBaseStatisticsRequest* New() const final {
    return CreateMaybeMessage<GetUserBaseStatisticsRequest>(nullptr);
  }

  GetUserBaseStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserBaseStatisticsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserBaseStatisticsRequest& from);
  void MergeFrom(const GetUserBaseStatisticsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserBaseStatisticsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest";
  }
  protected:
  explicit GetUserBaseStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLifetimeStartAtFieldNumber = 2,
    kLifetimeEndAtFieldNumber = 3,
    kDaysBeforeFieldNumber = 1,
  };
  // .google.protobuf.Timestamp lifetime_start_at = 2[json_name = "lifetimeStartAt"];
  bool has_lifetime_start_at() const;
  private:
  bool _internal_has_lifetime_start_at() const;
  public:
  void clear_lifetime_start_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& lifetime_start_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_lifetime_start_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lifetime_start_at();
  void set_allocated_lifetime_start_at(PROTOBUF_NAMESPACE_ID::Timestamp* lifetime_start_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lifetime_start_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lifetime_start_at();
  public:
  void unsafe_arena_set_allocated_lifetime_start_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* lifetime_start_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lifetime_start_at();

  // .google.protobuf.Timestamp lifetime_end_at = 3[json_name = "lifetimeEndAt"];
  bool has_lifetime_end_at() const;
  private:
  bool _internal_has_lifetime_end_at() const;
  public:
  void clear_lifetime_end_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& lifetime_end_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_lifetime_end_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lifetime_end_at();
  void set_allocated_lifetime_end_at(PROTOBUF_NAMESPACE_ID::Timestamp* lifetime_end_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lifetime_end_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lifetime_end_at();
  public:
  void unsafe_arena_set_allocated_lifetime_end_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* lifetime_end_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lifetime_end_at();

  // uint32 days_before = 1[json_name = "daysBefore"];
  void clear_days_before();
  ::PROTOBUF_NAMESPACE_ID::uint32 days_before() const;
  void set_days_before(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_days_before() const;
  void _internal_set_days_before(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* lifetime_start_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* lifetime_end_at_;
  ::PROTOBUF_NAMESPACE_ID::uint32 days_before_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse();
  explicit GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse& other);
  static const GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse*>(&_GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[82];
  }

  public:
};

// -------------------------------------------------------------------

class GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse();
  explicit GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse& other);
  static const GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse*>(&_GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[83];
  }

  public:
};

// -------------------------------------------------------------------

class GetUserBaseStatisticsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse) */ {
 public:
  inline GetUserBaseStatisticsResponse() : GetUserBaseStatisticsResponse(nullptr) {}
  virtual ~GetUserBaseStatisticsResponse();

  GetUserBaseStatisticsResponse(const GetUserBaseStatisticsResponse& from);
  GetUserBaseStatisticsResponse(GetUserBaseStatisticsResponse&& from) noexcept
    : GetUserBaseStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetUserBaseStatisticsResponse& operator=(const GetUserBaseStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserBaseStatisticsResponse& operator=(GetUserBaseStatisticsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserBaseStatisticsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserBaseStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserBaseStatisticsResponse*>(
               &_GetUserBaseStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(GetUserBaseStatisticsResponse& a, GetUserBaseStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserBaseStatisticsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserBaseStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserBaseStatisticsResponse* New() const final {
    return CreateMaybeMessage<GetUserBaseStatisticsResponse>(nullptr);
  }

  GetUserBaseStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserBaseStatisticsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserBaseStatisticsResponse& from);
  void MergeFrom(const GetUserBaseStatisticsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserBaseStatisticsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse";
  }
  protected:
  explicit GetUserBaseStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto);
    return ::descriptor_table_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUsersPerDayFieldNumber = 2,
    kSessionsPerDayFieldNumber = 3,
    kTotalUsersFieldNumber = 1,
    kTotalActiveUsersFieldNumber = 4,
    kTotalLifetimeUsedFieldNumber = 5,
  };
  // map<string, int32> users_per_day = 2[json_name = "usersPerDay"];
  int users_per_day_size() const;
  private:
  int _internal_users_per_day_size() const;
  public:
  void clear_users_per_day();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_users_per_day() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_users_per_day();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      users_per_day() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_users_per_day();

  // map<string, int32> sessions_per_day = 3[json_name = "sessionsPerDay"];
  int sessions_per_day_size() const;
  private:
  int _internal_sessions_per_day_size() const;
  public:
  void clear_sessions_per_day();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_sessions_per_day() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_sessions_per_day();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      sessions_per_day() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_sessions_per_day();

  // int32 total_users = 1[json_name = "totalUsers"];
  void clear_total_users();
  ::PROTOBUF_NAMESPACE_ID::int32 total_users() const;
  void set_total_users(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_users() const;
  void _internal_set_total_users(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_active_users = 4[json_name = "totalActiveUsers"];
  void clear_total_active_users();
  ::PROTOBUF_NAMESPACE_ID::int32 total_active_users() const;
  void set_total_active_users(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_active_users() const;
  void _internal_set_total_active_users(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double total_lifetime_used = 5[json_name = "totalLifetimeUsed"];
  void clear_total_lifetime_used();
  double total_lifetime_used() const;
  void set_total_lifetime_used(double value);
  private:
  double _internal_total_lifetime_used() const;
  void _internal_set_total_lifetime_used(double value);
  public:

  // @@protoc_insertion_point(class_scope:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetUserBaseStatisticsResponse_UsersPerDayEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > users_per_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetUserBaseStatisticsResponse_SessionsPerDayEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > sessions_per_day_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_users_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_active_users_;
  double total_lifetime_used_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateIdentityRequest

// .google.protobuf.Struct data = 1[json_name = "data"];
inline bool CreateIdentityRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool CreateIdentityRequest::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& CreateIdentityRequest::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& CreateIdentityRequest::data() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.data)
  return _internal_data();
}
inline void CreateIdentityRequest::unsafe_arena_set_allocated_data(
    PROTOBUF_NAMESPACE_ID::Struct* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.data)
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateIdentityRequest::release_data() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateIdentityRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.data)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateIdentityRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateIdentityRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.data)
  return _internal_mutable_data();
}
inline void CreateIdentityRequest::set_allocated_data(PROTOBUF_NAMESPACE_ID::Struct* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.data)
}

// string connection_id = 2[json_name = "connectionId"];
inline void CreateIdentityRequest::clear_connection_id() {
  connection_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateIdentityRequest::connection_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.connection_id)
  return _internal_connection_id();
}
inline void CreateIdentityRequest::set_connection_id(const std::string& value) {
  _internal_set_connection_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.connection_id)
}
inline std::string* CreateIdentityRequest::mutable_connection_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.connection_id)
  return _internal_mutable_connection_id();
}
inline const std::string& CreateIdentityRequest::_internal_connection_id() const {
  return connection_id_.Get();
}
inline void CreateIdentityRequest::_internal_set_connection_id(const std::string& value) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateIdentityRequest::set_connection_id(std::string&& value) {
  
  connection_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.connection_id)
}
inline void CreateIdentityRequest::set_connection_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.connection_id)
}
inline void CreateIdentityRequest::set_connection_id(const char* value,
    size_t size) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.connection_id)
}
inline std::string* CreateIdentityRequest::_internal_mutable_connection_id() {
  
  return connection_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateIdentityRequest::release_connection_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.connection_id)
  return connection_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateIdentityRequest::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    
  } else {
    
  }
  connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.connection_id)
}

// string schema_id = 3[json_name = "schemaId"];
inline void CreateIdentityRequest::clear_schema_id() {
  schema_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateIdentityRequest::schema_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.schema_id)
  return _internal_schema_id();
}
inline void CreateIdentityRequest::set_schema_id(const std::string& value) {
  _internal_set_schema_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.schema_id)
}
inline std::string* CreateIdentityRequest::mutable_schema_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.schema_id)
  return _internal_mutable_schema_id();
}
inline const std::string& CreateIdentityRequest::_internal_schema_id() const {
  return schema_id_.Get();
}
inline void CreateIdentityRequest::_internal_set_schema_id(const std::string& value) {
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateIdentityRequest::set_schema_id(std::string&& value) {
  
  schema_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.schema_id)
}
inline void CreateIdentityRequest::set_schema_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.schema_id)
}
inline void CreateIdentityRequest::set_schema_id(const char* value,
    size_t size) {
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.schema_id)
}
inline std::string* CreateIdentityRequest::_internal_mutable_schema_id() {
  
  return schema_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateIdentityRequest::release_schema_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.schema_id)
  return schema_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateIdentityRequest::set_allocated_schema_id(std::string* schema_id) {
  if (schema_id != nullptr) {
    
  } else {
    
  }
  schema_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateIdentityRequest.schema_id)
}

// -------------------------------------------------------------------

// CreateIdentityResponse

// string identity_id = 1[json_name = "identityId"];
inline void CreateIdentityResponse::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateIdentityResponse::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateIdentityResponse.identity_id)
  return _internal_identity_id();
}
inline void CreateIdentityResponse::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateIdentityResponse.identity_id)
}
inline std::string* CreateIdentityResponse::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateIdentityResponse.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& CreateIdentityResponse::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void CreateIdentityResponse::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateIdentityResponse::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateIdentityResponse.identity_id)
}
inline void CreateIdentityResponse::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateIdentityResponse.identity_id)
}
inline void CreateIdentityResponse::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateIdentityResponse.identity_id)
}
inline std::string* CreateIdentityResponse::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateIdentityResponse::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateIdentityResponse.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateIdentityResponse::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateIdentityResponse.identity_id)
}

// -------------------------------------------------------------------

// GetIdentitiesRequest

// int32 page_size = 1[json_name = "pageSize"];
inline void GetIdentitiesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetIdentitiesRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetIdentitiesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest.page_size)
  return _internal_page_size();
}
inline void GetIdentitiesRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void GetIdentitiesRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest.page_size)
}

// string page_token = 2[json_name = "pageToken"];
inline void GetIdentitiesRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentitiesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest.page_token)
  return _internal_page_token();
}
inline void GetIdentitiesRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest.page_token)
}
inline std::string* GetIdentitiesRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& GetIdentitiesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void GetIdentitiesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentitiesRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest.page_token)
}
inline void GetIdentitiesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest.page_token)
}
inline void GetIdentitiesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest.page_token)
}
inline std::string* GetIdentitiesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentitiesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentitiesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesRequest.page_token)
}

// -------------------------------------------------------------------

// GetIdentitiesResponse_Identity

// string identity_id = 1[json_name = "identityId"];
inline void GetIdentitiesResponse_Identity::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentitiesResponse_Identity::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.identity_id)
  return _internal_identity_id();
}
inline void GetIdentitiesResponse_Identity::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.identity_id)
}
inline std::string* GetIdentitiesResponse_Identity::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetIdentitiesResponse_Identity::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetIdentitiesResponse_Identity::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentitiesResponse_Identity::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.identity_id)
}
inline void GetIdentitiesResponse_Identity::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.identity_id)
}
inline void GetIdentitiesResponse_Identity::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.identity_id)
}
inline std::string* GetIdentitiesResponse_Identity::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentitiesResponse_Identity::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentitiesResponse_Identity::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.identity_id)
}

// .google.protobuf.Timestamp created_at = 2[json_name = "createdAt"];
inline bool GetIdentitiesResponse_Identity::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetIdentitiesResponse_Identity::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentitiesResponse_Identity::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentitiesResponse_Identity::created_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.created_at)
  return _internal_created_at();
}
inline void GetIdentitiesResponse_Identity::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesResponse_Identity::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesResponse_Identity::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesResponse_Identity::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesResponse_Identity::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.created_at)
  return _internal_mutable_created_at();
}
inline void GetIdentitiesResponse_Identity::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.created_at)
}

// .google.protobuf.Timestamp updated_at = 3[json_name = "updatedAt"];
inline bool GetIdentitiesResponse_Identity::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool GetIdentitiesResponse_Identity::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentitiesResponse_Identity::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentitiesResponse_Identity::updated_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.updated_at)
  return _internal_updated_at();
}
inline void GetIdentitiesResponse_Identity::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesResponse_Identity::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesResponse_Identity::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesResponse_Identity::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesResponse_Identity::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.updated_at)
  return _internal_mutable_updated_at();
}
inline void GetIdentitiesResponse_Identity::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.updated_at)
}

// string main_identifier = 4[json_name = "mainIdentifier"];
inline void GetIdentitiesResponse_Identity::clear_main_identifier() {
  main_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentitiesResponse_Identity::main_identifier() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.main_identifier)
  return _internal_main_identifier();
}
inline void GetIdentitiesResponse_Identity::set_main_identifier(const std::string& value) {
  _internal_set_main_identifier(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.main_identifier)
}
inline std::string* GetIdentitiesResponse_Identity::mutable_main_identifier() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.main_identifier)
  return _internal_mutable_main_identifier();
}
inline const std::string& GetIdentitiesResponse_Identity::_internal_main_identifier() const {
  return main_identifier_.Get();
}
inline void GetIdentitiesResponse_Identity::_internal_set_main_identifier(const std::string& value) {
  
  main_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentitiesResponse_Identity::set_main_identifier(std::string&& value) {
  
  main_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.main_identifier)
}
inline void GetIdentitiesResponse_Identity::set_main_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  main_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.main_identifier)
}
inline void GetIdentitiesResponse_Identity::set_main_identifier(const char* value,
    size_t size) {
  
  main_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.main_identifier)
}
inline std::string* GetIdentitiesResponse_Identity::_internal_mutable_main_identifier() {
  
  return main_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentitiesResponse_Identity::release_main_identifier() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.main_identifier)
  return main_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentitiesResponse_Identity::set_allocated_main_identifier(std::string* main_identifier) {
  if (main_identifier != nullptr) {
    
  } else {
    
  }
  main_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.main_identifier)
}

// string schema_id = 5[json_name = "schemaId"];
inline void GetIdentitiesResponse_Identity::clear_schema_id() {
  schema_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentitiesResponse_Identity::schema_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.schema_id)
  return _internal_schema_id();
}
inline void GetIdentitiesResponse_Identity::set_schema_id(const std::string& value) {
  _internal_set_schema_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.schema_id)
}
inline std::string* GetIdentitiesResponse_Identity::mutable_schema_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.schema_id)
  return _internal_mutable_schema_id();
}
inline const std::string& GetIdentitiesResponse_Identity::_internal_schema_id() const {
  return schema_id_.Get();
}
inline void GetIdentitiesResponse_Identity::_internal_set_schema_id(const std::string& value) {
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentitiesResponse_Identity::set_schema_id(std::string&& value) {
  
  schema_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.schema_id)
}
inline void GetIdentitiesResponse_Identity::set_schema_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.schema_id)
}
inline void GetIdentitiesResponse_Identity::set_schema_id(const char* value,
    size_t size) {
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.schema_id)
}
inline std::string* GetIdentitiesResponse_Identity::_internal_mutable_schema_id() {
  
  return schema_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentitiesResponse_Identity::release_schema_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.schema_id)
  return schema_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentitiesResponse_Identity::set_allocated_schema_id(std::string* schema_id) {
  if (schema_id != nullptr) {
    
  } else {
    
  }
  schema_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.schema_id)
}

// .depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Lock lock = 6[json_name = "lock"];
inline void GetIdentitiesResponse_Identity::clear_lock() {
  lock_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Lock GetIdentitiesResponse_Identity::_internal_lock() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Lock >(lock_);
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Lock GetIdentitiesResponse_Identity::lock() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.lock)
  return _internal_lock();
}
inline void GetIdentitiesResponse_Identity::_internal_set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Lock value) {
  
  lock_ = value;
}
inline void GetIdentitiesResponse_Identity::set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Lock value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity.lock)
}

// -------------------------------------------------------------------

// GetIdentitiesResponse

// repeated .depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.Identity identities = 1[json_name = "identities"];
inline int GetIdentitiesResponse::_internal_identities_size() const {
  return identities_.size();
}
inline int GetIdentitiesResponse::identities_size() const {
  return _internal_identities_size();
}
inline void GetIdentitiesResponse::clear_identities() {
  identities_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity* GetIdentitiesResponse::mutable_identities(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.identities)
  return identities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity >*
GetIdentitiesResponse::mutable_identities() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.identities)
  return &identities_;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity& GetIdentitiesResponse::_internal_identities(int index) const {
  return identities_.Get(index);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity& GetIdentitiesResponse::identities(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.identities)
  return _internal_identities(index);
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity* GetIdentitiesResponse::_internal_add_identities() {
  return identities_.Add();
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity* GetIdentitiesResponse::add_identities() {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.identities)
  return _internal_add_identities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Identity >&
GetIdentitiesResponse::identities() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.identities)
  return identities_;
}

// string next_page_token = 2[json_name = "nextPageToken"];
inline void GetIdentitiesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentitiesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.next_page_token)
  return _internal_next_page_token();
}
inline void GetIdentitiesResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.next_page_token)
}
inline std::string* GetIdentitiesResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& GetIdentitiesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void GetIdentitiesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentitiesResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.next_page_token)
}
inline void GetIdentitiesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.next_page_token)
}
inline void GetIdentitiesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.next_page_token)
}
inline std::string* GetIdentitiesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentitiesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentitiesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.next_page_token)
}

// int32 total_size = 3[json_name = "totalSize"];
inline void GetIdentitiesResponse::clear_total_size() {
  total_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetIdentitiesResponse::_internal_total_size() const {
  return total_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetIdentitiesResponse::total_size() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.total_size)
  return _internal_total_size();
}
inline void GetIdentitiesResponse::_internal_set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_size_ = value;
}
inline void GetIdentitiesResponse::set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesResponse.total_size)
}

// -------------------------------------------------------------------

// GetIdentityRequest

// string identity_id = 2[json_name = "identityId"];
inline void GetIdentityRequest::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityRequest::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityRequest.identity_id)
  return _internal_identity_id();
}
inline void GetIdentityRequest::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityRequest.identity_id)
}
inline std::string* GetIdentityRequest::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityRequest.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetIdentityRequest::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetIdentityRequest::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityRequest::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityRequest.identity_id)
}
inline void GetIdentityRequest::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityRequest.identity_id)
}
inline void GetIdentityRequest::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityRequest.identity_id)
}
inline std::string* GetIdentityRequest::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityRequest::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityRequest.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityRequest::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityRequest.identity_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetIdentityResponse

// string identity_id = 1[json_name = "identityId"];
inline void GetIdentityResponse::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityResponse::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.identity_id)
  return _internal_identity_id();
}
inline void GetIdentityResponse::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.identity_id)
}
inline std::string* GetIdentityResponse::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetIdentityResponse::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetIdentityResponse::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityResponse::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.identity_id)
}
inline void GetIdentityResponse::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.identity_id)
}
inline void GetIdentityResponse::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.identity_id)
}
inline std::string* GetIdentityResponse::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityResponse::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityResponse::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.identity_id)
}

// .google.protobuf.Timestamp created_at = 2[json_name = "createdAt"];
inline bool GetIdentityResponse::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetIdentityResponse::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentityResponse::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentityResponse::created_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.created_at)
  return _internal_created_at();
}
inline void GetIdentityResponse::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityResponse::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityResponse::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityResponse::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityResponse::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.created_at)
  return _internal_mutable_created_at();
}
inline void GetIdentityResponse::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.created_at)
}

// .google.protobuf.Timestamp updated_at = 3[json_name = "updatedAt"];
inline bool GetIdentityResponse::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool GetIdentityResponse::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentityResponse::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentityResponse::updated_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.updated_at)
  return _internal_updated_at();
}
inline void GetIdentityResponse::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityResponse::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityResponse::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityResponse::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityResponse::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.updated_at)
  return _internal_mutable_updated_at();
}
inline void GetIdentityResponse::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.updated_at)
}

// string main_identifier = 4[json_name = "mainIdentifier"];
inline void GetIdentityResponse::clear_main_identifier() {
  main_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityResponse::main_identifier() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.main_identifier)
  return _internal_main_identifier();
}
inline void GetIdentityResponse::set_main_identifier(const std::string& value) {
  _internal_set_main_identifier(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.main_identifier)
}
inline std::string* GetIdentityResponse::mutable_main_identifier() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.main_identifier)
  return _internal_mutable_main_identifier();
}
inline const std::string& GetIdentityResponse::_internal_main_identifier() const {
  return main_identifier_.Get();
}
inline void GetIdentityResponse::_internal_set_main_identifier(const std::string& value) {
  
  main_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityResponse::set_main_identifier(std::string&& value) {
  
  main_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.main_identifier)
}
inline void GetIdentityResponse::set_main_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  main_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.main_identifier)
}
inline void GetIdentityResponse::set_main_identifier(const char* value,
    size_t size) {
  
  main_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.main_identifier)
}
inline std::string* GetIdentityResponse::_internal_mutable_main_identifier() {
  
  return main_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityResponse::release_main_identifier() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.main_identifier)
  return main_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityResponse::set_allocated_main_identifier(std::string* main_identifier) {
  if (main_identifier != nullptr) {
    
  } else {
    
  }
  main_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.main_identifier)
}

// string profile_id = 5[json_name = "profileId"];
inline void GetIdentityResponse::clear_profile_id() {
  profile_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityResponse::profile_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.profile_id)
  return _internal_profile_id();
}
inline void GetIdentityResponse::set_profile_id(const std::string& value) {
  _internal_set_profile_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.profile_id)
}
inline std::string* GetIdentityResponse::mutable_profile_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.profile_id)
  return _internal_mutable_profile_id();
}
inline const std::string& GetIdentityResponse::_internal_profile_id() const {
  return profile_id_.Get();
}
inline void GetIdentityResponse::_internal_set_profile_id(const std::string& value) {
  
  profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityResponse::set_profile_id(std::string&& value) {
  
  profile_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.profile_id)
}
inline void GetIdentityResponse::set_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.profile_id)
}
inline void GetIdentityResponse::set_profile_id(const char* value,
    size_t size) {
  
  profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.profile_id)
}
inline std::string* GetIdentityResponse::_internal_mutable_profile_id() {
  
  return profile_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityResponse::release_profile_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.profile_id)
  return profile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityResponse::set_allocated_profile_id(std::string* profile_id) {
  if (profile_id != nullptr) {
    
  } else {
    
  }
  profile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.profile_id)
}

// repeated string addresses_ids = 6[json_name = "addressesIds"];
inline int GetIdentityResponse::_internal_addresses_ids_size() const {
  return addresses_ids_.size();
}
inline int GetIdentityResponse::addresses_ids_size() const {
  return _internal_addresses_ids_size();
}
inline void GetIdentityResponse::clear_addresses_ids() {
  addresses_ids_.Clear();
}
inline std::string* GetIdentityResponse::add_addresses_ids() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
  return _internal_add_addresses_ids();
}
inline const std::string& GetIdentityResponse::_internal_addresses_ids(int index) const {
  return addresses_ids_.Get(index);
}
inline const std::string& GetIdentityResponse::addresses_ids(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
  return _internal_addresses_ids(index);
}
inline std::string* GetIdentityResponse::mutable_addresses_ids(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
  return addresses_ids_.Mutable(index);
}
inline void GetIdentityResponse::set_addresses_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
  addresses_ids_.Mutable(index)->assign(value);
}
inline void GetIdentityResponse::set_addresses_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
  addresses_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetIdentityResponse::set_addresses_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
}
inline void GetIdentityResponse::set_addresses_ids(int index, const char* value, size_t size) {
  addresses_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
}
inline std::string* GetIdentityResponse::_internal_add_addresses_ids() {
  return addresses_ids_.Add();
}
inline void GetIdentityResponse::add_addresses_ids(const std::string& value) {
  addresses_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
}
inline void GetIdentityResponse::add_addresses_ids(std::string&& value) {
  addresses_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
}
inline void GetIdentityResponse::add_addresses_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
}
inline void GetIdentityResponse::add_addresses_ids(const char* value, size_t size) {
  addresses_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetIdentityResponse::addresses_ids() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
  return addresses_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetIdentityResponse::mutable_addresses_ids() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.addresses_ids)
  return &addresses_ids_;
}

// map<string, string> credentials_ids = 7[json_name = "credentialsIds"];
inline int GetIdentityResponse::_internal_credentials_ids_size() const {
  return credentials_ids_.size();
}
inline int GetIdentityResponse::credentials_ids_size() const {
  return _internal_credentials_ids_size();
}
inline void GetIdentityResponse::clear_credentials_ids() {
  credentials_ids_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetIdentityResponse::_internal_credentials_ids() const {
  return credentials_ids_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetIdentityResponse::credentials_ids() const {
  // @@protoc_insertion_point(field_map:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.credentials_ids)
  return _internal_credentials_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetIdentityResponse::_internal_mutable_credentials_ids() {
  return credentials_ids_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetIdentityResponse::mutable_credentials_ids() {
  // @@protoc_insertion_point(field_mutable_map:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.credentials_ids)
  return _internal_mutable_credentials_ids();
}

// string schema_id = 8[json_name = "schemaId"];
inline void GetIdentityResponse::clear_schema_id() {
  schema_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityResponse::schema_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.schema_id)
  return _internal_schema_id();
}
inline void GetIdentityResponse::set_schema_id(const std::string& value) {
  _internal_set_schema_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.schema_id)
}
inline std::string* GetIdentityResponse::mutable_schema_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.schema_id)
  return _internal_mutable_schema_id();
}
inline const std::string& GetIdentityResponse::_internal_schema_id() const {
  return schema_id_.Get();
}
inline void GetIdentityResponse::_internal_set_schema_id(const std::string& value) {
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityResponse::set_schema_id(std::string&& value) {
  
  schema_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.schema_id)
}
inline void GetIdentityResponse::set_schema_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.schema_id)
}
inline void GetIdentityResponse::set_schema_id(const char* value,
    size_t size) {
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.schema_id)
}
inline std::string* GetIdentityResponse::_internal_mutable_schema_id() {
  
  return schema_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityResponse::release_schema_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.schema_id)
  return schema_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityResponse::set_allocated_schema_id(std::string* schema_id) {
  if (schema_id != nullptr) {
    
  } else {
    
  }
  schema_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.schema_id)
}

// .depot.devtools.auth.v0.identity.admin.GetIdentityResponse.Lock lock = 9[json_name = "lock"];
inline void GetIdentityResponse::clear_lock() {
  lock_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_Lock GetIdentityResponse::_internal_lock() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_Lock >(lock_);
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_Lock GetIdentityResponse::lock() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.lock)
  return _internal_lock();
}
inline void GetIdentityResponse::_internal_set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_Lock value) {
  
  lock_ = value;
}
inline void GetIdentityResponse::set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_Lock value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityResponse.lock)
}

// -------------------------------------------------------------------

// GetIdentityByIdentifierRequest

// string attribute = 1[json_name = "attribute"];
inline void GetIdentityByIdentifierRequest::clear_attribute() {
  attribute_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityByIdentifierRequest::attribute() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.attribute)
  return _internal_attribute();
}
inline void GetIdentityByIdentifierRequest::set_attribute(const std::string& value) {
  _internal_set_attribute(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.attribute)
}
inline std::string* GetIdentityByIdentifierRequest::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.attribute)
  return _internal_mutable_attribute();
}
inline const std::string& GetIdentityByIdentifierRequest::_internal_attribute() const {
  return attribute_.Get();
}
inline void GetIdentityByIdentifierRequest::_internal_set_attribute(const std::string& value) {
  
  attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityByIdentifierRequest::set_attribute(std::string&& value) {
  
  attribute_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.attribute)
}
inline void GetIdentityByIdentifierRequest::set_attribute(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.attribute)
}
inline void GetIdentityByIdentifierRequest::set_attribute(const char* value,
    size_t size) {
  
  attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.attribute)
}
inline std::string* GetIdentityByIdentifierRequest::_internal_mutable_attribute() {
  
  return attribute_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityByIdentifierRequest::release_attribute() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.attribute)
  return attribute_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityByIdentifierRequest::set_allocated_attribute(std::string* attribute) {
  if (attribute != nullptr) {
    
  } else {
    
  }
  attribute_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attribute,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.attribute)
}

// string value = 2[json_name = "value"];
inline void GetIdentityByIdentifierRequest::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityByIdentifierRequest::value() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.value)
  return _internal_value();
}
inline void GetIdentityByIdentifierRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.value)
}
inline std::string* GetIdentityByIdentifierRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.value)
  return _internal_mutable_value();
}
inline const std::string& GetIdentityByIdentifierRequest::_internal_value() const {
  return value_.Get();
}
inline void GetIdentityByIdentifierRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityByIdentifierRequest::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.value)
}
inline void GetIdentityByIdentifierRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.value)
}
inline void GetIdentityByIdentifierRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.value)
}
inline std::string* GetIdentityByIdentifierRequest::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityByIdentifierRequest::release_value() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityByIdentifierRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.value)
}

// string connection_id = 3[json_name = "connectionId"];
inline void GetIdentityByIdentifierRequest::clear_connection_id() {
  connection_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityByIdentifierRequest::connection_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.connection_id)
  return _internal_connection_id();
}
inline void GetIdentityByIdentifierRequest::set_connection_id(const std::string& value) {
  _internal_set_connection_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.connection_id)
}
inline std::string* GetIdentityByIdentifierRequest::mutable_connection_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.connection_id)
  return _internal_mutable_connection_id();
}
inline const std::string& GetIdentityByIdentifierRequest::_internal_connection_id() const {
  return connection_id_.Get();
}
inline void GetIdentityByIdentifierRequest::_internal_set_connection_id(const std::string& value) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityByIdentifierRequest::set_connection_id(std::string&& value) {
  
  connection_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.connection_id)
}
inline void GetIdentityByIdentifierRequest::set_connection_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.connection_id)
}
inline void GetIdentityByIdentifierRequest::set_connection_id(const char* value,
    size_t size) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.connection_id)
}
inline std::string* GetIdentityByIdentifierRequest::_internal_mutable_connection_id() {
  
  return connection_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityByIdentifierRequest::release_connection_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.connection_id)
  return connection_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityByIdentifierRequest::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    
  } else {
    
  }
  connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierRequest.connection_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetIdentityByIdentifierResponse_Identity

// string identity_id = 1[json_name = "identityId"];
inline void GetIdentityByIdentifierResponse_Identity::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityByIdentifierResponse_Identity::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.identity_id)
  return _internal_identity_id();
}
inline void GetIdentityByIdentifierResponse_Identity::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.identity_id)
}
inline std::string* GetIdentityByIdentifierResponse_Identity::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetIdentityByIdentifierResponse_Identity::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetIdentityByIdentifierResponse_Identity::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityByIdentifierResponse_Identity::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.identity_id)
}
inline void GetIdentityByIdentifierResponse_Identity::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.identity_id)
}
inline void GetIdentityByIdentifierResponse_Identity::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.identity_id)
}
inline std::string* GetIdentityByIdentifierResponse_Identity::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityByIdentifierResponse_Identity::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityByIdentifierResponse_Identity::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.identity_id)
}

// .google.protobuf.Timestamp created_at = 2[json_name = "createdAt"];
inline bool GetIdentityByIdentifierResponse_Identity::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetIdentityByIdentifierResponse_Identity::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentityByIdentifierResponse_Identity::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentityByIdentifierResponse_Identity::created_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.created_at)
  return _internal_created_at();
}
inline void GetIdentityByIdentifierResponse_Identity::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityByIdentifierResponse_Identity::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityByIdentifierResponse_Identity::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityByIdentifierResponse_Identity::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityByIdentifierResponse_Identity::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.created_at)
  return _internal_mutable_created_at();
}
inline void GetIdentityByIdentifierResponse_Identity::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.created_at)
}

// .google.protobuf.Timestamp updated_at = 3[json_name = "updatedAt"];
inline bool GetIdentityByIdentifierResponse_Identity::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool GetIdentityByIdentifierResponse_Identity::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentityByIdentifierResponse_Identity::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentityByIdentifierResponse_Identity::updated_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.updated_at)
  return _internal_updated_at();
}
inline void GetIdentityByIdentifierResponse_Identity::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityByIdentifierResponse_Identity::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityByIdentifierResponse_Identity::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityByIdentifierResponse_Identity::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityByIdentifierResponse_Identity::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.updated_at)
  return _internal_mutable_updated_at();
}
inline void GetIdentityByIdentifierResponse_Identity::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.updated_at)
}

// string main_identifier = 4[json_name = "mainIdentifier"];
inline void GetIdentityByIdentifierResponse_Identity::clear_main_identifier() {
  main_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityByIdentifierResponse_Identity::main_identifier() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.main_identifier)
  return _internal_main_identifier();
}
inline void GetIdentityByIdentifierResponse_Identity::set_main_identifier(const std::string& value) {
  _internal_set_main_identifier(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.main_identifier)
}
inline std::string* GetIdentityByIdentifierResponse_Identity::mutable_main_identifier() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.main_identifier)
  return _internal_mutable_main_identifier();
}
inline const std::string& GetIdentityByIdentifierResponse_Identity::_internal_main_identifier() const {
  return main_identifier_.Get();
}
inline void GetIdentityByIdentifierResponse_Identity::_internal_set_main_identifier(const std::string& value) {
  
  main_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityByIdentifierResponse_Identity::set_main_identifier(std::string&& value) {
  
  main_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.main_identifier)
}
inline void GetIdentityByIdentifierResponse_Identity::set_main_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  main_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.main_identifier)
}
inline void GetIdentityByIdentifierResponse_Identity::set_main_identifier(const char* value,
    size_t size) {
  
  main_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.main_identifier)
}
inline std::string* GetIdentityByIdentifierResponse_Identity::_internal_mutable_main_identifier() {
  
  return main_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityByIdentifierResponse_Identity::release_main_identifier() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.main_identifier)
  return main_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityByIdentifierResponse_Identity::set_allocated_main_identifier(std::string* main_identifier) {
  if (main_identifier != nullptr) {
    
  } else {
    
  }
  main_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.main_identifier)
}

// string profile_id = 5[json_name = "profileId"];
inline void GetIdentityByIdentifierResponse_Identity::clear_profile_id() {
  profile_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityByIdentifierResponse_Identity::profile_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.profile_id)
  return _internal_profile_id();
}
inline void GetIdentityByIdentifierResponse_Identity::set_profile_id(const std::string& value) {
  _internal_set_profile_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.profile_id)
}
inline std::string* GetIdentityByIdentifierResponse_Identity::mutable_profile_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.profile_id)
  return _internal_mutable_profile_id();
}
inline const std::string& GetIdentityByIdentifierResponse_Identity::_internal_profile_id() const {
  return profile_id_.Get();
}
inline void GetIdentityByIdentifierResponse_Identity::_internal_set_profile_id(const std::string& value) {
  
  profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityByIdentifierResponse_Identity::set_profile_id(std::string&& value) {
  
  profile_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.profile_id)
}
inline void GetIdentityByIdentifierResponse_Identity::set_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.profile_id)
}
inline void GetIdentityByIdentifierResponse_Identity::set_profile_id(const char* value,
    size_t size) {
  
  profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.profile_id)
}
inline std::string* GetIdentityByIdentifierResponse_Identity::_internal_mutable_profile_id() {
  
  return profile_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityByIdentifierResponse_Identity::release_profile_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.profile_id)
  return profile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityByIdentifierResponse_Identity::set_allocated_profile_id(std::string* profile_id) {
  if (profile_id != nullptr) {
    
  } else {
    
  }
  profile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.profile_id)
}

// repeated string addresses_ids = 6[json_name = "addressesIds"];
inline int GetIdentityByIdentifierResponse_Identity::_internal_addresses_ids_size() const {
  return addresses_ids_.size();
}
inline int GetIdentityByIdentifierResponse_Identity::addresses_ids_size() const {
  return _internal_addresses_ids_size();
}
inline void GetIdentityByIdentifierResponse_Identity::clear_addresses_ids() {
  addresses_ids_.Clear();
}
inline std::string* GetIdentityByIdentifierResponse_Identity::add_addresses_ids() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
  return _internal_add_addresses_ids();
}
inline const std::string& GetIdentityByIdentifierResponse_Identity::_internal_addresses_ids(int index) const {
  return addresses_ids_.Get(index);
}
inline const std::string& GetIdentityByIdentifierResponse_Identity::addresses_ids(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
  return _internal_addresses_ids(index);
}
inline std::string* GetIdentityByIdentifierResponse_Identity::mutable_addresses_ids(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
  return addresses_ids_.Mutable(index);
}
inline void GetIdentityByIdentifierResponse_Identity::set_addresses_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
  addresses_ids_.Mutable(index)->assign(value);
}
inline void GetIdentityByIdentifierResponse_Identity::set_addresses_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
  addresses_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetIdentityByIdentifierResponse_Identity::set_addresses_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
}
inline void GetIdentityByIdentifierResponse_Identity::set_addresses_ids(int index, const char* value, size_t size) {
  addresses_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
}
inline std::string* GetIdentityByIdentifierResponse_Identity::_internal_add_addresses_ids() {
  return addresses_ids_.Add();
}
inline void GetIdentityByIdentifierResponse_Identity::add_addresses_ids(const std::string& value) {
  addresses_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
}
inline void GetIdentityByIdentifierResponse_Identity::add_addresses_ids(std::string&& value) {
  addresses_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
}
inline void GetIdentityByIdentifierResponse_Identity::add_addresses_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
}
inline void GetIdentityByIdentifierResponse_Identity::add_addresses_ids(const char* value, size_t size) {
  addresses_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetIdentityByIdentifierResponse_Identity::addresses_ids() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
  return addresses_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetIdentityByIdentifierResponse_Identity::mutable_addresses_ids() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.addresses_ids)
  return &addresses_ids_;
}

// map<string, string> credentials_ids = 7[json_name = "credentialsIds"];
inline int GetIdentityByIdentifierResponse_Identity::_internal_credentials_ids_size() const {
  return credentials_ids_.size();
}
inline int GetIdentityByIdentifierResponse_Identity::credentials_ids_size() const {
  return _internal_credentials_ids_size();
}
inline void GetIdentityByIdentifierResponse_Identity::clear_credentials_ids() {
  credentials_ids_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetIdentityByIdentifierResponse_Identity::_internal_credentials_ids() const {
  return credentials_ids_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetIdentityByIdentifierResponse_Identity::credentials_ids() const {
  // @@protoc_insertion_point(field_map:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.credentials_ids)
  return _internal_credentials_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetIdentityByIdentifierResponse_Identity::_internal_mutable_credentials_ids() {
  return credentials_ids_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetIdentityByIdentifierResponse_Identity::mutable_credentials_ids() {
  // @@protoc_insertion_point(field_mutable_map:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.credentials_ids)
  return _internal_mutable_credentials_ids();
}

// string schema_id = 8[json_name = "schemaId"];
inline void GetIdentityByIdentifierResponse_Identity::clear_schema_id() {
  schema_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityByIdentifierResponse_Identity::schema_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.schema_id)
  return _internal_schema_id();
}
inline void GetIdentityByIdentifierResponse_Identity::set_schema_id(const std::string& value) {
  _internal_set_schema_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.schema_id)
}
inline std::string* GetIdentityByIdentifierResponse_Identity::mutable_schema_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.schema_id)
  return _internal_mutable_schema_id();
}
inline const std::string& GetIdentityByIdentifierResponse_Identity::_internal_schema_id() const {
  return schema_id_.Get();
}
inline void GetIdentityByIdentifierResponse_Identity::_internal_set_schema_id(const std::string& value) {
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityByIdentifierResponse_Identity::set_schema_id(std::string&& value) {
  
  schema_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.schema_id)
}
inline void GetIdentityByIdentifierResponse_Identity::set_schema_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.schema_id)
}
inline void GetIdentityByIdentifierResponse_Identity::set_schema_id(const char* value,
    size_t size) {
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.schema_id)
}
inline std::string* GetIdentityByIdentifierResponse_Identity::_internal_mutable_schema_id() {
  
  return schema_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityByIdentifierResponse_Identity::release_schema_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.schema_id)
  return schema_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityByIdentifierResponse_Identity::set_allocated_schema_id(std::string* schema_id) {
  if (schema_id != nullptr) {
    
  } else {
    
  }
  schema_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.schema_id)
}

// .depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.Lock lock = 9[json_name = "lock"];
inline void GetIdentityByIdentifierResponse_Identity::clear_lock() {
  lock_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_Lock GetIdentityByIdentifierResponse_Identity::_internal_lock() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_Lock >(lock_);
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_Lock GetIdentityByIdentifierResponse_Identity::lock() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.lock)
  return _internal_lock();
}
inline void GetIdentityByIdentifierResponse_Identity::_internal_set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_Lock value) {
  
  lock_ = value;
}
inline void GetIdentityByIdentifierResponse_Identity::set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_Lock value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity.lock)
}

// -------------------------------------------------------------------

// GetIdentityByIdentifierResponse

// .depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.Identity identity = 1[json_name = "identity"];
inline bool GetIdentityByIdentifierResponse::_internal_has_identity() const {
  return this != internal_default_instance() && identity_ != nullptr;
}
inline bool GetIdentityByIdentifierResponse::has_identity() const {
  return _internal_has_identity();
}
inline void GetIdentityByIdentifierResponse::clear_identity() {
  if (GetArena() == nullptr && identity_ != nullptr) {
    delete identity_;
  }
  identity_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity& GetIdentityByIdentifierResponse::_internal_identity() const {
  const ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* p = identity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity*>(
      &::depot::devtools::auth::v0::identity::admin::_GetIdentityByIdentifierResponse_Identity_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity& GetIdentityByIdentifierResponse::identity() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.identity)
  return _internal_identity();
}
inline void GetIdentityByIdentifierResponse::unsafe_arena_set_allocated_identity(
    ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* identity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_);
  }
  identity_ = identity;
  if (identity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.identity)
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* GetIdentityByIdentifierResponse::release_identity() {
  
  ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* temp = identity_;
  identity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* GetIdentityByIdentifierResponse::unsafe_arena_release_identity() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.identity)
  
  ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* temp = identity_;
  identity_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* GetIdentityByIdentifierResponse::_internal_mutable_identity() {
  
  if (identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity>(GetArena());
    identity_ = p;
  }
  return identity_;
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* GetIdentityByIdentifierResponse::mutable_identity() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.identity)
  return _internal_mutable_identity();
}
inline void GetIdentityByIdentifierResponse::set_allocated_identity(::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity* identity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete identity_;
  }
  if (identity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(identity);
    if (message_arena != submessage_arena) {
      identity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identity, submessage_arena);
    }
    
  } else {
    
  }
  identity_ = identity;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityByIdentifierResponse.identity)
}

// -------------------------------------------------------------------

// GetIdentitiesByAttributeRequest

// string attribute = 1[json_name = "attribute"];
inline void GetIdentitiesByAttributeRequest::clear_attribute() {
  attribute_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentitiesByAttributeRequest::attribute() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.attribute)
  return _internal_attribute();
}
inline void GetIdentitiesByAttributeRequest::set_attribute(const std::string& value) {
  _internal_set_attribute(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.attribute)
}
inline std::string* GetIdentitiesByAttributeRequest::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.attribute)
  return _internal_mutable_attribute();
}
inline const std::string& GetIdentitiesByAttributeRequest::_internal_attribute() const {
  return attribute_.Get();
}
inline void GetIdentitiesByAttributeRequest::_internal_set_attribute(const std::string& value) {
  
  attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentitiesByAttributeRequest::set_attribute(std::string&& value) {
  
  attribute_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.attribute)
}
inline void GetIdentitiesByAttributeRequest::set_attribute(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.attribute)
}
inline void GetIdentitiesByAttributeRequest::set_attribute(const char* value,
    size_t size) {
  
  attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.attribute)
}
inline std::string* GetIdentitiesByAttributeRequest::_internal_mutable_attribute() {
  
  return attribute_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentitiesByAttributeRequest::release_attribute() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.attribute)
  return attribute_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentitiesByAttributeRequest::set_allocated_attribute(std::string* attribute) {
  if (attribute != nullptr) {
    
  } else {
    
  }
  attribute_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attribute,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.attribute)
}

// string value = 2[json_name = "value"];
inline void GetIdentitiesByAttributeRequest::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentitiesByAttributeRequest::value() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.value)
  return _internal_value();
}
inline void GetIdentitiesByAttributeRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.value)
}
inline std::string* GetIdentitiesByAttributeRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.value)
  return _internal_mutable_value();
}
inline const std::string& GetIdentitiesByAttributeRequest::_internal_value() const {
  return value_.Get();
}
inline void GetIdentitiesByAttributeRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentitiesByAttributeRequest::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.value)
}
inline void GetIdentitiesByAttributeRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.value)
}
inline void GetIdentitiesByAttributeRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.value)
}
inline std::string* GetIdentitiesByAttributeRequest::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentitiesByAttributeRequest::release_value() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentitiesByAttributeRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeRequest.value)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetIdentitiesByAttributeResponse_Identity

// string identity_id = 1[json_name = "identityId"];
inline void GetIdentitiesByAttributeResponse_Identity::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentitiesByAttributeResponse_Identity::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.identity_id)
  return _internal_identity_id();
}
inline void GetIdentitiesByAttributeResponse_Identity::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.identity_id)
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetIdentitiesByAttributeResponse_Identity::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetIdentitiesByAttributeResponse_Identity::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentitiesByAttributeResponse_Identity::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.identity_id)
}
inline void GetIdentitiesByAttributeResponse_Identity::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.identity_id)
}
inline void GetIdentitiesByAttributeResponse_Identity::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.identity_id)
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentitiesByAttributeResponse_Identity::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.identity_id)
}

// .google.protobuf.Timestamp created_at = 2[json_name = "createdAt"];
inline bool GetIdentitiesByAttributeResponse_Identity::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetIdentitiesByAttributeResponse_Identity::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentitiesByAttributeResponse_Identity::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentitiesByAttributeResponse_Identity::created_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.created_at)
  return _internal_created_at();
}
inline void GetIdentitiesByAttributeResponse_Identity::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesByAttributeResponse_Identity::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesByAttributeResponse_Identity::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesByAttributeResponse_Identity::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesByAttributeResponse_Identity::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.created_at)
  return _internal_mutable_created_at();
}
inline void GetIdentitiesByAttributeResponse_Identity::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.created_at)
}

// .google.protobuf.Timestamp updated_at = 3[json_name = "updatedAt"];
inline bool GetIdentitiesByAttributeResponse_Identity::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool GetIdentitiesByAttributeResponse_Identity::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentitiesByAttributeResponse_Identity::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentitiesByAttributeResponse_Identity::updated_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.updated_at)
  return _internal_updated_at();
}
inline void GetIdentitiesByAttributeResponse_Identity::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesByAttributeResponse_Identity::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesByAttributeResponse_Identity::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesByAttributeResponse_Identity::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentitiesByAttributeResponse_Identity::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.updated_at)
  return _internal_mutable_updated_at();
}
inline void GetIdentitiesByAttributeResponse_Identity::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.updated_at)
}

// string main_identifier = 4[json_name = "mainIdentifier"];
inline void GetIdentitiesByAttributeResponse_Identity::clear_main_identifier() {
  main_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentitiesByAttributeResponse_Identity::main_identifier() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.main_identifier)
  return _internal_main_identifier();
}
inline void GetIdentitiesByAttributeResponse_Identity::set_main_identifier(const std::string& value) {
  _internal_set_main_identifier(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.main_identifier)
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::mutable_main_identifier() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.main_identifier)
  return _internal_mutable_main_identifier();
}
inline const std::string& GetIdentitiesByAttributeResponse_Identity::_internal_main_identifier() const {
  return main_identifier_.Get();
}
inline void GetIdentitiesByAttributeResponse_Identity::_internal_set_main_identifier(const std::string& value) {
  
  main_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentitiesByAttributeResponse_Identity::set_main_identifier(std::string&& value) {
  
  main_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.main_identifier)
}
inline void GetIdentitiesByAttributeResponse_Identity::set_main_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  main_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.main_identifier)
}
inline void GetIdentitiesByAttributeResponse_Identity::set_main_identifier(const char* value,
    size_t size) {
  
  main_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.main_identifier)
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::_internal_mutable_main_identifier() {
  
  return main_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::release_main_identifier() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.main_identifier)
  return main_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentitiesByAttributeResponse_Identity::set_allocated_main_identifier(std::string* main_identifier) {
  if (main_identifier != nullptr) {
    
  } else {
    
  }
  main_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.main_identifier)
}

// string profile_id = 5[json_name = "profileId"];
inline void GetIdentitiesByAttributeResponse_Identity::clear_profile_id() {
  profile_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentitiesByAttributeResponse_Identity::profile_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.profile_id)
  return _internal_profile_id();
}
inline void GetIdentitiesByAttributeResponse_Identity::set_profile_id(const std::string& value) {
  _internal_set_profile_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.profile_id)
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::mutable_profile_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.profile_id)
  return _internal_mutable_profile_id();
}
inline const std::string& GetIdentitiesByAttributeResponse_Identity::_internal_profile_id() const {
  return profile_id_.Get();
}
inline void GetIdentitiesByAttributeResponse_Identity::_internal_set_profile_id(const std::string& value) {
  
  profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentitiesByAttributeResponse_Identity::set_profile_id(std::string&& value) {
  
  profile_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.profile_id)
}
inline void GetIdentitiesByAttributeResponse_Identity::set_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.profile_id)
}
inline void GetIdentitiesByAttributeResponse_Identity::set_profile_id(const char* value,
    size_t size) {
  
  profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.profile_id)
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::_internal_mutable_profile_id() {
  
  return profile_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::release_profile_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.profile_id)
  return profile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentitiesByAttributeResponse_Identity::set_allocated_profile_id(std::string* profile_id) {
  if (profile_id != nullptr) {
    
  } else {
    
  }
  profile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.profile_id)
}

// repeated string addresses_ids = 6[json_name = "addressesIds"];
inline int GetIdentitiesByAttributeResponse_Identity::_internal_addresses_ids_size() const {
  return addresses_ids_.size();
}
inline int GetIdentitiesByAttributeResponse_Identity::addresses_ids_size() const {
  return _internal_addresses_ids_size();
}
inline void GetIdentitiesByAttributeResponse_Identity::clear_addresses_ids() {
  addresses_ids_.Clear();
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::add_addresses_ids() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
  return _internal_add_addresses_ids();
}
inline const std::string& GetIdentitiesByAttributeResponse_Identity::_internal_addresses_ids(int index) const {
  return addresses_ids_.Get(index);
}
inline const std::string& GetIdentitiesByAttributeResponse_Identity::addresses_ids(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
  return _internal_addresses_ids(index);
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::mutable_addresses_ids(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
  return addresses_ids_.Mutable(index);
}
inline void GetIdentitiesByAttributeResponse_Identity::set_addresses_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
  addresses_ids_.Mutable(index)->assign(value);
}
inline void GetIdentitiesByAttributeResponse_Identity::set_addresses_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
  addresses_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetIdentitiesByAttributeResponse_Identity::set_addresses_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
}
inline void GetIdentitiesByAttributeResponse_Identity::set_addresses_ids(int index, const char* value, size_t size) {
  addresses_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::_internal_add_addresses_ids() {
  return addresses_ids_.Add();
}
inline void GetIdentitiesByAttributeResponse_Identity::add_addresses_ids(const std::string& value) {
  addresses_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
}
inline void GetIdentitiesByAttributeResponse_Identity::add_addresses_ids(std::string&& value) {
  addresses_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
}
inline void GetIdentitiesByAttributeResponse_Identity::add_addresses_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
}
inline void GetIdentitiesByAttributeResponse_Identity::add_addresses_ids(const char* value, size_t size) {
  addresses_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetIdentitiesByAttributeResponse_Identity::addresses_ids() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
  return addresses_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetIdentitiesByAttributeResponse_Identity::mutable_addresses_ids() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.addresses_ids)
  return &addresses_ids_;
}

// map<string, string> credentials_ids = 7[json_name = "credentialsIds"];
inline int GetIdentitiesByAttributeResponse_Identity::_internal_credentials_ids_size() const {
  return credentials_ids_.size();
}
inline int GetIdentitiesByAttributeResponse_Identity::credentials_ids_size() const {
  return _internal_credentials_ids_size();
}
inline void GetIdentitiesByAttributeResponse_Identity::clear_credentials_ids() {
  credentials_ids_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetIdentitiesByAttributeResponse_Identity::_internal_credentials_ids() const {
  return credentials_ids_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetIdentitiesByAttributeResponse_Identity::credentials_ids() const {
  // @@protoc_insertion_point(field_map:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.credentials_ids)
  return _internal_credentials_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetIdentitiesByAttributeResponse_Identity::_internal_mutable_credentials_ids() {
  return credentials_ids_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetIdentitiesByAttributeResponse_Identity::mutable_credentials_ids() {
  // @@protoc_insertion_point(field_mutable_map:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.credentials_ids)
  return _internal_mutable_credentials_ids();
}

// string schema_id = 8[json_name = "schemaId"];
inline void GetIdentitiesByAttributeResponse_Identity::clear_schema_id() {
  schema_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentitiesByAttributeResponse_Identity::schema_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.schema_id)
  return _internal_schema_id();
}
inline void GetIdentitiesByAttributeResponse_Identity::set_schema_id(const std::string& value) {
  _internal_set_schema_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.schema_id)
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::mutable_schema_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.schema_id)
  return _internal_mutable_schema_id();
}
inline const std::string& GetIdentitiesByAttributeResponse_Identity::_internal_schema_id() const {
  return schema_id_.Get();
}
inline void GetIdentitiesByAttributeResponse_Identity::_internal_set_schema_id(const std::string& value) {
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentitiesByAttributeResponse_Identity::set_schema_id(std::string&& value) {
  
  schema_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.schema_id)
}
inline void GetIdentitiesByAttributeResponse_Identity::set_schema_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.schema_id)
}
inline void GetIdentitiesByAttributeResponse_Identity::set_schema_id(const char* value,
    size_t size) {
  
  schema_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.schema_id)
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::_internal_mutable_schema_id() {
  
  return schema_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentitiesByAttributeResponse_Identity::release_schema_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.schema_id)
  return schema_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentitiesByAttributeResponse_Identity::set_allocated_schema_id(std::string* schema_id) {
  if (schema_id != nullptr) {
    
  } else {
    
  }
  schema_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.schema_id)
}

// .depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.Lock lock = 9[json_name = "lock"];
inline void GetIdentitiesByAttributeResponse_Identity::clear_lock() {
  lock_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_Lock GetIdentitiesByAttributeResponse_Identity::_internal_lock() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_Lock >(lock_);
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_Lock GetIdentitiesByAttributeResponse_Identity::lock() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.lock)
  return _internal_lock();
}
inline void GetIdentitiesByAttributeResponse_Identity::_internal_set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_Lock value) {
  
  lock_ = value;
}
inline void GetIdentitiesByAttributeResponse_Identity::set_lock(::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_Lock value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity.lock)
}

// -------------------------------------------------------------------

// GetIdentitiesByAttributeResponse

// repeated .depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.Identity identities = 1[json_name = "identities"];
inline int GetIdentitiesByAttributeResponse::_internal_identities_size() const {
  return identities_.size();
}
inline int GetIdentitiesByAttributeResponse::identities_size() const {
  return _internal_identities_size();
}
inline void GetIdentitiesByAttributeResponse::clear_identities() {
  identities_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity* GetIdentitiesByAttributeResponse::mutable_identities(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.identities)
  return identities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity >*
GetIdentitiesByAttributeResponse::mutable_identities() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.identities)
  return &identities_;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity& GetIdentitiesByAttributeResponse::_internal_identities(int index) const {
  return identities_.Get(index);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity& GetIdentitiesByAttributeResponse::identities(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.identities)
  return _internal_identities(index);
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity* GetIdentitiesByAttributeResponse::_internal_add_identities() {
  return identities_.Add();
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity* GetIdentitiesByAttributeResponse::add_identities() {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.identities)
  return _internal_add_identities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity >&
GetIdentitiesByAttributeResponse::identities() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetIdentitiesByAttributeResponse.identities)
  return identities_;
}

// -------------------------------------------------------------------

// UpdateIdentityRequest

// string identity_id = 1[json_name = "identityId"];
inline void UpdateIdentityRequest::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateIdentityRequest::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest.identity_id)
  return _internal_identity_id();
}
inline void UpdateIdentityRequest::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest.identity_id)
}
inline std::string* UpdateIdentityRequest::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& UpdateIdentityRequest::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void UpdateIdentityRequest::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateIdentityRequest::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest.identity_id)
}
inline void UpdateIdentityRequest::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest.identity_id)
}
inline void UpdateIdentityRequest::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest.identity_id)
}
inline std::string* UpdateIdentityRequest::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateIdentityRequest::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateIdentityRequest::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest.identity_id)
}

// .depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest.Lock lock = 2[json_name = "lock"];
inline void UpdateIdentityRequest::clear_lock() {
  lock_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest_Lock UpdateIdentityRequest::_internal_lock() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest_Lock >(lock_);
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest_Lock UpdateIdentityRequest::lock() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest.lock)
  return _internal_lock();
}
inline void UpdateIdentityRequest::_internal_set_lock(::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest_Lock value) {
  
  lock_ = value;
}
inline void UpdateIdentityRequest::set_lock(::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest_Lock value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateIdentityRequest.lock)
}

// -------------------------------------------------------------------

// UpdateIdentityResponse

// -------------------------------------------------------------------

// DeleteIdentityRequest

// string identity_id = 1[json_name = "identityId"];
inline void DeleteIdentityRequest::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteIdentityRequest::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.DeleteIdentityRequest.identity_id)
  return _internal_identity_id();
}
inline void DeleteIdentityRequest::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.DeleteIdentityRequest.identity_id)
}
inline std::string* DeleteIdentityRequest::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.DeleteIdentityRequest.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& DeleteIdentityRequest::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void DeleteIdentityRequest::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteIdentityRequest::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.DeleteIdentityRequest.identity_id)
}
inline void DeleteIdentityRequest::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.DeleteIdentityRequest.identity_id)
}
inline void DeleteIdentityRequest::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.DeleteIdentityRequest.identity_id)
}
inline std::string* DeleteIdentityRequest::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteIdentityRequest::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.DeleteIdentityRequest.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteIdentityRequest::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.DeleteIdentityRequest.identity_id)
}

// -------------------------------------------------------------------

// DeleteIdentityResponse

// -------------------------------------------------------------------

// GetCredentialsRequest

// string identity_id = 1[json_name = "identityId"];
inline void GetCredentialsRequest::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCredentialsRequest::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetCredentialsRequest.identity_id)
  return _internal_identity_id();
}
inline void GetCredentialsRequest::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetCredentialsRequest.identity_id)
}
inline std::string* GetCredentialsRequest::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetCredentialsRequest.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetCredentialsRequest::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetCredentialsRequest::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCredentialsRequest::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetCredentialsRequest.identity_id)
}
inline void GetCredentialsRequest::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetCredentialsRequest.identity_id)
}
inline void GetCredentialsRequest::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetCredentialsRequest.identity_id)
}
inline std::string* GetCredentialsRequest::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCredentialsRequest::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetCredentialsRequest.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCredentialsRequest::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetCredentialsRequest.identity_id)
}

// -------------------------------------------------------------------

// GetCredentialsResponse_Credential

// string credential_id = 1[json_name = "credentialId"];
inline void GetCredentialsResponse_Credential::clear_credential_id() {
  credential_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCredentialsResponse_Credential::credential_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.credential_id)
  return _internal_credential_id();
}
inline void GetCredentialsResponse_Credential::set_credential_id(const std::string& value) {
  _internal_set_credential_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.credential_id)
}
inline std::string* GetCredentialsResponse_Credential::mutable_credential_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.credential_id)
  return _internal_mutable_credential_id();
}
inline const std::string& GetCredentialsResponse_Credential::_internal_credential_id() const {
  return credential_id_.Get();
}
inline void GetCredentialsResponse_Credential::_internal_set_credential_id(const std::string& value) {
  
  credential_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCredentialsResponse_Credential::set_credential_id(std::string&& value) {
  
  credential_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.credential_id)
}
inline void GetCredentialsResponse_Credential::set_credential_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  credential_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.credential_id)
}
inline void GetCredentialsResponse_Credential::set_credential_id(const char* value,
    size_t size) {
  
  credential_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.credential_id)
}
inline std::string* GetCredentialsResponse_Credential::_internal_mutable_credential_id() {
  
  return credential_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCredentialsResponse_Credential::release_credential_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.credential_id)
  return credential_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCredentialsResponse_Credential::set_allocated_credential_id(std::string* credential_id) {
  if (credential_id != nullptr) {
    
  } else {
    
  }
  credential_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credential_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.credential_id)
}

// .google.protobuf.Timestamp created_at = 2[json_name = "createdAt"];
inline bool GetCredentialsResponse_Credential::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetCredentialsResponse_Credential::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetCredentialsResponse_Credential::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetCredentialsResponse_Credential::created_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.created_at)
  return _internal_created_at();
}
inline void GetCredentialsResponse_Credential::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetCredentialsResponse_Credential::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetCredentialsResponse_Credential::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetCredentialsResponse_Credential::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetCredentialsResponse_Credential::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.created_at)
  return _internal_mutable_created_at();
}
inline void GetCredentialsResponse_Credential::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.created_at)
}

// .google.protobuf.Timestamp updated_at = 3[json_name = "updatedAt"];
inline bool GetCredentialsResponse_Credential::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool GetCredentialsResponse_Credential::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetCredentialsResponse_Credential::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetCredentialsResponse_Credential::updated_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.updated_at)
  return _internal_updated_at();
}
inline void GetCredentialsResponse_Credential::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetCredentialsResponse_Credential::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetCredentialsResponse_Credential::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetCredentialsResponse_Credential::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetCredentialsResponse_Credential::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.updated_at)
  return _internal_mutable_updated_at();
}
inline void GetCredentialsResponse_Credential::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.updated_at)
}

// string identity_id = 4[json_name = "identityId"];
inline void GetCredentialsResponse_Credential::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCredentialsResponse_Credential::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.identity_id)
  return _internal_identity_id();
}
inline void GetCredentialsResponse_Credential::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.identity_id)
}
inline std::string* GetCredentialsResponse_Credential::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetCredentialsResponse_Credential::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetCredentialsResponse_Credential::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCredentialsResponse_Credential::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.identity_id)
}
inline void GetCredentialsResponse_Credential::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.identity_id)
}
inline void GetCredentialsResponse_Credential::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.identity_id)
}
inline std::string* GetCredentialsResponse_Credential::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCredentialsResponse_Credential::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCredentialsResponse_Credential::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.identity_id)
}

// int32 type = 5[json_name = "type"];
inline void GetCredentialsResponse_Credential::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCredentialsResponse_Credential::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCredentialsResponse_Credential::type() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.type)
  return _internal_type();
}
inline void GetCredentialsResponse_Credential::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void GetCredentialsResponse_Credential::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.type)
}

// string connection_id = 6[json_name = "connectionId"];
inline void GetCredentialsResponse_Credential::clear_connection_id() {
  connection_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCredentialsResponse_Credential::connection_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.connection_id)
  return _internal_connection_id();
}
inline void GetCredentialsResponse_Credential::set_connection_id(const std::string& value) {
  _internal_set_connection_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.connection_id)
}
inline std::string* GetCredentialsResponse_Credential::mutable_connection_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.connection_id)
  return _internal_mutable_connection_id();
}
inline const std::string& GetCredentialsResponse_Credential::_internal_connection_id() const {
  return connection_id_.Get();
}
inline void GetCredentialsResponse_Credential::_internal_set_connection_id(const std::string& value) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCredentialsResponse_Credential::set_connection_id(std::string&& value) {
  
  connection_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.connection_id)
}
inline void GetCredentialsResponse_Credential::set_connection_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.connection_id)
}
inline void GetCredentialsResponse_Credential::set_connection_id(const char* value,
    size_t size) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.connection_id)
}
inline std::string* GetCredentialsResponse_Credential::_internal_mutable_connection_id() {
  
  return connection_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCredentialsResponse_Credential::release_connection_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.connection_id)
  return connection_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCredentialsResponse_Credential::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    
  } else {
    
  }
  connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.connection_id)
}

// bool configured = 7[json_name = "configured"];
inline void GetCredentialsResponse_Credential::clear_configured() {
  configured_ = false;
}
inline bool GetCredentialsResponse_Credential::_internal_configured() const {
  return configured_;
}
inline bool GetCredentialsResponse_Credential::configured() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.configured)
  return _internal_configured();
}
inline void GetCredentialsResponse_Credential::_internal_set_configured(bool value) {
  
  configured_ = value;
}
inline void GetCredentialsResponse_Credential::set_configured(bool value) {
  _internal_set_configured(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential.configured)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetCredentialsResponse

// map<string, .depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential> credentials = 1[json_name = "credentials"];
inline int GetCredentialsResponse::_internal_credentials_size() const {
  return credentials_.size();
}
inline int GetCredentialsResponse::credentials_size() const {
  return _internal_credentials_size();
}
inline void GetCredentialsResponse::clear_credentials() {
  credentials_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential >&
GetCredentialsResponse::_internal_credentials() const {
  return credentials_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential >&
GetCredentialsResponse::credentials() const {
  // @@protoc_insertion_point(field_map:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.credentials)
  return _internal_credentials();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential >*
GetCredentialsResponse::_internal_mutable_credentials() {
  return credentials_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::depot::devtools::auth::v0::identity::admin::GetCredentialsResponse_Credential >*
GetCredentialsResponse::mutable_credentials() {
  // @@protoc_insertion_point(field_mutable_map:depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.credentials)
  return _internal_mutable_credentials();
}

// -------------------------------------------------------------------

// UpdateCredentialRequest

// .google.protobuf.Struct data = 1[json_name = "data"];
inline bool UpdateCredentialRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool UpdateCredentialRequest::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& UpdateCredentialRequest::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& UpdateCredentialRequest::data() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.data)
  return _internal_data();
}
inline void UpdateCredentialRequest::unsafe_arena_set_allocated_data(
    PROTOBUF_NAMESPACE_ID::Struct* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.data)
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateCredentialRequest::release_data() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateCredentialRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.data)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateCredentialRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateCredentialRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.data)
  return _internal_mutable_data();
}
inline void UpdateCredentialRequest::set_allocated_data(PROTOBUF_NAMESPACE_ID::Struct* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.data)
}

// string connection_id = 2[json_name = "connectionId"];
inline void UpdateCredentialRequest::clear_connection_id() {
  connection_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateCredentialRequest::connection_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.connection_id)
  return _internal_connection_id();
}
inline void UpdateCredentialRequest::set_connection_id(const std::string& value) {
  _internal_set_connection_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.connection_id)
}
inline std::string* UpdateCredentialRequest::mutable_connection_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.connection_id)
  return _internal_mutable_connection_id();
}
inline const std::string& UpdateCredentialRequest::_internal_connection_id() const {
  return connection_id_.Get();
}
inline void UpdateCredentialRequest::_internal_set_connection_id(const std::string& value) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateCredentialRequest::set_connection_id(std::string&& value) {
  
  connection_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.connection_id)
}
inline void UpdateCredentialRequest::set_connection_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.connection_id)
}
inline void UpdateCredentialRequest::set_connection_id(const char* value,
    size_t size) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.connection_id)
}
inline std::string* UpdateCredentialRequest::_internal_mutable_connection_id() {
  
  return connection_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateCredentialRequest::release_connection_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.connection_id)
  return connection_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateCredentialRequest::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    
  } else {
    
  }
  connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.connection_id)
}

// string identity_id = 3[json_name = "identityId"];
inline void UpdateCredentialRequest::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateCredentialRequest::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.identity_id)
  return _internal_identity_id();
}
inline void UpdateCredentialRequest::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.identity_id)
}
inline std::string* UpdateCredentialRequest::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& UpdateCredentialRequest::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void UpdateCredentialRequest::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateCredentialRequest::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.identity_id)
}
inline void UpdateCredentialRequest::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.identity_id)
}
inline void UpdateCredentialRequest::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.identity_id)
}
inline std::string* UpdateCredentialRequest::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateCredentialRequest::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateCredentialRequest::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateCredentialRequest.identity_id)
}

// -------------------------------------------------------------------

// UpdateCredentialResponse

// -------------------------------------------------------------------

// CreateConnectionRequest

// string id = 1[json_name = "id"];
inline void CreateConnectionRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateConnectionRequest::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.id)
  return _internal_id();
}
inline void CreateConnectionRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.id)
}
inline std::string* CreateConnectionRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.id)
  return _internal_mutable_id();
}
inline const std::string& CreateConnectionRequest::_internal_id() const {
  return id_.Get();
}
inline void CreateConnectionRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateConnectionRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.id)
}
inline void CreateConnectionRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.id)
}
inline void CreateConnectionRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.id)
}
inline std::string* CreateConnectionRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateConnectionRequest::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateConnectionRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.id)
}

// string client_id = 2[json_name = "clientId"];
inline void CreateConnectionRequest::clear_client_id() {
  client_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateConnectionRequest::client_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_id)
  return _internal_client_id();
}
inline void CreateConnectionRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_id)
}
inline std::string* CreateConnectionRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& CreateConnectionRequest::_internal_client_id() const {
  return client_id_.Get();
}
inline void CreateConnectionRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateConnectionRequest::set_client_id(std::string&& value) {
  
  client_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_id)
}
inline void CreateConnectionRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_id)
}
inline void CreateConnectionRequest::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_id)
}
inline std::string* CreateConnectionRequest::_internal_mutable_client_id() {
  
  return client_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateConnectionRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateConnectionRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_id)
}

// string client_secret = 3[json_name = "clientSecret"];
inline void CreateConnectionRequest::clear_client_secret() {
  client_secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateConnectionRequest::client_secret() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_secret)
  return _internal_client_secret();
}
inline void CreateConnectionRequest::set_client_secret(const std::string& value) {
  _internal_set_client_secret(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_secret)
}
inline std::string* CreateConnectionRequest::mutable_client_secret() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_secret)
  return _internal_mutable_client_secret();
}
inline const std::string& CreateConnectionRequest::_internal_client_secret() const {
  return client_secret_.Get();
}
inline void CreateConnectionRequest::_internal_set_client_secret(const std::string& value) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateConnectionRequest::set_client_secret(std::string&& value) {
  
  client_secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_secret)
}
inline void CreateConnectionRequest::set_client_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_secret)
}
inline void CreateConnectionRequest::set_client_secret(const char* value,
    size_t size) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_secret)
}
inline std::string* CreateConnectionRequest::_internal_mutable_client_secret() {
  
  return client_secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateConnectionRequest::release_client_secret() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_secret)
  return client_secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateConnectionRequest::set_allocated_client_secret(std::string* client_secret) {
  if (client_secret != nullptr) {
    
  } else {
    
  }
  client_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.client_secret)
}

// string button_image_url = 4[json_name = "buttonImageUrl"];
inline void CreateConnectionRequest::clear_button_image_url() {
  button_image_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateConnectionRequest::button_image_url() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.button_image_url)
  return _internal_button_image_url();
}
inline void CreateConnectionRequest::set_button_image_url(const std::string& value) {
  _internal_set_button_image_url(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.button_image_url)
}
inline std::string* CreateConnectionRequest::mutable_button_image_url() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.button_image_url)
  return _internal_mutable_button_image_url();
}
inline const std::string& CreateConnectionRequest::_internal_button_image_url() const {
  return button_image_url_.Get();
}
inline void CreateConnectionRequest::_internal_set_button_image_url(const std::string& value) {
  
  button_image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateConnectionRequest::set_button_image_url(std::string&& value) {
  
  button_image_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.button_image_url)
}
inline void CreateConnectionRequest::set_button_image_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  button_image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.button_image_url)
}
inline void CreateConnectionRequest::set_button_image_url(const char* value,
    size_t size) {
  
  button_image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.button_image_url)
}
inline std::string* CreateConnectionRequest::_internal_mutable_button_image_url() {
  
  return button_image_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateConnectionRequest::release_button_image_url() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.button_image_url)
  return button_image_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateConnectionRequest::set_allocated_button_image_url(std::string* button_image_url) {
  if (button_image_url != nullptr) {
    
  } else {
    
  }
  button_image_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), button_image_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.button_image_url)
}

// .depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.Providers provider = 6[json_name = "provider"];
inline void CreateConnectionRequest::clear_provider() {
  provider_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Providers CreateConnectionRequest::_internal_provider() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Providers >(provider_);
}
inline ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Providers CreateConnectionRequest::provider() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.provider)
  return _internal_provider();
}
inline void CreateConnectionRequest::_internal_set_provider(::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Providers value) {
  
  provider_ = value;
}
inline void CreateConnectionRequest::set_provider(::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Providers value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.provider)
}

// string oidc_discovery_url = 7[json_name = "oidcDiscoveryUrl"];
inline void CreateConnectionRequest::clear_oidc_discovery_url() {
  oidc_discovery_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateConnectionRequest::oidc_discovery_url() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.oidc_discovery_url)
  return _internal_oidc_discovery_url();
}
inline void CreateConnectionRequest::set_oidc_discovery_url(const std::string& value) {
  _internal_set_oidc_discovery_url(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.oidc_discovery_url)
}
inline std::string* CreateConnectionRequest::mutable_oidc_discovery_url() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.oidc_discovery_url)
  return _internal_mutable_oidc_discovery_url();
}
inline const std::string& CreateConnectionRequest::_internal_oidc_discovery_url() const {
  return oidc_discovery_url_.Get();
}
inline void CreateConnectionRequest::_internal_set_oidc_discovery_url(const std::string& value) {
  
  oidc_discovery_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateConnectionRequest::set_oidc_discovery_url(std::string&& value) {
  
  oidc_discovery_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.oidc_discovery_url)
}
inline void CreateConnectionRequest::set_oidc_discovery_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oidc_discovery_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.oidc_discovery_url)
}
inline void CreateConnectionRequest::set_oidc_discovery_url(const char* value,
    size_t size) {
  
  oidc_discovery_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.oidc_discovery_url)
}
inline std::string* CreateConnectionRequest::_internal_mutable_oidc_discovery_url() {
  
  return oidc_discovery_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateConnectionRequest::release_oidc_discovery_url() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.oidc_discovery_url)
  return oidc_discovery_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateConnectionRequest::set_allocated_oidc_discovery_url(std::string* oidc_discovery_url) {
  if (oidc_discovery_url != nullptr) {
    
  } else {
    
  }
  oidc_discovery_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oidc_discovery_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.oidc_discovery_url)
}

// repeated string mfa = 8[json_name = "mfa"];
inline int CreateConnectionRequest::_internal_mfa_size() const {
  return mfa_.size();
}
inline int CreateConnectionRequest::mfa_size() const {
  return _internal_mfa_size();
}
inline void CreateConnectionRequest::clear_mfa() {
  mfa_.Clear();
}
inline std::string* CreateConnectionRequest::add_mfa() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
  return _internal_add_mfa();
}
inline const std::string& CreateConnectionRequest::_internal_mfa(int index) const {
  return mfa_.Get(index);
}
inline const std::string& CreateConnectionRequest::mfa(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
  return _internal_mfa(index);
}
inline std::string* CreateConnectionRequest::mutable_mfa(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
  return mfa_.Mutable(index);
}
inline void CreateConnectionRequest::set_mfa(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
  mfa_.Mutable(index)->assign(value);
}
inline void CreateConnectionRequest::set_mfa(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
  mfa_.Mutable(index)->assign(std::move(value));
}
inline void CreateConnectionRequest::set_mfa(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mfa_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
}
inline void CreateConnectionRequest::set_mfa(int index, const char* value, size_t size) {
  mfa_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
}
inline std::string* CreateConnectionRequest::_internal_add_mfa() {
  return mfa_.Add();
}
inline void CreateConnectionRequest::add_mfa(const std::string& value) {
  mfa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
}
inline void CreateConnectionRequest::add_mfa(std::string&& value) {
  mfa_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
}
inline void CreateConnectionRequest::add_mfa(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mfa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
}
inline void CreateConnectionRequest::add_mfa(const char* value, size_t size) {
  mfa_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateConnectionRequest::mfa() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
  return mfa_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateConnectionRequest::mutable_mfa() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.mfa)
  return &mfa_;
}

// .depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.Types type = 9[json_name = "type"];
inline void CreateConnectionRequest::clear_type() {
  type_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Types CreateConnectionRequest::_internal_type() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Types >(type_);
}
inline ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Types CreateConnectionRequest::type() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.type)
  return _internal_type();
}
inline void CreateConnectionRequest::_internal_set_type(::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Types value) {
  
  type_ = value;
}
inline void CreateConnectionRequest::set_type(::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Types value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.type)
}

// string scopes = 10[json_name = "scopes"];
inline void CreateConnectionRequest::clear_scopes() {
  scopes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateConnectionRequest::scopes() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.scopes)
  return _internal_scopes();
}
inline void CreateConnectionRequest::set_scopes(const std::string& value) {
  _internal_set_scopes(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.scopes)
}
inline std::string* CreateConnectionRequest::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.scopes)
  return _internal_mutable_scopes();
}
inline const std::string& CreateConnectionRequest::_internal_scopes() const {
  return scopes_.Get();
}
inline void CreateConnectionRequest::_internal_set_scopes(const std::string& value) {
  
  scopes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateConnectionRequest::set_scopes(std::string&& value) {
  
  scopes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.scopes)
}
inline void CreateConnectionRequest::set_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scopes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.scopes)
}
inline void CreateConnectionRequest::set_scopes(const char* value,
    size_t size) {
  
  scopes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.scopes)
}
inline std::string* CreateConnectionRequest::_internal_mutable_scopes() {
  
  return scopes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateConnectionRequest::release_scopes() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.scopes)
  return scopes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateConnectionRequest::set_allocated_scopes(std::string* scopes) {
  if (scopes != nullptr) {
    
  } else {
    
  }
  scopes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scopes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateConnectionRequest.scopes)
}

// -------------------------------------------------------------------

// CreateConnectionResponse

// string id = 1[json_name = "id"];
inline void CreateConnectionResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateConnectionResponse::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateConnectionResponse.id)
  return _internal_id();
}
inline void CreateConnectionResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateConnectionResponse.id)
}
inline std::string* CreateConnectionResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateConnectionResponse.id)
  return _internal_mutable_id();
}
inline const std::string& CreateConnectionResponse::_internal_id() const {
  return id_.Get();
}
inline void CreateConnectionResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateConnectionResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateConnectionResponse.id)
}
inline void CreateConnectionResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateConnectionResponse.id)
}
inline void CreateConnectionResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateConnectionResponse.id)
}
inline std::string* CreateConnectionResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateConnectionResponse::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateConnectionResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateConnectionResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateConnectionResponse.id)
}

// -------------------------------------------------------------------

// GetConnectionsRequest

// -------------------------------------------------------------------

// GetConnectionsResponse_Connection

// string id = 1[json_name = "id"];
inline void GetConnectionsResponse_Connection::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetConnectionsResponse_Connection::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.id)
  return _internal_id();
}
inline void GetConnectionsResponse_Connection::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.id)
}
inline std::string* GetConnectionsResponse_Connection::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.id)
  return _internal_mutable_id();
}
inline const std::string& GetConnectionsResponse_Connection::_internal_id() const {
  return id_.Get();
}
inline void GetConnectionsResponse_Connection::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetConnectionsResponse_Connection::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.id)
}
inline void GetConnectionsResponse_Connection::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.id)
}
inline void GetConnectionsResponse_Connection::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.id)
}
inline std::string* GetConnectionsResponse_Connection::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetConnectionsResponse_Connection::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConnectionsResponse_Connection::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.id)
}

// string client_id = 2[json_name = "clientId"];
inline void GetConnectionsResponse_Connection::clear_client_id() {
  client_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetConnectionsResponse_Connection::client_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_id)
  return _internal_client_id();
}
inline void GetConnectionsResponse_Connection::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_id)
}
inline std::string* GetConnectionsResponse_Connection::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetConnectionsResponse_Connection::_internal_client_id() const {
  return client_id_.Get();
}
inline void GetConnectionsResponse_Connection::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetConnectionsResponse_Connection::set_client_id(std::string&& value) {
  
  client_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_id)
}
inline void GetConnectionsResponse_Connection::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_id)
}
inline void GetConnectionsResponse_Connection::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_id)
}
inline std::string* GetConnectionsResponse_Connection::_internal_mutable_client_id() {
  
  return client_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetConnectionsResponse_Connection::release_client_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConnectionsResponse_Connection::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_id)
}

// string client_secret = 3[json_name = "clientSecret"];
inline void GetConnectionsResponse_Connection::clear_client_secret() {
  client_secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetConnectionsResponse_Connection::client_secret() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_secret)
  return _internal_client_secret();
}
inline void GetConnectionsResponse_Connection::set_client_secret(const std::string& value) {
  _internal_set_client_secret(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_secret)
}
inline std::string* GetConnectionsResponse_Connection::mutable_client_secret() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_secret)
  return _internal_mutable_client_secret();
}
inline const std::string& GetConnectionsResponse_Connection::_internal_client_secret() const {
  return client_secret_.Get();
}
inline void GetConnectionsResponse_Connection::_internal_set_client_secret(const std::string& value) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetConnectionsResponse_Connection::set_client_secret(std::string&& value) {
  
  client_secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_secret)
}
inline void GetConnectionsResponse_Connection::set_client_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_secret)
}
inline void GetConnectionsResponse_Connection::set_client_secret(const char* value,
    size_t size) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_secret)
}
inline std::string* GetConnectionsResponse_Connection::_internal_mutable_client_secret() {
  
  return client_secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetConnectionsResponse_Connection::release_client_secret() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_secret)
  return client_secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConnectionsResponse_Connection::set_allocated_client_secret(std::string* client_secret) {
  if (client_secret != nullptr) {
    
  } else {
    
  }
  client_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.client_secret)
}

// string button_image_url = 4[json_name = "buttonImageUrl"];
inline void GetConnectionsResponse_Connection::clear_button_image_url() {
  button_image_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetConnectionsResponse_Connection::button_image_url() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.button_image_url)
  return _internal_button_image_url();
}
inline void GetConnectionsResponse_Connection::set_button_image_url(const std::string& value) {
  _internal_set_button_image_url(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.button_image_url)
}
inline std::string* GetConnectionsResponse_Connection::mutable_button_image_url() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.button_image_url)
  return _internal_mutable_button_image_url();
}
inline const std::string& GetConnectionsResponse_Connection::_internal_button_image_url() const {
  return button_image_url_.Get();
}
inline void GetConnectionsResponse_Connection::_internal_set_button_image_url(const std::string& value) {
  
  button_image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetConnectionsResponse_Connection::set_button_image_url(std::string&& value) {
  
  button_image_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.button_image_url)
}
inline void GetConnectionsResponse_Connection::set_button_image_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  button_image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.button_image_url)
}
inline void GetConnectionsResponse_Connection::set_button_image_url(const char* value,
    size_t size) {
  
  button_image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.button_image_url)
}
inline std::string* GetConnectionsResponse_Connection::_internal_mutable_button_image_url() {
  
  return button_image_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetConnectionsResponse_Connection::release_button_image_url() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.button_image_url)
  return button_image_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConnectionsResponse_Connection::set_allocated_button_image_url(std::string* button_image_url) {
  if (button_image_url != nullptr) {
    
  } else {
    
  }
  button_image_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), button_image_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.button_image_url)
}

// .depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Providers provider = 6[json_name = "provider"];
inline void GetConnectionsResponse_Connection::clear_provider() {
  provider_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Providers GetConnectionsResponse_Connection::_internal_provider() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Providers >(provider_);
}
inline ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Providers GetConnectionsResponse_Connection::provider() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.provider)
  return _internal_provider();
}
inline void GetConnectionsResponse_Connection::_internal_set_provider(::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Providers value) {
  
  provider_ = value;
}
inline void GetConnectionsResponse_Connection::set_provider(::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Providers value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.provider)
}

// string oidc_discovery_url = 7[json_name = "oidcDiscoveryUrl"];
inline void GetConnectionsResponse_Connection::clear_oidc_discovery_url() {
  oidc_discovery_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetConnectionsResponse_Connection::oidc_discovery_url() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.oidc_discovery_url)
  return _internal_oidc_discovery_url();
}
inline void GetConnectionsResponse_Connection::set_oidc_discovery_url(const std::string& value) {
  _internal_set_oidc_discovery_url(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.oidc_discovery_url)
}
inline std::string* GetConnectionsResponse_Connection::mutable_oidc_discovery_url() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.oidc_discovery_url)
  return _internal_mutable_oidc_discovery_url();
}
inline const std::string& GetConnectionsResponse_Connection::_internal_oidc_discovery_url() const {
  return oidc_discovery_url_.Get();
}
inline void GetConnectionsResponse_Connection::_internal_set_oidc_discovery_url(const std::string& value) {
  
  oidc_discovery_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetConnectionsResponse_Connection::set_oidc_discovery_url(std::string&& value) {
  
  oidc_discovery_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.oidc_discovery_url)
}
inline void GetConnectionsResponse_Connection::set_oidc_discovery_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oidc_discovery_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.oidc_discovery_url)
}
inline void GetConnectionsResponse_Connection::set_oidc_discovery_url(const char* value,
    size_t size) {
  
  oidc_discovery_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.oidc_discovery_url)
}
inline std::string* GetConnectionsResponse_Connection::_internal_mutable_oidc_discovery_url() {
  
  return oidc_discovery_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetConnectionsResponse_Connection::release_oidc_discovery_url() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.oidc_discovery_url)
  return oidc_discovery_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConnectionsResponse_Connection::set_allocated_oidc_discovery_url(std::string* oidc_discovery_url) {
  if (oidc_discovery_url != nullptr) {
    
  } else {
    
  }
  oidc_discovery_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oidc_discovery_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.oidc_discovery_url)
}

// repeated string mfa = 8[json_name = "mfa"];
inline int GetConnectionsResponse_Connection::_internal_mfa_size() const {
  return mfa_.size();
}
inline int GetConnectionsResponse_Connection::mfa_size() const {
  return _internal_mfa_size();
}
inline void GetConnectionsResponse_Connection::clear_mfa() {
  mfa_.Clear();
}
inline std::string* GetConnectionsResponse_Connection::add_mfa() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
  return _internal_add_mfa();
}
inline const std::string& GetConnectionsResponse_Connection::_internal_mfa(int index) const {
  return mfa_.Get(index);
}
inline const std::string& GetConnectionsResponse_Connection::mfa(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
  return _internal_mfa(index);
}
inline std::string* GetConnectionsResponse_Connection::mutable_mfa(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
  return mfa_.Mutable(index);
}
inline void GetConnectionsResponse_Connection::set_mfa(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
  mfa_.Mutable(index)->assign(value);
}
inline void GetConnectionsResponse_Connection::set_mfa(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
  mfa_.Mutable(index)->assign(std::move(value));
}
inline void GetConnectionsResponse_Connection::set_mfa(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mfa_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
}
inline void GetConnectionsResponse_Connection::set_mfa(int index, const char* value, size_t size) {
  mfa_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
}
inline std::string* GetConnectionsResponse_Connection::_internal_add_mfa() {
  return mfa_.Add();
}
inline void GetConnectionsResponse_Connection::add_mfa(const std::string& value) {
  mfa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
}
inline void GetConnectionsResponse_Connection::add_mfa(std::string&& value) {
  mfa_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
}
inline void GetConnectionsResponse_Connection::add_mfa(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mfa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
}
inline void GetConnectionsResponse_Connection::add_mfa(const char* value, size_t size) {
  mfa_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetConnectionsResponse_Connection::mfa() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
  return mfa_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetConnectionsResponse_Connection::mutable_mfa() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.mfa)
  return &mfa_;
}

// .depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Types type = 9[json_name = "type"];
inline void GetConnectionsResponse_Connection::clear_type() {
  type_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Types GetConnectionsResponse_Connection::_internal_type() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Types >(type_);
}
inline ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Types GetConnectionsResponse_Connection::type() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.type)
  return _internal_type();
}
inline void GetConnectionsResponse_Connection::_internal_set_type(::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Types value) {
  
  type_ = value;
}
inline void GetConnectionsResponse_Connection::set_type(::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Types value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.type)
}

// string scopes = 10[json_name = "scopes"];
inline void GetConnectionsResponse_Connection::clear_scopes() {
  scopes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetConnectionsResponse_Connection::scopes() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.scopes)
  return _internal_scopes();
}
inline void GetConnectionsResponse_Connection::set_scopes(const std::string& value) {
  _internal_set_scopes(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.scopes)
}
inline std::string* GetConnectionsResponse_Connection::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.scopes)
  return _internal_mutable_scopes();
}
inline const std::string& GetConnectionsResponse_Connection::_internal_scopes() const {
  return scopes_.Get();
}
inline void GetConnectionsResponse_Connection::_internal_set_scopes(const std::string& value) {
  
  scopes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetConnectionsResponse_Connection::set_scopes(std::string&& value) {
  
  scopes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.scopes)
}
inline void GetConnectionsResponse_Connection::set_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scopes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.scopes)
}
inline void GetConnectionsResponse_Connection::set_scopes(const char* value,
    size_t size) {
  
  scopes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.scopes)
}
inline std::string* GetConnectionsResponse_Connection::_internal_mutable_scopes() {
  
  return scopes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetConnectionsResponse_Connection::release_scopes() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.scopes)
  return scopes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConnectionsResponse_Connection::set_allocated_scopes(std::string* scopes) {
  if (scopes != nullptr) {
    
  } else {
    
  }
  scopes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scopes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.scopes)
}

// .depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Purposes purpose = 11[json_name = "purpose"];
inline void GetConnectionsResponse_Connection::clear_purpose() {
  purpose_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Purposes GetConnectionsResponse_Connection::_internal_purpose() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Purposes >(purpose_);
}
inline ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Purposes GetConnectionsResponse_Connection::purpose() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.purpose)
  return _internal_purpose();
}
inline void GetConnectionsResponse_Connection::_internal_set_purpose(::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Purposes value) {
  
  purpose_ = value;
}
inline void GetConnectionsResponse_Connection::set_purpose(::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Purposes value) {
  _internal_set_purpose(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection.purpose)
}

// -------------------------------------------------------------------

// GetConnectionsResponse

// repeated .depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.Connection connections = 1[json_name = "connections"];
inline int GetConnectionsResponse::_internal_connections_size() const {
  return connections_.size();
}
inline int GetConnectionsResponse::connections_size() const {
  return _internal_connections_size();
}
inline void GetConnectionsResponse::clear_connections() {
  connections_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection* GetConnectionsResponse::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection >*
GetConnectionsResponse::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.connections)
  return &connections_;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection& GetConnectionsResponse::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection& GetConnectionsResponse::connections(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.connections)
  return _internal_connections(index);
}
inline ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection* GetConnectionsResponse::_internal_add_connections() {
  return connections_.Add();
}
inline ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection* GetConnectionsResponse::add_connections() {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.connections)
  return _internal_add_connections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Connection >&
GetConnectionsResponse::connections() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetConnectionsResponse.connections)
  return connections_;
}

// -------------------------------------------------------------------

// UpdateConnectionRequest

// string client_id = 2[json_name = "clientId"];
inline void UpdateConnectionRequest::clear_client_id() {
  client_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateConnectionRequest::client_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_id)
  return _internal_client_id();
}
inline void UpdateConnectionRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_id)
}
inline std::string* UpdateConnectionRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& UpdateConnectionRequest::_internal_client_id() const {
  return client_id_.Get();
}
inline void UpdateConnectionRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateConnectionRequest::set_client_id(std::string&& value) {
  
  client_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_id)
}
inline void UpdateConnectionRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_id)
}
inline void UpdateConnectionRequest::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_id)
}
inline std::string* UpdateConnectionRequest::_internal_mutable_client_id() {
  
  return client_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateConnectionRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateConnectionRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_id)
}

// string client_secret = 3[json_name = "clientSecret"];
inline void UpdateConnectionRequest::clear_client_secret() {
  client_secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateConnectionRequest::client_secret() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_secret)
  return _internal_client_secret();
}
inline void UpdateConnectionRequest::set_client_secret(const std::string& value) {
  _internal_set_client_secret(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_secret)
}
inline std::string* UpdateConnectionRequest::mutable_client_secret() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_secret)
  return _internal_mutable_client_secret();
}
inline const std::string& UpdateConnectionRequest::_internal_client_secret() const {
  return client_secret_.Get();
}
inline void UpdateConnectionRequest::_internal_set_client_secret(const std::string& value) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateConnectionRequest::set_client_secret(std::string&& value) {
  
  client_secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_secret)
}
inline void UpdateConnectionRequest::set_client_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_secret)
}
inline void UpdateConnectionRequest::set_client_secret(const char* value,
    size_t size) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_secret)
}
inline std::string* UpdateConnectionRequest::_internal_mutable_client_secret() {
  
  return client_secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateConnectionRequest::release_client_secret() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_secret)
  return client_secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateConnectionRequest::set_allocated_client_secret(std::string* client_secret) {
  if (client_secret != nullptr) {
    
  } else {
    
  }
  client_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.client_secret)
}

// string button_image_url = 4[json_name = "buttonImageUrl"];
inline void UpdateConnectionRequest::clear_button_image_url() {
  button_image_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateConnectionRequest::button_image_url() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.button_image_url)
  return _internal_button_image_url();
}
inline void UpdateConnectionRequest::set_button_image_url(const std::string& value) {
  _internal_set_button_image_url(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.button_image_url)
}
inline std::string* UpdateConnectionRequest::mutable_button_image_url() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.button_image_url)
  return _internal_mutable_button_image_url();
}
inline const std::string& UpdateConnectionRequest::_internal_button_image_url() const {
  return button_image_url_.Get();
}
inline void UpdateConnectionRequest::_internal_set_button_image_url(const std::string& value) {
  
  button_image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateConnectionRequest::set_button_image_url(std::string&& value) {
  
  button_image_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.button_image_url)
}
inline void UpdateConnectionRequest::set_button_image_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  button_image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.button_image_url)
}
inline void UpdateConnectionRequest::set_button_image_url(const char* value,
    size_t size) {
  
  button_image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.button_image_url)
}
inline std::string* UpdateConnectionRequest::_internal_mutable_button_image_url() {
  
  return button_image_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateConnectionRequest::release_button_image_url() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.button_image_url)
  return button_image_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateConnectionRequest::set_allocated_button_image_url(std::string* button_image_url) {
  if (button_image_url != nullptr) {
    
  } else {
    
  }
  button_image_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), button_image_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.button_image_url)
}

// .depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.Providers provider = 6[json_name = "provider"];
inline void UpdateConnectionRequest::clear_provider() {
  provider_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Providers UpdateConnectionRequest::_internal_provider() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Providers >(provider_);
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Providers UpdateConnectionRequest::provider() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.provider)
  return _internal_provider();
}
inline void UpdateConnectionRequest::_internal_set_provider(::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Providers value) {
  
  provider_ = value;
}
inline void UpdateConnectionRequest::set_provider(::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Providers value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.provider)
}

// string oidc_discovery_url = 7[json_name = "oidcDiscoveryUrl"];
inline void UpdateConnectionRequest::clear_oidc_discovery_url() {
  oidc_discovery_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateConnectionRequest::oidc_discovery_url() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.oidc_discovery_url)
  return _internal_oidc_discovery_url();
}
inline void UpdateConnectionRequest::set_oidc_discovery_url(const std::string& value) {
  _internal_set_oidc_discovery_url(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.oidc_discovery_url)
}
inline std::string* UpdateConnectionRequest::mutable_oidc_discovery_url() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.oidc_discovery_url)
  return _internal_mutable_oidc_discovery_url();
}
inline const std::string& UpdateConnectionRequest::_internal_oidc_discovery_url() const {
  return oidc_discovery_url_.Get();
}
inline void UpdateConnectionRequest::_internal_set_oidc_discovery_url(const std::string& value) {
  
  oidc_discovery_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateConnectionRequest::set_oidc_discovery_url(std::string&& value) {
  
  oidc_discovery_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.oidc_discovery_url)
}
inline void UpdateConnectionRequest::set_oidc_discovery_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oidc_discovery_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.oidc_discovery_url)
}
inline void UpdateConnectionRequest::set_oidc_discovery_url(const char* value,
    size_t size) {
  
  oidc_discovery_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.oidc_discovery_url)
}
inline std::string* UpdateConnectionRequest::_internal_mutable_oidc_discovery_url() {
  
  return oidc_discovery_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateConnectionRequest::release_oidc_discovery_url() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.oidc_discovery_url)
  return oidc_discovery_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateConnectionRequest::set_allocated_oidc_discovery_url(std::string* oidc_discovery_url) {
  if (oidc_discovery_url != nullptr) {
    
  } else {
    
  }
  oidc_discovery_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oidc_discovery_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.oidc_discovery_url)
}

// repeated string mfa = 8[json_name = "mfa"];
inline int UpdateConnectionRequest::_internal_mfa_size() const {
  return mfa_.size();
}
inline int UpdateConnectionRequest::mfa_size() const {
  return _internal_mfa_size();
}
inline void UpdateConnectionRequest::clear_mfa() {
  mfa_.Clear();
}
inline std::string* UpdateConnectionRequest::add_mfa() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
  return _internal_add_mfa();
}
inline const std::string& UpdateConnectionRequest::_internal_mfa(int index) const {
  return mfa_.Get(index);
}
inline const std::string& UpdateConnectionRequest::mfa(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
  return _internal_mfa(index);
}
inline std::string* UpdateConnectionRequest::mutable_mfa(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
  return mfa_.Mutable(index);
}
inline void UpdateConnectionRequest::set_mfa(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
  mfa_.Mutable(index)->assign(value);
}
inline void UpdateConnectionRequest::set_mfa(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
  mfa_.Mutable(index)->assign(std::move(value));
}
inline void UpdateConnectionRequest::set_mfa(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mfa_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
}
inline void UpdateConnectionRequest::set_mfa(int index, const char* value, size_t size) {
  mfa_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
}
inline std::string* UpdateConnectionRequest::_internal_add_mfa() {
  return mfa_.Add();
}
inline void UpdateConnectionRequest::add_mfa(const std::string& value) {
  mfa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
}
inline void UpdateConnectionRequest::add_mfa(std::string&& value) {
  mfa_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
}
inline void UpdateConnectionRequest::add_mfa(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mfa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
}
inline void UpdateConnectionRequest::add_mfa(const char* value, size_t size) {
  mfa_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateConnectionRequest::mfa() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
  return mfa_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateConnectionRequest::mutable_mfa() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.mfa)
  return &mfa_;
}

// .depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.Types type = 9[json_name = "type"];
inline void UpdateConnectionRequest::clear_type() {
  type_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Types UpdateConnectionRequest::_internal_type() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Types >(type_);
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Types UpdateConnectionRequest::type() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.type)
  return _internal_type();
}
inline void UpdateConnectionRequest::_internal_set_type(::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Types value) {
  
  type_ = value;
}
inline void UpdateConnectionRequest::set_type(::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Types value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.type)
}

// string id = 10[json_name = "id"];
inline void UpdateConnectionRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateConnectionRequest::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.id)
  return _internal_id();
}
inline void UpdateConnectionRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.id)
}
inline std::string* UpdateConnectionRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.id)
  return _internal_mutable_id();
}
inline const std::string& UpdateConnectionRequest::_internal_id() const {
  return id_.Get();
}
inline void UpdateConnectionRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateConnectionRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.id)
}
inline void UpdateConnectionRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.id)
}
inline void UpdateConnectionRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.id)
}
inline std::string* UpdateConnectionRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateConnectionRequest::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateConnectionRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.id)
}

// string scopes = 11[json_name = "scopes"];
inline void UpdateConnectionRequest::clear_scopes() {
  scopes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateConnectionRequest::scopes() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.scopes)
  return _internal_scopes();
}
inline void UpdateConnectionRequest::set_scopes(const std::string& value) {
  _internal_set_scopes(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.scopes)
}
inline std::string* UpdateConnectionRequest::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.scopes)
  return _internal_mutable_scopes();
}
inline const std::string& UpdateConnectionRequest::_internal_scopes() const {
  return scopes_.Get();
}
inline void UpdateConnectionRequest::_internal_set_scopes(const std::string& value) {
  
  scopes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateConnectionRequest::set_scopes(std::string&& value) {
  
  scopes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.scopes)
}
inline void UpdateConnectionRequest::set_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scopes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.scopes)
}
inline void UpdateConnectionRequest::set_scopes(const char* value,
    size_t size) {
  
  scopes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.scopes)
}
inline std::string* UpdateConnectionRequest::_internal_mutable_scopes() {
  
  return scopes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateConnectionRequest::release_scopes() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.scopes)
  return scopes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateConnectionRequest::set_allocated_scopes(std::string* scopes) {
  if (scopes != nullptr) {
    
  } else {
    
  }
  scopes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scopes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateConnectionRequest.scopes)
}

// -------------------------------------------------------------------

// UpdateConnectionResponse

// -------------------------------------------------------------------

// DeleteConnectionRequest

// string id = 1[json_name = "id"];
inline void DeleteConnectionRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteConnectionRequest::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.DeleteConnectionRequest.id)
  return _internal_id();
}
inline void DeleteConnectionRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.DeleteConnectionRequest.id)
}
inline std::string* DeleteConnectionRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.DeleteConnectionRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteConnectionRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteConnectionRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteConnectionRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.DeleteConnectionRequest.id)
}
inline void DeleteConnectionRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.DeleteConnectionRequest.id)
}
inline void DeleteConnectionRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.DeleteConnectionRequest.id)
}
inline std::string* DeleteConnectionRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteConnectionRequest::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.DeleteConnectionRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteConnectionRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.DeleteConnectionRequest.id)
}

// -------------------------------------------------------------------

// DeleteConnectionResponse

// -------------------------------------------------------------------

// GetOAuth2ClientsRequest

// -------------------------------------------------------------------

// GetOAuth2ClientsResponse_Client

// repeated string allowed_cors_origins = 1[json_name = "allowedCorsOrigins"];
inline int GetOAuth2ClientsResponse_Client::_internal_allowed_cors_origins_size() const {
  return allowed_cors_origins_.size();
}
inline int GetOAuth2ClientsResponse_Client::allowed_cors_origins_size() const {
  return _internal_allowed_cors_origins_size();
}
inline void GetOAuth2ClientsResponse_Client::clear_allowed_cors_origins() {
  allowed_cors_origins_.Clear();
}
inline std::string* GetOAuth2ClientsResponse_Client::add_allowed_cors_origins() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
  return _internal_add_allowed_cors_origins();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_allowed_cors_origins(int index) const {
  return allowed_cors_origins_.Get(index);
}
inline const std::string& GetOAuth2ClientsResponse_Client::allowed_cors_origins(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
  return _internal_allowed_cors_origins(index);
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_allowed_cors_origins(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
  return allowed_cors_origins_.Mutable(index);
}
inline void GetOAuth2ClientsResponse_Client::set_allowed_cors_origins(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
  allowed_cors_origins_.Mutable(index)->assign(value);
}
inline void GetOAuth2ClientsResponse_Client::set_allowed_cors_origins(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
  allowed_cors_origins_.Mutable(index)->assign(std::move(value));
}
inline void GetOAuth2ClientsResponse_Client::set_allowed_cors_origins(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_cors_origins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
}
inline void GetOAuth2ClientsResponse_Client::set_allowed_cors_origins(int index, const char* value, size_t size) {
  allowed_cors_origins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_add_allowed_cors_origins() {
  return allowed_cors_origins_.Add();
}
inline void GetOAuth2ClientsResponse_Client::add_allowed_cors_origins(const std::string& value) {
  allowed_cors_origins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
}
inline void GetOAuth2ClientsResponse_Client::add_allowed_cors_origins(std::string&& value) {
  allowed_cors_origins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
}
inline void GetOAuth2ClientsResponse_Client::add_allowed_cors_origins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_cors_origins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
}
inline void GetOAuth2ClientsResponse_Client::add_allowed_cors_origins(const char* value, size_t size) {
  allowed_cors_origins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetOAuth2ClientsResponse_Client::allowed_cors_origins() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
  return allowed_cors_origins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetOAuth2ClientsResponse_Client::mutable_allowed_cors_origins() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.allowed_cors_origins)
  return &allowed_cors_origins_;
}

// repeated string audience = 2[json_name = "audience"];
inline int GetOAuth2ClientsResponse_Client::_internal_audience_size() const {
  return audience_.size();
}
inline int GetOAuth2ClientsResponse_Client::audience_size() const {
  return _internal_audience_size();
}
inline void GetOAuth2ClientsResponse_Client::clear_audience() {
  audience_.Clear();
}
inline std::string* GetOAuth2ClientsResponse_Client::add_audience() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
  return _internal_add_audience();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_audience(int index) const {
  return audience_.Get(index);
}
inline const std::string& GetOAuth2ClientsResponse_Client::audience(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
  return _internal_audience(index);
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_audience(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
  return audience_.Mutable(index);
}
inline void GetOAuth2ClientsResponse_Client::set_audience(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
  audience_.Mutable(index)->assign(value);
}
inline void GetOAuth2ClientsResponse_Client::set_audience(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
  audience_.Mutable(index)->assign(std::move(value));
}
inline void GetOAuth2ClientsResponse_Client::set_audience(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audience_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
}
inline void GetOAuth2ClientsResponse_Client::set_audience(int index, const char* value, size_t size) {
  audience_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_add_audience() {
  return audience_.Add();
}
inline void GetOAuth2ClientsResponse_Client::add_audience(const std::string& value) {
  audience_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
}
inline void GetOAuth2ClientsResponse_Client::add_audience(std::string&& value) {
  audience_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
}
inline void GetOAuth2ClientsResponse_Client::add_audience(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audience_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
}
inline void GetOAuth2ClientsResponse_Client::add_audience(const char* value, size_t size) {
  audience_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetOAuth2ClientsResponse_Client::audience() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
  return audience_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetOAuth2ClientsResponse_Client::mutable_audience() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.audience)
  return &audience_;
}

// bool backchannel_logout_session_required = 3[json_name = "backchannelLogoutSessionRequired"];
inline void GetOAuth2ClientsResponse_Client::clear_backchannel_logout_session_required() {
  backchannel_logout_session_required_ = false;
}
inline bool GetOAuth2ClientsResponse_Client::_internal_backchannel_logout_session_required() const {
  return backchannel_logout_session_required_;
}
inline bool GetOAuth2ClientsResponse_Client::backchannel_logout_session_required() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.backchannel_logout_session_required)
  return _internal_backchannel_logout_session_required();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_backchannel_logout_session_required(bool value) {
  
  backchannel_logout_session_required_ = value;
}
inline void GetOAuth2ClientsResponse_Client::set_backchannel_logout_session_required(bool value) {
  _internal_set_backchannel_logout_session_required(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.backchannel_logout_session_required)
}

// string backchannel_logout_uri = 4[json_name = "backchannelLogoutUri"];
inline void GetOAuth2ClientsResponse_Client::clear_backchannel_logout_uri() {
  backchannel_logout_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOAuth2ClientsResponse_Client::backchannel_logout_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.backchannel_logout_uri)
  return _internal_backchannel_logout_uri();
}
inline void GetOAuth2ClientsResponse_Client::set_backchannel_logout_uri(const std::string& value) {
  _internal_set_backchannel_logout_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.backchannel_logout_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_backchannel_logout_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.backchannel_logout_uri)
  return _internal_mutable_backchannel_logout_uri();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_backchannel_logout_uri() const {
  return backchannel_logout_uri_.Get();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_backchannel_logout_uri(const std::string& value) {
  
  backchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_backchannel_logout_uri(std::string&& value) {
  
  backchannel_logout_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.backchannel_logout_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_backchannel_logout_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  backchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.backchannel_logout_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_backchannel_logout_uri(const char* value,
    size_t size) {
  
  backchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.backchannel_logout_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_mutable_backchannel_logout_uri() {
  
  return backchannel_logout_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOAuth2ClientsResponse_Client::release_backchannel_logout_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.backchannel_logout_uri)
  return backchannel_logout_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_backchannel_logout_uri(std::string* backchannel_logout_uri) {
  if (backchannel_logout_uri != nullptr) {
    
  } else {
    
  }
  backchannel_logout_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backchannel_logout_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.backchannel_logout_uri)
}

// string client_id = 5[json_name = "clientId"];
inline void GetOAuth2ClientsResponse_Client::clear_client_id() {
  client_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOAuth2ClientsResponse_Client::client_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_id)
  return _internal_client_id();
}
inline void GetOAuth2ClientsResponse_Client::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_id)
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_client_id() const {
  return client_id_.Get();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_client_id(std::string&& value) {
  
  client_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_id)
}
inline void GetOAuth2ClientsResponse_Client::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_id)
}
inline void GetOAuth2ClientsResponse_Client::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_id)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_mutable_client_id() {
  
  return client_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOAuth2ClientsResponse_Client::release_client_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_id)
}

// string client_name = 6[json_name = "clientName"];
inline void GetOAuth2ClientsResponse_Client::clear_client_name() {
  client_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOAuth2ClientsResponse_Client::client_name() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_name)
  return _internal_client_name();
}
inline void GetOAuth2ClientsResponse_Client::set_client_name(const std::string& value) {
  _internal_set_client_name(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_name)
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_client_name() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_name)
  return _internal_mutable_client_name();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_client_name() const {
  return client_name_.Get();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_client_name(const std::string& value) {
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_client_name(std::string&& value) {
  
  client_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_name)
}
inline void GetOAuth2ClientsResponse_Client::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_name)
}
inline void GetOAuth2ClientsResponse_Client::set_client_name(const char* value,
    size_t size) {
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_name)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_mutable_client_name() {
  
  return client_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOAuth2ClientsResponse_Client::release_client_name() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_name)
  return client_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    
  } else {
    
  }
  client_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_name)
}

// int64 client_secret_expires_at = 7[json_name = "clientSecretExpiresAt"];
inline void GetOAuth2ClientsResponse_Client::clear_client_secret_expires_at() {
  client_secret_expires_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOAuth2ClientsResponse_Client::_internal_client_secret_expires_at() const {
  return client_secret_expires_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOAuth2ClientsResponse_Client::client_secret_expires_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_secret_expires_at)
  return _internal_client_secret_expires_at();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_client_secret_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  client_secret_expires_at_ = value;
}
inline void GetOAuth2ClientsResponse_Client::set_client_secret_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_client_secret_expires_at(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_secret_expires_at)
}

// string client_uri = 8[json_name = "clientUri"];
inline void GetOAuth2ClientsResponse_Client::clear_client_uri() {
  client_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOAuth2ClientsResponse_Client::client_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_uri)
  return _internal_client_uri();
}
inline void GetOAuth2ClientsResponse_Client::set_client_uri(const std::string& value) {
  _internal_set_client_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_client_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_uri)
  return _internal_mutable_client_uri();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_client_uri() const {
  return client_uri_.Get();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_client_uri(const std::string& value) {
  
  client_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_client_uri(std::string&& value) {
  
  client_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_client_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_client_uri(const char* value,
    size_t size) {
  
  client_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_mutable_client_uri() {
  
  return client_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOAuth2ClientsResponse_Client::release_client_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_uri)
  return client_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_client_uri(std::string* client_uri) {
  if (client_uri != nullptr) {
    
  } else {
    
  }
  client_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_uri)
}

// repeated string contacts = 9[json_name = "contacts"];
inline int GetOAuth2ClientsResponse_Client::_internal_contacts_size() const {
  return contacts_.size();
}
inline int GetOAuth2ClientsResponse_Client::contacts_size() const {
  return _internal_contacts_size();
}
inline void GetOAuth2ClientsResponse_Client::clear_contacts() {
  contacts_.Clear();
}
inline std::string* GetOAuth2ClientsResponse_Client::add_contacts() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
  return _internal_add_contacts();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_contacts(int index) const {
  return contacts_.Get(index);
}
inline const std::string& GetOAuth2ClientsResponse_Client::contacts(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
  return _internal_contacts(index);
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
  return contacts_.Mutable(index);
}
inline void GetOAuth2ClientsResponse_Client::set_contacts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
  contacts_.Mutable(index)->assign(value);
}
inline void GetOAuth2ClientsResponse_Client::set_contacts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
  contacts_.Mutable(index)->assign(std::move(value));
}
inline void GetOAuth2ClientsResponse_Client::set_contacts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  contacts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
}
inline void GetOAuth2ClientsResponse_Client::set_contacts(int index, const char* value, size_t size) {
  contacts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_add_contacts() {
  return contacts_.Add();
}
inline void GetOAuth2ClientsResponse_Client::add_contacts(const std::string& value) {
  contacts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
}
inline void GetOAuth2ClientsResponse_Client::add_contacts(std::string&& value) {
  contacts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
}
inline void GetOAuth2ClientsResponse_Client::add_contacts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  contacts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
}
inline void GetOAuth2ClientsResponse_Client::add_contacts(const char* value, size_t size) {
  contacts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetOAuth2ClientsResponse_Client::contacts() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
  return contacts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetOAuth2ClientsResponse_Client::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.contacts)
  return &contacts_;
}

// .google.protobuf.Timestamp created_at = 10[json_name = "createdAt"];
inline bool GetOAuth2ClientsResponse_Client::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetOAuth2ClientsResponse_Client::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetOAuth2ClientsResponse_Client::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetOAuth2ClientsResponse_Client::created_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.created_at)
  return _internal_created_at();
}
inline void GetOAuth2ClientsResponse_Client::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetOAuth2ClientsResponse_Client::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetOAuth2ClientsResponse_Client::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetOAuth2ClientsResponse_Client::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetOAuth2ClientsResponse_Client::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.created_at)
  return _internal_mutable_created_at();
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.created_at)
}

// bool frontchannel_logout_session_required = 11[json_name = "frontchannelLogoutSessionRequired"];
inline void GetOAuth2ClientsResponse_Client::clear_frontchannel_logout_session_required() {
  frontchannel_logout_session_required_ = false;
}
inline bool GetOAuth2ClientsResponse_Client::_internal_frontchannel_logout_session_required() const {
  return frontchannel_logout_session_required_;
}
inline bool GetOAuth2ClientsResponse_Client::frontchannel_logout_session_required() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.frontchannel_logout_session_required)
  return _internal_frontchannel_logout_session_required();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_frontchannel_logout_session_required(bool value) {
  
  frontchannel_logout_session_required_ = value;
}
inline void GetOAuth2ClientsResponse_Client::set_frontchannel_logout_session_required(bool value) {
  _internal_set_frontchannel_logout_session_required(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.frontchannel_logout_session_required)
}

// string frontchannel_logout_uri = 12[json_name = "frontchannelLogoutUri"];
inline void GetOAuth2ClientsResponse_Client::clear_frontchannel_logout_uri() {
  frontchannel_logout_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOAuth2ClientsResponse_Client::frontchannel_logout_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.frontchannel_logout_uri)
  return _internal_frontchannel_logout_uri();
}
inline void GetOAuth2ClientsResponse_Client::set_frontchannel_logout_uri(const std::string& value) {
  _internal_set_frontchannel_logout_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.frontchannel_logout_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_frontchannel_logout_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.frontchannel_logout_uri)
  return _internal_mutable_frontchannel_logout_uri();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_frontchannel_logout_uri() const {
  return frontchannel_logout_uri_.Get();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_frontchannel_logout_uri(const std::string& value) {
  
  frontchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_frontchannel_logout_uri(std::string&& value) {
  
  frontchannel_logout_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.frontchannel_logout_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_frontchannel_logout_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frontchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.frontchannel_logout_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_frontchannel_logout_uri(const char* value,
    size_t size) {
  
  frontchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.frontchannel_logout_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_mutable_frontchannel_logout_uri() {
  
  return frontchannel_logout_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOAuth2ClientsResponse_Client::release_frontchannel_logout_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.frontchannel_logout_uri)
  return frontchannel_logout_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_frontchannel_logout_uri(std::string* frontchannel_logout_uri) {
  if (frontchannel_logout_uri != nullptr) {
    
  } else {
    
  }
  frontchannel_logout_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frontchannel_logout_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.frontchannel_logout_uri)
}

// repeated .depot.devtools.auth.v0.identity.admin.GrantType grant_types = 13[json_name = "grantTypes"];
inline int GetOAuth2ClientsResponse_Client::_internal_grant_types_size() const {
  return grant_types_.size();
}
inline int GetOAuth2ClientsResponse_Client::grant_types_size() const {
  return _internal_grant_types_size();
}
inline void GetOAuth2ClientsResponse_Client::clear_grant_types() {
  grant_types_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::GrantType GetOAuth2ClientsResponse_Client::_internal_grant_types(int index) const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::GrantType >(grant_types_.Get(index));
}
inline ::depot::devtools::auth::v0::identity::admin::GrantType GetOAuth2ClientsResponse_Client::grant_types(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.grant_types)
  return _internal_grant_types(index);
}
inline void GetOAuth2ClientsResponse_Client::set_grant_types(int index, ::depot::devtools::auth::v0::identity::admin::GrantType value) {
  grant_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.grant_types)
}
inline void GetOAuth2ClientsResponse_Client::_internal_add_grant_types(::depot::devtools::auth::v0::identity::admin::GrantType value) {
  grant_types_.Add(value);
}
inline void GetOAuth2ClientsResponse_Client::add_grant_types(::depot::devtools::auth::v0::identity::admin::GrantType value) {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.grant_types)
  _internal_add_grant_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetOAuth2ClientsResponse_Client::grant_types() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.grant_types)
  return grant_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetOAuth2ClientsResponse_Client::_internal_mutable_grant_types() {
  return &grant_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetOAuth2ClientsResponse_Client::mutable_grant_types() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.grant_types)
  return _internal_mutable_grant_types();
}

// .google.protobuf.Struct jwks = 14[json_name = "jwks"];
inline bool GetOAuth2ClientsResponse_Client::_internal_has_jwks() const {
  return this != internal_default_instance() && jwks_ != nullptr;
}
inline bool GetOAuth2ClientsResponse_Client::has_jwks() const {
  return _internal_has_jwks();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& GetOAuth2ClientsResponse_Client::_internal_jwks() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = jwks_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& GetOAuth2ClientsResponse_Client::jwks() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks)
  return _internal_jwks();
}
inline void GetOAuth2ClientsResponse_Client::unsafe_arena_set_allocated_jwks(
    PROTOBUF_NAMESPACE_ID::Struct* jwks) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jwks_);
  }
  jwks_ = jwks;
  if (jwks) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks)
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetOAuth2ClientsResponse_Client::release_jwks() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = jwks_;
  jwks_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetOAuth2ClientsResponse_Client::unsafe_arena_release_jwks() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = jwks_;
  jwks_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetOAuth2ClientsResponse_Client::_internal_mutable_jwks() {
  
  if (jwks_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    jwks_ = p;
  }
  return jwks_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetOAuth2ClientsResponse_Client::mutable_jwks() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks)
  return _internal_mutable_jwks();
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_jwks(PROTOBUF_NAMESPACE_ID::Struct* jwks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(jwks_);
  }
  if (jwks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jwks)->GetArena();
    if (message_arena != submessage_arena) {
      jwks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jwks, submessage_arena);
    }
    
  } else {
    
  }
  jwks_ = jwks;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks)
}

// string jwks_uri = 15[json_name = "jwksUri"];
inline void GetOAuth2ClientsResponse_Client::clear_jwks_uri() {
  jwks_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOAuth2ClientsResponse_Client::jwks_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks_uri)
  return _internal_jwks_uri();
}
inline void GetOAuth2ClientsResponse_Client::set_jwks_uri(const std::string& value) {
  _internal_set_jwks_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_jwks_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks_uri)
  return _internal_mutable_jwks_uri();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_jwks_uri() const {
  return jwks_uri_.Get();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_jwks_uri(const std::string& value) {
  
  jwks_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_jwks_uri(std::string&& value) {
  
  jwks_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_jwks_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jwks_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_jwks_uri(const char* value,
    size_t size) {
  
  jwks_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_mutable_jwks_uri() {
  
  return jwks_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOAuth2ClientsResponse_Client::release_jwks_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks_uri)
  return jwks_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_jwks_uri(std::string* jwks_uri) {
  if (jwks_uri != nullptr) {
    
  } else {
    
  }
  jwks_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jwks_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.jwks_uri)
}

// string logo_uri = 16[json_name = "logoUri"];
inline void GetOAuth2ClientsResponse_Client::clear_logo_uri() {
  logo_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOAuth2ClientsResponse_Client::logo_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.logo_uri)
  return _internal_logo_uri();
}
inline void GetOAuth2ClientsResponse_Client::set_logo_uri(const std::string& value) {
  _internal_set_logo_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.logo_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_logo_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.logo_uri)
  return _internal_mutable_logo_uri();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_logo_uri() const {
  return logo_uri_.Get();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_logo_uri(const std::string& value) {
  
  logo_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_logo_uri(std::string&& value) {
  
  logo_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.logo_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_logo_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logo_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.logo_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_logo_uri(const char* value,
    size_t size) {
  
  logo_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.logo_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_mutable_logo_uri() {
  
  return logo_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOAuth2ClientsResponse_Client::release_logo_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.logo_uri)
  return logo_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_logo_uri(std::string* logo_uri) {
  if (logo_uri != nullptr) {
    
  } else {
    
  }
  logo_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logo_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.logo_uri)
}

// .google.protobuf.Struct metadata = 17[json_name = "metadata"];
inline bool GetOAuth2ClientsResponse_Client::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool GetOAuth2ClientsResponse_Client::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& GetOAuth2ClientsResponse_Client::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& GetOAuth2ClientsResponse_Client::metadata() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.metadata)
  return _internal_metadata();
}
inline void GetOAuth2ClientsResponse_Client::unsafe_arena_set_allocated_metadata(
    PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.metadata)
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetOAuth2ClientsResponse_Client::release_metadata() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetOAuth2ClientsResponse_Client::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetOAuth2ClientsResponse_Client::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetOAuth2ClientsResponse_Client::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.metadata)
  return _internal_mutable_metadata();
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.metadata)
}

// string owner = 18[json_name = "owner"];
inline void GetOAuth2ClientsResponse_Client::clear_owner() {
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOAuth2ClientsResponse_Client::owner() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.owner)
  return _internal_owner();
}
inline void GetOAuth2ClientsResponse_Client::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.owner)
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.owner)
  return _internal_mutable_owner();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_owner() const {
  return owner_.Get();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_owner(const std::string& value) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_owner(std::string&& value) {
  
  owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.owner)
}
inline void GetOAuth2ClientsResponse_Client::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.owner)
}
inline void GetOAuth2ClientsResponse_Client::set_owner(const char* value,
    size_t size) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.owner)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_mutable_owner() {
  
  return owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOAuth2ClientsResponse_Client::release_owner() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.owner)
}

// string policy_uri = 19[json_name = "policyUri"];
inline void GetOAuth2ClientsResponse_Client::clear_policy_uri() {
  policy_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOAuth2ClientsResponse_Client::policy_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.policy_uri)
  return _internal_policy_uri();
}
inline void GetOAuth2ClientsResponse_Client::set_policy_uri(const std::string& value) {
  _internal_set_policy_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.policy_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_policy_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.policy_uri)
  return _internal_mutable_policy_uri();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_policy_uri() const {
  return policy_uri_.Get();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_policy_uri(const std::string& value) {
  
  policy_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_policy_uri(std::string&& value) {
  
  policy_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.policy_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_policy_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  policy_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.policy_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_policy_uri(const char* value,
    size_t size) {
  
  policy_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.policy_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_mutable_policy_uri() {
  
  return policy_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOAuth2ClientsResponse_Client::release_policy_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.policy_uri)
  return policy_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_policy_uri(std::string* policy_uri) {
  if (policy_uri != nullptr) {
    
  } else {
    
  }
  policy_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.policy_uri)
}

// repeated string post_logout_redirect_uris = 20[json_name = "postLogoutRedirectUris"];
inline int GetOAuth2ClientsResponse_Client::_internal_post_logout_redirect_uris_size() const {
  return post_logout_redirect_uris_.size();
}
inline int GetOAuth2ClientsResponse_Client::post_logout_redirect_uris_size() const {
  return _internal_post_logout_redirect_uris_size();
}
inline void GetOAuth2ClientsResponse_Client::clear_post_logout_redirect_uris() {
  post_logout_redirect_uris_.Clear();
}
inline std::string* GetOAuth2ClientsResponse_Client::add_post_logout_redirect_uris() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
  return _internal_add_post_logout_redirect_uris();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_post_logout_redirect_uris(int index) const {
  return post_logout_redirect_uris_.Get(index);
}
inline const std::string& GetOAuth2ClientsResponse_Client::post_logout_redirect_uris(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
  return _internal_post_logout_redirect_uris(index);
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_post_logout_redirect_uris(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
  return post_logout_redirect_uris_.Mutable(index);
}
inline void GetOAuth2ClientsResponse_Client::set_post_logout_redirect_uris(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
  post_logout_redirect_uris_.Mutable(index)->assign(value);
}
inline void GetOAuth2ClientsResponse_Client::set_post_logout_redirect_uris(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
  post_logout_redirect_uris_.Mutable(index)->assign(std::move(value));
}
inline void GetOAuth2ClientsResponse_Client::set_post_logout_redirect_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  post_logout_redirect_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
}
inline void GetOAuth2ClientsResponse_Client::set_post_logout_redirect_uris(int index, const char* value, size_t size) {
  post_logout_redirect_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_add_post_logout_redirect_uris() {
  return post_logout_redirect_uris_.Add();
}
inline void GetOAuth2ClientsResponse_Client::add_post_logout_redirect_uris(const std::string& value) {
  post_logout_redirect_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
}
inline void GetOAuth2ClientsResponse_Client::add_post_logout_redirect_uris(std::string&& value) {
  post_logout_redirect_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
}
inline void GetOAuth2ClientsResponse_Client::add_post_logout_redirect_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  post_logout_redirect_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
}
inline void GetOAuth2ClientsResponse_Client::add_post_logout_redirect_uris(const char* value, size_t size) {
  post_logout_redirect_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetOAuth2ClientsResponse_Client::post_logout_redirect_uris() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
  return post_logout_redirect_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetOAuth2ClientsResponse_Client::mutable_post_logout_redirect_uris() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.post_logout_redirect_uris)
  return &post_logout_redirect_uris_;
}

// repeated string redirect_uris = 21[json_name = "redirectUris"];
inline int GetOAuth2ClientsResponse_Client::_internal_redirect_uris_size() const {
  return redirect_uris_.size();
}
inline int GetOAuth2ClientsResponse_Client::redirect_uris_size() const {
  return _internal_redirect_uris_size();
}
inline void GetOAuth2ClientsResponse_Client::clear_redirect_uris() {
  redirect_uris_.Clear();
}
inline std::string* GetOAuth2ClientsResponse_Client::add_redirect_uris() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
  return _internal_add_redirect_uris();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_redirect_uris(int index) const {
  return redirect_uris_.Get(index);
}
inline const std::string& GetOAuth2ClientsResponse_Client::redirect_uris(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
  return _internal_redirect_uris(index);
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_redirect_uris(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
  return redirect_uris_.Mutable(index);
}
inline void GetOAuth2ClientsResponse_Client::set_redirect_uris(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
  redirect_uris_.Mutable(index)->assign(value);
}
inline void GetOAuth2ClientsResponse_Client::set_redirect_uris(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
  redirect_uris_.Mutable(index)->assign(std::move(value));
}
inline void GetOAuth2ClientsResponse_Client::set_redirect_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  redirect_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
}
inline void GetOAuth2ClientsResponse_Client::set_redirect_uris(int index, const char* value, size_t size) {
  redirect_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_add_redirect_uris() {
  return redirect_uris_.Add();
}
inline void GetOAuth2ClientsResponse_Client::add_redirect_uris(const std::string& value) {
  redirect_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
}
inline void GetOAuth2ClientsResponse_Client::add_redirect_uris(std::string&& value) {
  redirect_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
}
inline void GetOAuth2ClientsResponse_Client::add_redirect_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  redirect_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
}
inline void GetOAuth2ClientsResponse_Client::add_redirect_uris(const char* value, size_t size) {
  redirect_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetOAuth2ClientsResponse_Client::redirect_uris() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
  return redirect_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetOAuth2ClientsResponse_Client::mutable_redirect_uris() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.redirect_uris)
  return &redirect_uris_;
}

// .depot.devtools.auth.v0.identity.admin.RequestObjectSigningAlg request_object_signing_alg = 22[json_name = "requestObjectSigningAlg"];
inline void GetOAuth2ClientsResponse_Client::clear_request_object_signing_alg() {
  request_object_signing_alg_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg GetOAuth2ClientsResponse_Client::_internal_request_object_signing_alg() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg >(request_object_signing_alg_);
}
inline ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg GetOAuth2ClientsResponse_Client::request_object_signing_alg() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_object_signing_alg)
  return _internal_request_object_signing_alg();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_request_object_signing_alg(::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg value) {
  
  request_object_signing_alg_ = value;
}
inline void GetOAuth2ClientsResponse_Client::set_request_object_signing_alg(::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg value) {
  _internal_set_request_object_signing_alg(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_object_signing_alg)
}

// repeated string request_uris = 23[json_name = "requestUris"];
inline int GetOAuth2ClientsResponse_Client::_internal_request_uris_size() const {
  return request_uris_.size();
}
inline int GetOAuth2ClientsResponse_Client::request_uris_size() const {
  return _internal_request_uris_size();
}
inline void GetOAuth2ClientsResponse_Client::clear_request_uris() {
  request_uris_.Clear();
}
inline std::string* GetOAuth2ClientsResponse_Client::add_request_uris() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
  return _internal_add_request_uris();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_request_uris(int index) const {
  return request_uris_.Get(index);
}
inline const std::string& GetOAuth2ClientsResponse_Client::request_uris(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
  return _internal_request_uris(index);
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_request_uris(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
  return request_uris_.Mutable(index);
}
inline void GetOAuth2ClientsResponse_Client::set_request_uris(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
  request_uris_.Mutable(index)->assign(value);
}
inline void GetOAuth2ClientsResponse_Client::set_request_uris(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
  request_uris_.Mutable(index)->assign(std::move(value));
}
inline void GetOAuth2ClientsResponse_Client::set_request_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
}
inline void GetOAuth2ClientsResponse_Client::set_request_uris(int index, const char* value, size_t size) {
  request_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_add_request_uris() {
  return request_uris_.Add();
}
inline void GetOAuth2ClientsResponse_Client::add_request_uris(const std::string& value) {
  request_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
}
inline void GetOAuth2ClientsResponse_Client::add_request_uris(std::string&& value) {
  request_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
}
inline void GetOAuth2ClientsResponse_Client::add_request_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
}
inline void GetOAuth2ClientsResponse_Client::add_request_uris(const char* value, size_t size) {
  request_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetOAuth2ClientsResponse_Client::request_uris() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
  return request_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetOAuth2ClientsResponse_Client::mutable_request_uris() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.request_uris)
  return &request_uris_;
}

// repeated .depot.devtools.auth.v0.identity.admin.ResponseType response_types = 24[json_name = "responseTypes"];
inline int GetOAuth2ClientsResponse_Client::_internal_response_types_size() const {
  return response_types_.size();
}
inline int GetOAuth2ClientsResponse_Client::response_types_size() const {
  return _internal_response_types_size();
}
inline void GetOAuth2ClientsResponse_Client::clear_response_types() {
  response_types_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::ResponseType GetOAuth2ClientsResponse_Client::_internal_response_types(int index) const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::ResponseType >(response_types_.Get(index));
}
inline ::depot::devtools::auth::v0::identity::admin::ResponseType GetOAuth2ClientsResponse_Client::response_types(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.response_types)
  return _internal_response_types(index);
}
inline void GetOAuth2ClientsResponse_Client::set_response_types(int index, ::depot::devtools::auth::v0::identity::admin::ResponseType value) {
  response_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.response_types)
}
inline void GetOAuth2ClientsResponse_Client::_internal_add_response_types(::depot::devtools::auth::v0::identity::admin::ResponseType value) {
  response_types_.Add(value);
}
inline void GetOAuth2ClientsResponse_Client::add_response_types(::depot::devtools::auth::v0::identity::admin::ResponseType value) {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.response_types)
  _internal_add_response_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetOAuth2ClientsResponse_Client::response_types() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.response_types)
  return response_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetOAuth2ClientsResponse_Client::_internal_mutable_response_types() {
  return &response_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetOAuth2ClientsResponse_Client::mutable_response_types() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.response_types)
  return _internal_mutable_response_types();
}

// string scope = 25[json_name = "scope"];
inline void GetOAuth2ClientsResponse_Client::clear_scope() {
  scope_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOAuth2ClientsResponse_Client::scope() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.scope)
  return _internal_scope();
}
inline void GetOAuth2ClientsResponse_Client::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.scope)
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.scope)
  return _internal_mutable_scope();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_scope() const {
  return scope_.Get();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_scope(const std::string& value) {
  
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_scope(std::string&& value) {
  
  scope_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.scope)
}
inline void GetOAuth2ClientsResponse_Client::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.scope)
}
inline void GetOAuth2ClientsResponse_Client::set_scope(const char* value,
    size_t size) {
  
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.scope)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_mutable_scope() {
  
  return scope_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOAuth2ClientsResponse_Client::release_scope() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.scope)
  return scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.scope)
}

// string sector_identifier_uri = 26[json_name = "sectorIdentifierUri"];
inline void GetOAuth2ClientsResponse_Client::clear_sector_identifier_uri() {
  sector_identifier_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOAuth2ClientsResponse_Client::sector_identifier_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.sector_identifier_uri)
  return _internal_sector_identifier_uri();
}
inline void GetOAuth2ClientsResponse_Client::set_sector_identifier_uri(const std::string& value) {
  _internal_set_sector_identifier_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.sector_identifier_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_sector_identifier_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.sector_identifier_uri)
  return _internal_mutable_sector_identifier_uri();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_sector_identifier_uri() const {
  return sector_identifier_uri_.Get();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_sector_identifier_uri(const std::string& value) {
  
  sector_identifier_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_sector_identifier_uri(std::string&& value) {
  
  sector_identifier_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.sector_identifier_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_sector_identifier_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sector_identifier_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.sector_identifier_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_sector_identifier_uri(const char* value,
    size_t size) {
  
  sector_identifier_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.sector_identifier_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_mutable_sector_identifier_uri() {
  
  return sector_identifier_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOAuth2ClientsResponse_Client::release_sector_identifier_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.sector_identifier_uri)
  return sector_identifier_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_sector_identifier_uri(std::string* sector_identifier_uri) {
  if (sector_identifier_uri != nullptr) {
    
  } else {
    
  }
  sector_identifier_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sector_identifier_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.sector_identifier_uri)
}

// .depot.devtools.auth.v0.identity.admin.SubjectType subject_type = 27[json_name = "subjectType"];
inline void GetOAuth2ClientsResponse_Client::clear_subject_type() {
  subject_type_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::SubjectType GetOAuth2ClientsResponse_Client::_internal_subject_type() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::SubjectType >(subject_type_);
}
inline ::depot::devtools::auth::v0::identity::admin::SubjectType GetOAuth2ClientsResponse_Client::subject_type() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.subject_type)
  return _internal_subject_type();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_subject_type(::depot::devtools::auth::v0::identity::admin::SubjectType value) {
  
  subject_type_ = value;
}
inline void GetOAuth2ClientsResponse_Client::set_subject_type(::depot::devtools::auth::v0::identity::admin::SubjectType value) {
  _internal_set_subject_type(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.subject_type)
}

// .depot.devtools.auth.v0.identity.admin.TokenEndpointAuthMethod token_endpoint_auth_method = 28[json_name = "tokenEndpointAuthMethod"];
inline void GetOAuth2ClientsResponse_Client::clear_token_endpoint_auth_method() {
  token_endpoint_auth_method_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod GetOAuth2ClientsResponse_Client::_internal_token_endpoint_auth_method() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod >(token_endpoint_auth_method_);
}
inline ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod GetOAuth2ClientsResponse_Client::token_endpoint_auth_method() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.token_endpoint_auth_method)
  return _internal_token_endpoint_auth_method();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_token_endpoint_auth_method(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod value) {
  
  token_endpoint_auth_method_ = value;
}
inline void GetOAuth2ClientsResponse_Client::set_token_endpoint_auth_method(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod value) {
  _internal_set_token_endpoint_auth_method(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.token_endpoint_auth_method)
}

// .depot.devtools.auth.v0.identity.admin.TokenEndpointAuthSigningAlg token_endpoint_auth_signing_alg = 29[json_name = "tokenEndpointAuthSigningAlg"];
inline void GetOAuth2ClientsResponse_Client::clear_token_endpoint_auth_signing_alg() {
  token_endpoint_auth_signing_alg_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg GetOAuth2ClientsResponse_Client::_internal_token_endpoint_auth_signing_alg() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg >(token_endpoint_auth_signing_alg_);
}
inline ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg GetOAuth2ClientsResponse_Client::token_endpoint_auth_signing_alg() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.token_endpoint_auth_signing_alg)
  return _internal_token_endpoint_auth_signing_alg();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_token_endpoint_auth_signing_alg(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg value) {
  
  token_endpoint_auth_signing_alg_ = value;
}
inline void GetOAuth2ClientsResponse_Client::set_token_endpoint_auth_signing_alg(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg value) {
  _internal_set_token_endpoint_auth_signing_alg(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.token_endpoint_auth_signing_alg)
}

// string tos_uri = 30[json_name = "tosUri"];
inline void GetOAuth2ClientsResponse_Client::clear_tos_uri() {
  tos_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOAuth2ClientsResponse_Client::tos_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.tos_uri)
  return _internal_tos_uri();
}
inline void GetOAuth2ClientsResponse_Client::set_tos_uri(const std::string& value) {
  _internal_set_tos_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.tos_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::mutable_tos_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.tos_uri)
  return _internal_mutable_tos_uri();
}
inline const std::string& GetOAuth2ClientsResponse_Client::_internal_tos_uri() const {
  return tos_uri_.Get();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_tos_uri(const std::string& value) {
  
  tos_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_tos_uri(std::string&& value) {
  
  tos_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.tos_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_tos_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tos_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.tos_uri)
}
inline void GetOAuth2ClientsResponse_Client::set_tos_uri(const char* value,
    size_t size) {
  
  tos_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.tos_uri)
}
inline std::string* GetOAuth2ClientsResponse_Client::_internal_mutable_tos_uri() {
  
  return tos_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOAuth2ClientsResponse_Client::release_tos_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.tos_uri)
  return tos_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_tos_uri(std::string* tos_uri) {
  if (tos_uri != nullptr) {
    
  } else {
    
  }
  tos_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tos_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.tos_uri)
}

// .google.protobuf.Timestamp updated_at = 31[json_name = "updatedAt"];
inline bool GetOAuth2ClientsResponse_Client::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool GetOAuth2ClientsResponse_Client::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetOAuth2ClientsResponse_Client::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetOAuth2ClientsResponse_Client::updated_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.updated_at)
  return _internal_updated_at();
}
inline void GetOAuth2ClientsResponse_Client::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetOAuth2ClientsResponse_Client::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetOAuth2ClientsResponse_Client::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetOAuth2ClientsResponse_Client::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetOAuth2ClientsResponse_Client::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.updated_at)
  return _internal_mutable_updated_at();
}
inline void GetOAuth2ClientsResponse_Client::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.updated_at)
}

// .depot.devtools.auth.v0.identity.admin.UserinfoSignedResponseAlg userinfo_signed_response_alg = 32[json_name = "userinfoSignedResponseAlg"];
inline void GetOAuth2ClientsResponse_Client::clear_userinfo_signed_response_alg() {
  userinfo_signed_response_alg_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg GetOAuth2ClientsResponse_Client::_internal_userinfo_signed_response_alg() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg >(userinfo_signed_response_alg_);
}
inline ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg GetOAuth2ClientsResponse_Client::userinfo_signed_response_alg() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.userinfo_signed_response_alg)
  return _internal_userinfo_signed_response_alg();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_userinfo_signed_response_alg(::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg value) {
  
  userinfo_signed_response_alg_ = value;
}
inline void GetOAuth2ClientsResponse_Client::set_userinfo_signed_response_alg(::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg value) {
  _internal_set_userinfo_signed_response_alg(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.userinfo_signed_response_alg)
}

// .depot.devtools.auth.v0.identity.admin.ClientType client_type = 33[json_name = "clientType"];
inline void GetOAuth2ClientsResponse_Client::clear_client_type() {
  client_type_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::ClientType GetOAuth2ClientsResponse_Client::_internal_client_type() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::ClientType >(client_type_);
}
inline ::depot::devtools::auth::v0::identity::admin::ClientType GetOAuth2ClientsResponse_Client::client_type() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_type)
  return _internal_client_type();
}
inline void GetOAuth2ClientsResponse_Client::_internal_set_client_type(::depot::devtools::auth::v0::identity::admin::ClientType value) {
  
  client_type_ = value;
}
inline void GetOAuth2ClientsResponse_Client::set_client_type(::depot::devtools::auth::v0::identity::admin::ClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client.client_type)
}

// -------------------------------------------------------------------

// GetOAuth2ClientsResponse

// repeated .depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.Client clients = 1[json_name = "clients"];
inline int GetOAuth2ClientsResponse::_internal_clients_size() const {
  return clients_.size();
}
inline int GetOAuth2ClientsResponse::clients_size() const {
  return _internal_clients_size();
}
inline void GetOAuth2ClientsResponse::clear_clients() {
  clients_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client* GetOAuth2ClientsResponse::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.clients)
  return clients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client >*
GetOAuth2ClientsResponse::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.clients)
  return &clients_;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client& GetOAuth2ClientsResponse::_internal_clients(int index) const {
  return clients_.Get(index);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client& GetOAuth2ClientsResponse::clients(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.clients)
  return _internal_clients(index);
}
inline ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client* GetOAuth2ClientsResponse::_internal_add_clients() {
  return clients_.Add();
}
inline ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client* GetOAuth2ClientsResponse::add_clients() {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.clients)
  return _internal_add_clients();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetOAuth2ClientsResponse_Client >&
GetOAuth2ClientsResponse::clients() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetOAuth2ClientsResponse.clients)
  return clients_;
}

// -------------------------------------------------------------------

// CreateOAuth2ClientRequest

// repeated string allowed_cors_origins = 1[json_name = "allowedCorsOrigins"];
inline int CreateOAuth2ClientRequest::_internal_allowed_cors_origins_size() const {
  return allowed_cors_origins_.size();
}
inline int CreateOAuth2ClientRequest::allowed_cors_origins_size() const {
  return _internal_allowed_cors_origins_size();
}
inline void CreateOAuth2ClientRequest::clear_allowed_cors_origins() {
  allowed_cors_origins_.Clear();
}
inline std::string* CreateOAuth2ClientRequest::add_allowed_cors_origins() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
  return _internal_add_allowed_cors_origins();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_allowed_cors_origins(int index) const {
  return allowed_cors_origins_.Get(index);
}
inline const std::string& CreateOAuth2ClientRequest::allowed_cors_origins(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
  return _internal_allowed_cors_origins(index);
}
inline std::string* CreateOAuth2ClientRequest::mutable_allowed_cors_origins(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
  return allowed_cors_origins_.Mutable(index);
}
inline void CreateOAuth2ClientRequest::set_allowed_cors_origins(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
  allowed_cors_origins_.Mutable(index)->assign(value);
}
inline void CreateOAuth2ClientRequest::set_allowed_cors_origins(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
  allowed_cors_origins_.Mutable(index)->assign(std::move(value));
}
inline void CreateOAuth2ClientRequest::set_allowed_cors_origins(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_cors_origins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
}
inline void CreateOAuth2ClientRequest::set_allowed_cors_origins(int index, const char* value, size_t size) {
  allowed_cors_origins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
}
inline std::string* CreateOAuth2ClientRequest::_internal_add_allowed_cors_origins() {
  return allowed_cors_origins_.Add();
}
inline void CreateOAuth2ClientRequest::add_allowed_cors_origins(const std::string& value) {
  allowed_cors_origins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
}
inline void CreateOAuth2ClientRequest::add_allowed_cors_origins(std::string&& value) {
  allowed_cors_origins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
}
inline void CreateOAuth2ClientRequest::add_allowed_cors_origins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_cors_origins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
}
inline void CreateOAuth2ClientRequest::add_allowed_cors_origins(const char* value, size_t size) {
  allowed_cors_origins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateOAuth2ClientRequest::allowed_cors_origins() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
  return allowed_cors_origins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateOAuth2ClientRequest::mutable_allowed_cors_origins() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.allowed_cors_origins)
  return &allowed_cors_origins_;
}

// repeated string audience = 2[json_name = "audience"];
inline int CreateOAuth2ClientRequest::_internal_audience_size() const {
  return audience_.size();
}
inline int CreateOAuth2ClientRequest::audience_size() const {
  return _internal_audience_size();
}
inline void CreateOAuth2ClientRequest::clear_audience() {
  audience_.Clear();
}
inline std::string* CreateOAuth2ClientRequest::add_audience() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
  return _internal_add_audience();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_audience(int index) const {
  return audience_.Get(index);
}
inline const std::string& CreateOAuth2ClientRequest::audience(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
  return _internal_audience(index);
}
inline std::string* CreateOAuth2ClientRequest::mutable_audience(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
  return audience_.Mutable(index);
}
inline void CreateOAuth2ClientRequest::set_audience(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
  audience_.Mutable(index)->assign(value);
}
inline void CreateOAuth2ClientRequest::set_audience(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
  audience_.Mutable(index)->assign(std::move(value));
}
inline void CreateOAuth2ClientRequest::set_audience(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audience_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
}
inline void CreateOAuth2ClientRequest::set_audience(int index, const char* value, size_t size) {
  audience_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
}
inline std::string* CreateOAuth2ClientRequest::_internal_add_audience() {
  return audience_.Add();
}
inline void CreateOAuth2ClientRequest::add_audience(const std::string& value) {
  audience_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
}
inline void CreateOAuth2ClientRequest::add_audience(std::string&& value) {
  audience_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
}
inline void CreateOAuth2ClientRequest::add_audience(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audience_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
}
inline void CreateOAuth2ClientRequest::add_audience(const char* value, size_t size) {
  audience_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateOAuth2ClientRequest::audience() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
  return audience_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateOAuth2ClientRequest::mutable_audience() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.audience)
  return &audience_;
}

// bool backchannel_logout_session_required = 3[json_name = "backchannelLogoutSessionRequired"];
inline void CreateOAuth2ClientRequest::clear_backchannel_logout_session_required() {
  backchannel_logout_session_required_ = false;
}
inline bool CreateOAuth2ClientRequest::_internal_backchannel_logout_session_required() const {
  return backchannel_logout_session_required_;
}
inline bool CreateOAuth2ClientRequest::backchannel_logout_session_required() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.backchannel_logout_session_required)
  return _internal_backchannel_logout_session_required();
}
inline void CreateOAuth2ClientRequest::_internal_set_backchannel_logout_session_required(bool value) {
  
  backchannel_logout_session_required_ = value;
}
inline void CreateOAuth2ClientRequest::set_backchannel_logout_session_required(bool value) {
  _internal_set_backchannel_logout_session_required(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.backchannel_logout_session_required)
}

// string backchannel_logout_uri = 4[json_name = "backchannelLogoutUri"];
inline void CreateOAuth2ClientRequest::clear_backchannel_logout_uri() {
  backchannel_logout_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientRequest::backchannel_logout_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.backchannel_logout_uri)
  return _internal_backchannel_logout_uri();
}
inline void CreateOAuth2ClientRequest::set_backchannel_logout_uri(const std::string& value) {
  _internal_set_backchannel_logout_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.backchannel_logout_uri)
}
inline std::string* CreateOAuth2ClientRequest::mutable_backchannel_logout_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.backchannel_logout_uri)
  return _internal_mutable_backchannel_logout_uri();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_backchannel_logout_uri() const {
  return backchannel_logout_uri_.Get();
}
inline void CreateOAuth2ClientRequest::_internal_set_backchannel_logout_uri(const std::string& value) {
  
  backchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientRequest::set_backchannel_logout_uri(std::string&& value) {
  
  backchannel_logout_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.backchannel_logout_uri)
}
inline void CreateOAuth2ClientRequest::set_backchannel_logout_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  backchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.backchannel_logout_uri)
}
inline void CreateOAuth2ClientRequest::set_backchannel_logout_uri(const char* value,
    size_t size) {
  
  backchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.backchannel_logout_uri)
}
inline std::string* CreateOAuth2ClientRequest::_internal_mutable_backchannel_logout_uri() {
  
  return backchannel_logout_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientRequest::release_backchannel_logout_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.backchannel_logout_uri)
  return backchannel_logout_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientRequest::set_allocated_backchannel_logout_uri(std::string* backchannel_logout_uri) {
  if (backchannel_logout_uri != nullptr) {
    
  } else {
    
  }
  backchannel_logout_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backchannel_logout_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.backchannel_logout_uri)
}

// string client_name = 6[json_name = "clientName"];
inline void CreateOAuth2ClientRequest::clear_client_name() {
  client_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientRequest::client_name() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_name)
  return _internal_client_name();
}
inline void CreateOAuth2ClientRequest::set_client_name(const std::string& value) {
  _internal_set_client_name(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_name)
}
inline std::string* CreateOAuth2ClientRequest::mutable_client_name() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_name)
  return _internal_mutable_client_name();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_client_name() const {
  return client_name_.Get();
}
inline void CreateOAuth2ClientRequest::_internal_set_client_name(const std::string& value) {
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientRequest::set_client_name(std::string&& value) {
  
  client_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_name)
}
inline void CreateOAuth2ClientRequest::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_name)
}
inline void CreateOAuth2ClientRequest::set_client_name(const char* value,
    size_t size) {
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_name)
}
inline std::string* CreateOAuth2ClientRequest::_internal_mutable_client_name() {
  
  return client_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientRequest::release_client_name() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_name)
  return client_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientRequest::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    
  } else {
    
  }
  client_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_name)
}

// string client_uri = 8[json_name = "clientUri"];
inline void CreateOAuth2ClientRequest::clear_client_uri() {
  client_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientRequest::client_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_uri)
  return _internal_client_uri();
}
inline void CreateOAuth2ClientRequest::set_client_uri(const std::string& value) {
  _internal_set_client_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_uri)
}
inline std::string* CreateOAuth2ClientRequest::mutable_client_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_uri)
  return _internal_mutable_client_uri();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_client_uri() const {
  return client_uri_.Get();
}
inline void CreateOAuth2ClientRequest::_internal_set_client_uri(const std::string& value) {
  
  client_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientRequest::set_client_uri(std::string&& value) {
  
  client_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_uri)
}
inline void CreateOAuth2ClientRequest::set_client_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_uri)
}
inline void CreateOAuth2ClientRequest::set_client_uri(const char* value,
    size_t size) {
  
  client_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_uri)
}
inline std::string* CreateOAuth2ClientRequest::_internal_mutable_client_uri() {
  
  return client_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientRequest::release_client_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_uri)
  return client_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientRequest::set_allocated_client_uri(std::string* client_uri) {
  if (client_uri != nullptr) {
    
  } else {
    
  }
  client_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_uri)
}

// repeated string contacts = 9[json_name = "contacts"];
inline int CreateOAuth2ClientRequest::_internal_contacts_size() const {
  return contacts_.size();
}
inline int CreateOAuth2ClientRequest::contacts_size() const {
  return _internal_contacts_size();
}
inline void CreateOAuth2ClientRequest::clear_contacts() {
  contacts_.Clear();
}
inline std::string* CreateOAuth2ClientRequest::add_contacts() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
  return _internal_add_contacts();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_contacts(int index) const {
  return contacts_.Get(index);
}
inline const std::string& CreateOAuth2ClientRequest::contacts(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
  return _internal_contacts(index);
}
inline std::string* CreateOAuth2ClientRequest::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
  return contacts_.Mutable(index);
}
inline void CreateOAuth2ClientRequest::set_contacts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
  contacts_.Mutable(index)->assign(value);
}
inline void CreateOAuth2ClientRequest::set_contacts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
  contacts_.Mutable(index)->assign(std::move(value));
}
inline void CreateOAuth2ClientRequest::set_contacts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  contacts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
}
inline void CreateOAuth2ClientRequest::set_contacts(int index, const char* value, size_t size) {
  contacts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
}
inline std::string* CreateOAuth2ClientRequest::_internal_add_contacts() {
  return contacts_.Add();
}
inline void CreateOAuth2ClientRequest::add_contacts(const std::string& value) {
  contacts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
}
inline void CreateOAuth2ClientRequest::add_contacts(std::string&& value) {
  contacts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
}
inline void CreateOAuth2ClientRequest::add_contacts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  contacts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
}
inline void CreateOAuth2ClientRequest::add_contacts(const char* value, size_t size) {
  contacts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateOAuth2ClientRequest::contacts() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
  return contacts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateOAuth2ClientRequest::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.contacts)
  return &contacts_;
}

// bool frontchannel_logout_session_required = 11[json_name = "frontchannelLogoutSessionRequired"];
inline void CreateOAuth2ClientRequest::clear_frontchannel_logout_session_required() {
  frontchannel_logout_session_required_ = false;
}
inline bool CreateOAuth2ClientRequest::_internal_frontchannel_logout_session_required() const {
  return frontchannel_logout_session_required_;
}
inline bool CreateOAuth2ClientRequest::frontchannel_logout_session_required() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.frontchannel_logout_session_required)
  return _internal_frontchannel_logout_session_required();
}
inline void CreateOAuth2ClientRequest::_internal_set_frontchannel_logout_session_required(bool value) {
  
  frontchannel_logout_session_required_ = value;
}
inline void CreateOAuth2ClientRequest::set_frontchannel_logout_session_required(bool value) {
  _internal_set_frontchannel_logout_session_required(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.frontchannel_logout_session_required)
}

// string frontchannel_logout_uri = 12[json_name = "frontchannelLogoutUri"];
inline void CreateOAuth2ClientRequest::clear_frontchannel_logout_uri() {
  frontchannel_logout_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientRequest::frontchannel_logout_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.frontchannel_logout_uri)
  return _internal_frontchannel_logout_uri();
}
inline void CreateOAuth2ClientRequest::set_frontchannel_logout_uri(const std::string& value) {
  _internal_set_frontchannel_logout_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.frontchannel_logout_uri)
}
inline std::string* CreateOAuth2ClientRequest::mutable_frontchannel_logout_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.frontchannel_logout_uri)
  return _internal_mutable_frontchannel_logout_uri();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_frontchannel_logout_uri() const {
  return frontchannel_logout_uri_.Get();
}
inline void CreateOAuth2ClientRequest::_internal_set_frontchannel_logout_uri(const std::string& value) {
  
  frontchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientRequest::set_frontchannel_logout_uri(std::string&& value) {
  
  frontchannel_logout_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.frontchannel_logout_uri)
}
inline void CreateOAuth2ClientRequest::set_frontchannel_logout_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frontchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.frontchannel_logout_uri)
}
inline void CreateOAuth2ClientRequest::set_frontchannel_logout_uri(const char* value,
    size_t size) {
  
  frontchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.frontchannel_logout_uri)
}
inline std::string* CreateOAuth2ClientRequest::_internal_mutable_frontchannel_logout_uri() {
  
  return frontchannel_logout_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientRequest::release_frontchannel_logout_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.frontchannel_logout_uri)
  return frontchannel_logout_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientRequest::set_allocated_frontchannel_logout_uri(std::string* frontchannel_logout_uri) {
  if (frontchannel_logout_uri != nullptr) {
    
  } else {
    
  }
  frontchannel_logout_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frontchannel_logout_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.frontchannel_logout_uri)
}

// repeated .depot.devtools.auth.v0.identity.admin.GrantType grant_types = 13[json_name = "grantTypes"];
inline int CreateOAuth2ClientRequest::_internal_grant_types_size() const {
  return grant_types_.size();
}
inline int CreateOAuth2ClientRequest::grant_types_size() const {
  return _internal_grant_types_size();
}
inline void CreateOAuth2ClientRequest::clear_grant_types() {
  grant_types_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::GrantType CreateOAuth2ClientRequest::_internal_grant_types(int index) const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::GrantType >(grant_types_.Get(index));
}
inline ::depot::devtools::auth::v0::identity::admin::GrantType CreateOAuth2ClientRequest::grant_types(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.grant_types)
  return _internal_grant_types(index);
}
inline void CreateOAuth2ClientRequest::set_grant_types(int index, ::depot::devtools::auth::v0::identity::admin::GrantType value) {
  grant_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.grant_types)
}
inline void CreateOAuth2ClientRequest::_internal_add_grant_types(::depot::devtools::auth::v0::identity::admin::GrantType value) {
  grant_types_.Add(value);
}
inline void CreateOAuth2ClientRequest::add_grant_types(::depot::devtools::auth::v0::identity::admin::GrantType value) {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.grant_types)
  _internal_add_grant_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CreateOAuth2ClientRequest::grant_types() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.grant_types)
  return grant_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CreateOAuth2ClientRequest::_internal_mutable_grant_types() {
  return &grant_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CreateOAuth2ClientRequest::mutable_grant_types() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.grant_types)
  return _internal_mutable_grant_types();
}

// .google.protobuf.Struct jwks = 14[json_name = "jwks"];
inline bool CreateOAuth2ClientRequest::_internal_has_jwks() const {
  return this != internal_default_instance() && jwks_ != nullptr;
}
inline bool CreateOAuth2ClientRequest::has_jwks() const {
  return _internal_has_jwks();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& CreateOAuth2ClientRequest::_internal_jwks() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = jwks_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& CreateOAuth2ClientRequest::jwks() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks)
  return _internal_jwks();
}
inline void CreateOAuth2ClientRequest::unsafe_arena_set_allocated_jwks(
    PROTOBUF_NAMESPACE_ID::Struct* jwks) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jwks_);
  }
  jwks_ = jwks;
  if (jwks) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks)
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateOAuth2ClientRequest::release_jwks() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = jwks_;
  jwks_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateOAuth2ClientRequest::unsafe_arena_release_jwks() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = jwks_;
  jwks_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateOAuth2ClientRequest::_internal_mutable_jwks() {
  
  if (jwks_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    jwks_ = p;
  }
  return jwks_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateOAuth2ClientRequest::mutable_jwks() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks)
  return _internal_mutable_jwks();
}
inline void CreateOAuth2ClientRequest::set_allocated_jwks(PROTOBUF_NAMESPACE_ID::Struct* jwks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(jwks_);
  }
  if (jwks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jwks)->GetArena();
    if (message_arena != submessage_arena) {
      jwks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jwks, submessage_arena);
    }
    
  } else {
    
  }
  jwks_ = jwks;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks)
}

// string jwks_uri = 15[json_name = "jwksUri"];
inline void CreateOAuth2ClientRequest::clear_jwks_uri() {
  jwks_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientRequest::jwks_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks_uri)
  return _internal_jwks_uri();
}
inline void CreateOAuth2ClientRequest::set_jwks_uri(const std::string& value) {
  _internal_set_jwks_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks_uri)
}
inline std::string* CreateOAuth2ClientRequest::mutable_jwks_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks_uri)
  return _internal_mutable_jwks_uri();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_jwks_uri() const {
  return jwks_uri_.Get();
}
inline void CreateOAuth2ClientRequest::_internal_set_jwks_uri(const std::string& value) {
  
  jwks_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientRequest::set_jwks_uri(std::string&& value) {
  
  jwks_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks_uri)
}
inline void CreateOAuth2ClientRequest::set_jwks_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jwks_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks_uri)
}
inline void CreateOAuth2ClientRequest::set_jwks_uri(const char* value,
    size_t size) {
  
  jwks_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks_uri)
}
inline std::string* CreateOAuth2ClientRequest::_internal_mutable_jwks_uri() {
  
  return jwks_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientRequest::release_jwks_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks_uri)
  return jwks_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientRequest::set_allocated_jwks_uri(std::string* jwks_uri) {
  if (jwks_uri != nullptr) {
    
  } else {
    
  }
  jwks_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jwks_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.jwks_uri)
}

// string logo_uri = 16[json_name = "logoUri"];
inline void CreateOAuth2ClientRequest::clear_logo_uri() {
  logo_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientRequest::logo_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.logo_uri)
  return _internal_logo_uri();
}
inline void CreateOAuth2ClientRequest::set_logo_uri(const std::string& value) {
  _internal_set_logo_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.logo_uri)
}
inline std::string* CreateOAuth2ClientRequest::mutable_logo_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.logo_uri)
  return _internal_mutable_logo_uri();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_logo_uri() const {
  return logo_uri_.Get();
}
inline void CreateOAuth2ClientRequest::_internal_set_logo_uri(const std::string& value) {
  
  logo_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientRequest::set_logo_uri(std::string&& value) {
  
  logo_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.logo_uri)
}
inline void CreateOAuth2ClientRequest::set_logo_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logo_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.logo_uri)
}
inline void CreateOAuth2ClientRequest::set_logo_uri(const char* value,
    size_t size) {
  
  logo_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.logo_uri)
}
inline std::string* CreateOAuth2ClientRequest::_internal_mutable_logo_uri() {
  
  return logo_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientRequest::release_logo_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.logo_uri)
  return logo_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientRequest::set_allocated_logo_uri(std::string* logo_uri) {
  if (logo_uri != nullptr) {
    
  } else {
    
  }
  logo_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logo_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.logo_uri)
}

// .google.protobuf.Struct metadata = 17[json_name = "metadata"];
inline bool CreateOAuth2ClientRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool CreateOAuth2ClientRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& CreateOAuth2ClientRequest::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& CreateOAuth2ClientRequest::metadata() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.metadata)
  return _internal_metadata();
}
inline void CreateOAuth2ClientRequest::unsafe_arena_set_allocated_metadata(
    PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.metadata)
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateOAuth2ClientRequest::release_metadata() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateOAuth2ClientRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateOAuth2ClientRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateOAuth2ClientRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.metadata)
  return _internal_mutable_metadata();
}
inline void CreateOAuth2ClientRequest::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.metadata)
}

// string owner = 18[json_name = "owner"];
inline void CreateOAuth2ClientRequest::clear_owner() {
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientRequest::owner() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.owner)
  return _internal_owner();
}
inline void CreateOAuth2ClientRequest::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.owner)
}
inline std::string* CreateOAuth2ClientRequest::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.owner)
  return _internal_mutable_owner();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_owner() const {
  return owner_.Get();
}
inline void CreateOAuth2ClientRequest::_internal_set_owner(const std::string& value) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientRequest::set_owner(std::string&& value) {
  
  owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.owner)
}
inline void CreateOAuth2ClientRequest::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.owner)
}
inline void CreateOAuth2ClientRequest::set_owner(const char* value,
    size_t size) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.owner)
}
inline std::string* CreateOAuth2ClientRequest::_internal_mutable_owner() {
  
  return owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientRequest::release_owner() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientRequest::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.owner)
}

// string policy_uri = 19[json_name = "policyUri"];
inline void CreateOAuth2ClientRequest::clear_policy_uri() {
  policy_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientRequest::policy_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.policy_uri)
  return _internal_policy_uri();
}
inline void CreateOAuth2ClientRequest::set_policy_uri(const std::string& value) {
  _internal_set_policy_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.policy_uri)
}
inline std::string* CreateOAuth2ClientRequest::mutable_policy_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.policy_uri)
  return _internal_mutable_policy_uri();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_policy_uri() const {
  return policy_uri_.Get();
}
inline void CreateOAuth2ClientRequest::_internal_set_policy_uri(const std::string& value) {
  
  policy_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientRequest::set_policy_uri(std::string&& value) {
  
  policy_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.policy_uri)
}
inline void CreateOAuth2ClientRequest::set_policy_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  policy_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.policy_uri)
}
inline void CreateOAuth2ClientRequest::set_policy_uri(const char* value,
    size_t size) {
  
  policy_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.policy_uri)
}
inline std::string* CreateOAuth2ClientRequest::_internal_mutable_policy_uri() {
  
  return policy_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientRequest::release_policy_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.policy_uri)
  return policy_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientRequest::set_allocated_policy_uri(std::string* policy_uri) {
  if (policy_uri != nullptr) {
    
  } else {
    
  }
  policy_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.policy_uri)
}

// repeated string post_logout_redirect_uris = 20[json_name = "postLogoutRedirectUris"];
inline int CreateOAuth2ClientRequest::_internal_post_logout_redirect_uris_size() const {
  return post_logout_redirect_uris_.size();
}
inline int CreateOAuth2ClientRequest::post_logout_redirect_uris_size() const {
  return _internal_post_logout_redirect_uris_size();
}
inline void CreateOAuth2ClientRequest::clear_post_logout_redirect_uris() {
  post_logout_redirect_uris_.Clear();
}
inline std::string* CreateOAuth2ClientRequest::add_post_logout_redirect_uris() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
  return _internal_add_post_logout_redirect_uris();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_post_logout_redirect_uris(int index) const {
  return post_logout_redirect_uris_.Get(index);
}
inline const std::string& CreateOAuth2ClientRequest::post_logout_redirect_uris(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
  return _internal_post_logout_redirect_uris(index);
}
inline std::string* CreateOAuth2ClientRequest::mutable_post_logout_redirect_uris(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
  return post_logout_redirect_uris_.Mutable(index);
}
inline void CreateOAuth2ClientRequest::set_post_logout_redirect_uris(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
  post_logout_redirect_uris_.Mutable(index)->assign(value);
}
inline void CreateOAuth2ClientRequest::set_post_logout_redirect_uris(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
  post_logout_redirect_uris_.Mutable(index)->assign(std::move(value));
}
inline void CreateOAuth2ClientRequest::set_post_logout_redirect_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  post_logout_redirect_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
}
inline void CreateOAuth2ClientRequest::set_post_logout_redirect_uris(int index, const char* value, size_t size) {
  post_logout_redirect_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
}
inline std::string* CreateOAuth2ClientRequest::_internal_add_post_logout_redirect_uris() {
  return post_logout_redirect_uris_.Add();
}
inline void CreateOAuth2ClientRequest::add_post_logout_redirect_uris(const std::string& value) {
  post_logout_redirect_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
}
inline void CreateOAuth2ClientRequest::add_post_logout_redirect_uris(std::string&& value) {
  post_logout_redirect_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
}
inline void CreateOAuth2ClientRequest::add_post_logout_redirect_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  post_logout_redirect_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
}
inline void CreateOAuth2ClientRequest::add_post_logout_redirect_uris(const char* value, size_t size) {
  post_logout_redirect_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateOAuth2ClientRequest::post_logout_redirect_uris() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
  return post_logout_redirect_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateOAuth2ClientRequest::mutable_post_logout_redirect_uris() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.post_logout_redirect_uris)
  return &post_logout_redirect_uris_;
}

// repeated string redirect_uris = 21[json_name = "redirectUris"];
inline int CreateOAuth2ClientRequest::_internal_redirect_uris_size() const {
  return redirect_uris_.size();
}
inline int CreateOAuth2ClientRequest::redirect_uris_size() const {
  return _internal_redirect_uris_size();
}
inline void CreateOAuth2ClientRequest::clear_redirect_uris() {
  redirect_uris_.Clear();
}
inline std::string* CreateOAuth2ClientRequest::add_redirect_uris() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
  return _internal_add_redirect_uris();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_redirect_uris(int index) const {
  return redirect_uris_.Get(index);
}
inline const std::string& CreateOAuth2ClientRequest::redirect_uris(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
  return _internal_redirect_uris(index);
}
inline std::string* CreateOAuth2ClientRequest::mutable_redirect_uris(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
  return redirect_uris_.Mutable(index);
}
inline void CreateOAuth2ClientRequest::set_redirect_uris(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
  redirect_uris_.Mutable(index)->assign(value);
}
inline void CreateOAuth2ClientRequest::set_redirect_uris(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
  redirect_uris_.Mutable(index)->assign(std::move(value));
}
inline void CreateOAuth2ClientRequest::set_redirect_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  redirect_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
}
inline void CreateOAuth2ClientRequest::set_redirect_uris(int index, const char* value, size_t size) {
  redirect_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
}
inline std::string* CreateOAuth2ClientRequest::_internal_add_redirect_uris() {
  return redirect_uris_.Add();
}
inline void CreateOAuth2ClientRequest::add_redirect_uris(const std::string& value) {
  redirect_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
}
inline void CreateOAuth2ClientRequest::add_redirect_uris(std::string&& value) {
  redirect_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
}
inline void CreateOAuth2ClientRequest::add_redirect_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  redirect_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
}
inline void CreateOAuth2ClientRequest::add_redirect_uris(const char* value, size_t size) {
  redirect_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateOAuth2ClientRequest::redirect_uris() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
  return redirect_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateOAuth2ClientRequest::mutable_redirect_uris() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.redirect_uris)
  return &redirect_uris_;
}

// .depot.devtools.auth.v0.identity.admin.RequestObjectSigningAlg request_object_signing_alg = 22[json_name = "requestObjectSigningAlg"];
inline void CreateOAuth2ClientRequest::clear_request_object_signing_alg() {
  request_object_signing_alg_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg CreateOAuth2ClientRequest::_internal_request_object_signing_alg() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg >(request_object_signing_alg_);
}
inline ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg CreateOAuth2ClientRequest::request_object_signing_alg() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_object_signing_alg)
  return _internal_request_object_signing_alg();
}
inline void CreateOAuth2ClientRequest::_internal_set_request_object_signing_alg(::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg value) {
  
  request_object_signing_alg_ = value;
}
inline void CreateOAuth2ClientRequest::set_request_object_signing_alg(::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg value) {
  _internal_set_request_object_signing_alg(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_object_signing_alg)
}

// repeated string request_uris = 23[json_name = "requestUris"];
inline int CreateOAuth2ClientRequest::_internal_request_uris_size() const {
  return request_uris_.size();
}
inline int CreateOAuth2ClientRequest::request_uris_size() const {
  return _internal_request_uris_size();
}
inline void CreateOAuth2ClientRequest::clear_request_uris() {
  request_uris_.Clear();
}
inline std::string* CreateOAuth2ClientRequest::add_request_uris() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
  return _internal_add_request_uris();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_request_uris(int index) const {
  return request_uris_.Get(index);
}
inline const std::string& CreateOAuth2ClientRequest::request_uris(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
  return _internal_request_uris(index);
}
inline std::string* CreateOAuth2ClientRequest::mutable_request_uris(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
  return request_uris_.Mutable(index);
}
inline void CreateOAuth2ClientRequest::set_request_uris(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
  request_uris_.Mutable(index)->assign(value);
}
inline void CreateOAuth2ClientRequest::set_request_uris(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
  request_uris_.Mutable(index)->assign(std::move(value));
}
inline void CreateOAuth2ClientRequest::set_request_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
}
inline void CreateOAuth2ClientRequest::set_request_uris(int index, const char* value, size_t size) {
  request_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
}
inline std::string* CreateOAuth2ClientRequest::_internal_add_request_uris() {
  return request_uris_.Add();
}
inline void CreateOAuth2ClientRequest::add_request_uris(const std::string& value) {
  request_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
}
inline void CreateOAuth2ClientRequest::add_request_uris(std::string&& value) {
  request_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
}
inline void CreateOAuth2ClientRequest::add_request_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
}
inline void CreateOAuth2ClientRequest::add_request_uris(const char* value, size_t size) {
  request_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateOAuth2ClientRequest::request_uris() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
  return request_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateOAuth2ClientRequest::mutable_request_uris() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.request_uris)
  return &request_uris_;
}

// repeated .depot.devtools.auth.v0.identity.admin.ResponseType response_types = 24[json_name = "responseTypes"];
inline int CreateOAuth2ClientRequest::_internal_response_types_size() const {
  return response_types_.size();
}
inline int CreateOAuth2ClientRequest::response_types_size() const {
  return _internal_response_types_size();
}
inline void CreateOAuth2ClientRequest::clear_response_types() {
  response_types_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::ResponseType CreateOAuth2ClientRequest::_internal_response_types(int index) const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::ResponseType >(response_types_.Get(index));
}
inline ::depot::devtools::auth::v0::identity::admin::ResponseType CreateOAuth2ClientRequest::response_types(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.response_types)
  return _internal_response_types(index);
}
inline void CreateOAuth2ClientRequest::set_response_types(int index, ::depot::devtools::auth::v0::identity::admin::ResponseType value) {
  response_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.response_types)
}
inline void CreateOAuth2ClientRequest::_internal_add_response_types(::depot::devtools::auth::v0::identity::admin::ResponseType value) {
  response_types_.Add(value);
}
inline void CreateOAuth2ClientRequest::add_response_types(::depot::devtools::auth::v0::identity::admin::ResponseType value) {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.response_types)
  _internal_add_response_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CreateOAuth2ClientRequest::response_types() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.response_types)
  return response_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CreateOAuth2ClientRequest::_internal_mutable_response_types() {
  return &response_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CreateOAuth2ClientRequest::mutable_response_types() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.response_types)
  return _internal_mutable_response_types();
}

// string scope = 25[json_name = "scope"];
inline void CreateOAuth2ClientRequest::clear_scope() {
  scope_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientRequest::scope() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.scope)
  return _internal_scope();
}
inline void CreateOAuth2ClientRequest::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.scope)
}
inline std::string* CreateOAuth2ClientRequest::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.scope)
  return _internal_mutable_scope();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_scope() const {
  return scope_.Get();
}
inline void CreateOAuth2ClientRequest::_internal_set_scope(const std::string& value) {
  
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientRequest::set_scope(std::string&& value) {
  
  scope_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.scope)
}
inline void CreateOAuth2ClientRequest::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.scope)
}
inline void CreateOAuth2ClientRequest::set_scope(const char* value,
    size_t size) {
  
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.scope)
}
inline std::string* CreateOAuth2ClientRequest::_internal_mutable_scope() {
  
  return scope_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientRequest::release_scope() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.scope)
  return scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientRequest::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.scope)
}

// string sector_identifier_uri = 26[json_name = "sectorIdentifierUri"];
inline void CreateOAuth2ClientRequest::clear_sector_identifier_uri() {
  sector_identifier_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientRequest::sector_identifier_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.sector_identifier_uri)
  return _internal_sector_identifier_uri();
}
inline void CreateOAuth2ClientRequest::set_sector_identifier_uri(const std::string& value) {
  _internal_set_sector_identifier_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.sector_identifier_uri)
}
inline std::string* CreateOAuth2ClientRequest::mutable_sector_identifier_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.sector_identifier_uri)
  return _internal_mutable_sector_identifier_uri();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_sector_identifier_uri() const {
  return sector_identifier_uri_.Get();
}
inline void CreateOAuth2ClientRequest::_internal_set_sector_identifier_uri(const std::string& value) {
  
  sector_identifier_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientRequest::set_sector_identifier_uri(std::string&& value) {
  
  sector_identifier_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.sector_identifier_uri)
}
inline void CreateOAuth2ClientRequest::set_sector_identifier_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sector_identifier_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.sector_identifier_uri)
}
inline void CreateOAuth2ClientRequest::set_sector_identifier_uri(const char* value,
    size_t size) {
  
  sector_identifier_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.sector_identifier_uri)
}
inline std::string* CreateOAuth2ClientRequest::_internal_mutable_sector_identifier_uri() {
  
  return sector_identifier_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientRequest::release_sector_identifier_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.sector_identifier_uri)
  return sector_identifier_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientRequest::set_allocated_sector_identifier_uri(std::string* sector_identifier_uri) {
  if (sector_identifier_uri != nullptr) {
    
  } else {
    
  }
  sector_identifier_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sector_identifier_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.sector_identifier_uri)
}

// .depot.devtools.auth.v0.identity.admin.SubjectType subject_type = 27[json_name = "subjectType"];
inline void CreateOAuth2ClientRequest::clear_subject_type() {
  subject_type_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::SubjectType CreateOAuth2ClientRequest::_internal_subject_type() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::SubjectType >(subject_type_);
}
inline ::depot::devtools::auth::v0::identity::admin::SubjectType CreateOAuth2ClientRequest::subject_type() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.subject_type)
  return _internal_subject_type();
}
inline void CreateOAuth2ClientRequest::_internal_set_subject_type(::depot::devtools::auth::v0::identity::admin::SubjectType value) {
  
  subject_type_ = value;
}
inline void CreateOAuth2ClientRequest::set_subject_type(::depot::devtools::auth::v0::identity::admin::SubjectType value) {
  _internal_set_subject_type(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.subject_type)
}

// .depot.devtools.auth.v0.identity.admin.TokenEndpointAuthMethod token_endpoint_auth_method = 28[json_name = "tokenEndpointAuthMethod"];
inline void CreateOAuth2ClientRequest::clear_token_endpoint_auth_method() {
  token_endpoint_auth_method_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod CreateOAuth2ClientRequest::_internal_token_endpoint_auth_method() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod >(token_endpoint_auth_method_);
}
inline ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod CreateOAuth2ClientRequest::token_endpoint_auth_method() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.token_endpoint_auth_method)
  return _internal_token_endpoint_auth_method();
}
inline void CreateOAuth2ClientRequest::_internal_set_token_endpoint_auth_method(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod value) {
  
  token_endpoint_auth_method_ = value;
}
inline void CreateOAuth2ClientRequest::set_token_endpoint_auth_method(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod value) {
  _internal_set_token_endpoint_auth_method(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.token_endpoint_auth_method)
}

// .depot.devtools.auth.v0.identity.admin.TokenEndpointAuthSigningAlg token_endpoint_auth_signing_alg = 29[json_name = "tokenEndpointAuthSigningAlg"];
inline void CreateOAuth2ClientRequest::clear_token_endpoint_auth_signing_alg() {
  token_endpoint_auth_signing_alg_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg CreateOAuth2ClientRequest::_internal_token_endpoint_auth_signing_alg() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg >(token_endpoint_auth_signing_alg_);
}
inline ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg CreateOAuth2ClientRequest::token_endpoint_auth_signing_alg() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.token_endpoint_auth_signing_alg)
  return _internal_token_endpoint_auth_signing_alg();
}
inline void CreateOAuth2ClientRequest::_internal_set_token_endpoint_auth_signing_alg(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg value) {
  
  token_endpoint_auth_signing_alg_ = value;
}
inline void CreateOAuth2ClientRequest::set_token_endpoint_auth_signing_alg(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg value) {
  _internal_set_token_endpoint_auth_signing_alg(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.token_endpoint_auth_signing_alg)
}

// string tos_uri = 30[json_name = "tosUri"];
inline void CreateOAuth2ClientRequest::clear_tos_uri() {
  tos_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientRequest::tos_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.tos_uri)
  return _internal_tos_uri();
}
inline void CreateOAuth2ClientRequest::set_tos_uri(const std::string& value) {
  _internal_set_tos_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.tos_uri)
}
inline std::string* CreateOAuth2ClientRequest::mutable_tos_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.tos_uri)
  return _internal_mutable_tos_uri();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_tos_uri() const {
  return tos_uri_.Get();
}
inline void CreateOAuth2ClientRequest::_internal_set_tos_uri(const std::string& value) {
  
  tos_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientRequest::set_tos_uri(std::string&& value) {
  
  tos_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.tos_uri)
}
inline void CreateOAuth2ClientRequest::set_tos_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tos_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.tos_uri)
}
inline void CreateOAuth2ClientRequest::set_tos_uri(const char* value,
    size_t size) {
  
  tos_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.tos_uri)
}
inline std::string* CreateOAuth2ClientRequest::_internal_mutable_tos_uri() {
  
  return tos_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientRequest::release_tos_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.tos_uri)
  return tos_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientRequest::set_allocated_tos_uri(std::string* tos_uri) {
  if (tos_uri != nullptr) {
    
  } else {
    
  }
  tos_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tos_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.tos_uri)
}

// .depot.devtools.auth.v0.identity.admin.UserinfoSignedResponseAlg userinfo_signed_response_alg = 31[json_name = "userinfoSignedResponseAlg"];
inline void CreateOAuth2ClientRequest::clear_userinfo_signed_response_alg() {
  userinfo_signed_response_alg_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg CreateOAuth2ClientRequest::_internal_userinfo_signed_response_alg() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg >(userinfo_signed_response_alg_);
}
inline ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg CreateOAuth2ClientRequest::userinfo_signed_response_alg() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.userinfo_signed_response_alg)
  return _internal_userinfo_signed_response_alg();
}
inline void CreateOAuth2ClientRequest::_internal_set_userinfo_signed_response_alg(::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg value) {
  
  userinfo_signed_response_alg_ = value;
}
inline void CreateOAuth2ClientRequest::set_userinfo_signed_response_alg(::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg value) {
  _internal_set_userinfo_signed_response_alg(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.userinfo_signed_response_alg)
}

// string client_secret = 32[json_name = "clientSecret"];
inline void CreateOAuth2ClientRequest::clear_client_secret() {
  client_secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientRequest::client_secret() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_secret)
  return _internal_client_secret();
}
inline void CreateOAuth2ClientRequest::set_client_secret(const std::string& value) {
  _internal_set_client_secret(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_secret)
}
inline std::string* CreateOAuth2ClientRequest::mutable_client_secret() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_secret)
  return _internal_mutable_client_secret();
}
inline const std::string& CreateOAuth2ClientRequest::_internal_client_secret() const {
  return client_secret_.Get();
}
inline void CreateOAuth2ClientRequest::_internal_set_client_secret(const std::string& value) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientRequest::set_client_secret(std::string&& value) {
  
  client_secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_secret)
}
inline void CreateOAuth2ClientRequest::set_client_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_secret)
}
inline void CreateOAuth2ClientRequest::set_client_secret(const char* value,
    size_t size) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_secret)
}
inline std::string* CreateOAuth2ClientRequest::_internal_mutable_client_secret() {
  
  return client_secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientRequest::release_client_secret() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_secret)
  return client_secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientRequest::set_allocated_client_secret(std::string* client_secret) {
  if (client_secret != nullptr) {
    
  } else {
    
  }
  client_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_secret)
}

// .depot.devtools.auth.v0.identity.admin.ClientType client_type = 33[json_name = "clientType"];
inline void CreateOAuth2ClientRequest::clear_client_type() {
  client_type_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::ClientType CreateOAuth2ClientRequest::_internal_client_type() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::ClientType >(client_type_);
}
inline ::depot::devtools::auth::v0::identity::admin::ClientType CreateOAuth2ClientRequest::client_type() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_type)
  return _internal_client_type();
}
inline void CreateOAuth2ClientRequest::_internal_set_client_type(::depot::devtools::auth::v0::identity::admin::ClientType value) {
  
  client_type_ = value;
}
inline void CreateOAuth2ClientRequest::set_client_type(::depot::devtools::auth::v0::identity::admin::ClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientRequest.client_type)
}

// -------------------------------------------------------------------

// CreateOAuth2ClientResponse

// string client_id = 1[json_name = "clientId"];
inline void CreateOAuth2ClientResponse::clear_client_id() {
  client_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientResponse::client_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_id)
  return _internal_client_id();
}
inline void CreateOAuth2ClientResponse::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_id)
}
inline std::string* CreateOAuth2ClientResponse::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& CreateOAuth2ClientResponse::_internal_client_id() const {
  return client_id_.Get();
}
inline void CreateOAuth2ClientResponse::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientResponse::set_client_id(std::string&& value) {
  
  client_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_id)
}
inline void CreateOAuth2ClientResponse::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_id)
}
inline void CreateOAuth2ClientResponse::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_id)
}
inline std::string* CreateOAuth2ClientResponse::_internal_mutable_client_id() {
  
  return client_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientResponse::release_client_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientResponse::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_id)
}

// string client_secret = 2[json_name = "clientSecret"];
inline void CreateOAuth2ClientResponse::clear_client_secret() {
  client_secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOAuth2ClientResponse::client_secret() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_secret)
  return _internal_client_secret();
}
inline void CreateOAuth2ClientResponse::set_client_secret(const std::string& value) {
  _internal_set_client_secret(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_secret)
}
inline std::string* CreateOAuth2ClientResponse::mutable_client_secret() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_secret)
  return _internal_mutable_client_secret();
}
inline const std::string& CreateOAuth2ClientResponse::_internal_client_secret() const {
  return client_secret_.Get();
}
inline void CreateOAuth2ClientResponse::_internal_set_client_secret(const std::string& value) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOAuth2ClientResponse::set_client_secret(std::string&& value) {
  
  client_secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_secret)
}
inline void CreateOAuth2ClientResponse::set_client_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_secret)
}
inline void CreateOAuth2ClientResponse::set_client_secret(const char* value,
    size_t size) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_secret)
}
inline std::string* CreateOAuth2ClientResponse::_internal_mutable_client_secret() {
  
  return client_secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOAuth2ClientResponse::release_client_secret() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_secret)
  return client_secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOAuth2ClientResponse::set_allocated_client_secret(std::string* client_secret) {
  if (client_secret != nullptr) {
    
  } else {
    
  }
  client_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateOAuth2ClientResponse.client_secret)
}

// -------------------------------------------------------------------

// UpdateOAuth2ClientRequest

// repeated string allowed_cors_origins = 1[json_name = "allowedCorsOrigins"];
inline int UpdateOAuth2ClientRequest::_internal_allowed_cors_origins_size() const {
  return allowed_cors_origins_.size();
}
inline int UpdateOAuth2ClientRequest::allowed_cors_origins_size() const {
  return _internal_allowed_cors_origins_size();
}
inline void UpdateOAuth2ClientRequest::clear_allowed_cors_origins() {
  allowed_cors_origins_.Clear();
}
inline std::string* UpdateOAuth2ClientRequest::add_allowed_cors_origins() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
  return _internal_add_allowed_cors_origins();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_allowed_cors_origins(int index) const {
  return allowed_cors_origins_.Get(index);
}
inline const std::string& UpdateOAuth2ClientRequest::allowed_cors_origins(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
  return _internal_allowed_cors_origins(index);
}
inline std::string* UpdateOAuth2ClientRequest::mutable_allowed_cors_origins(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
  return allowed_cors_origins_.Mutable(index);
}
inline void UpdateOAuth2ClientRequest::set_allowed_cors_origins(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
  allowed_cors_origins_.Mutable(index)->assign(value);
}
inline void UpdateOAuth2ClientRequest::set_allowed_cors_origins(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
  allowed_cors_origins_.Mutable(index)->assign(std::move(value));
}
inline void UpdateOAuth2ClientRequest::set_allowed_cors_origins(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_cors_origins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
}
inline void UpdateOAuth2ClientRequest::set_allowed_cors_origins(int index, const char* value, size_t size) {
  allowed_cors_origins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_add_allowed_cors_origins() {
  return allowed_cors_origins_.Add();
}
inline void UpdateOAuth2ClientRequest::add_allowed_cors_origins(const std::string& value) {
  allowed_cors_origins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
}
inline void UpdateOAuth2ClientRequest::add_allowed_cors_origins(std::string&& value) {
  allowed_cors_origins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
}
inline void UpdateOAuth2ClientRequest::add_allowed_cors_origins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_cors_origins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
}
inline void UpdateOAuth2ClientRequest::add_allowed_cors_origins(const char* value, size_t size) {
  allowed_cors_origins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateOAuth2ClientRequest::allowed_cors_origins() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
  return allowed_cors_origins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateOAuth2ClientRequest::mutable_allowed_cors_origins() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.allowed_cors_origins)
  return &allowed_cors_origins_;
}

// repeated string audience = 2[json_name = "audience"];
inline int UpdateOAuth2ClientRequest::_internal_audience_size() const {
  return audience_.size();
}
inline int UpdateOAuth2ClientRequest::audience_size() const {
  return _internal_audience_size();
}
inline void UpdateOAuth2ClientRequest::clear_audience() {
  audience_.Clear();
}
inline std::string* UpdateOAuth2ClientRequest::add_audience() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
  return _internal_add_audience();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_audience(int index) const {
  return audience_.Get(index);
}
inline const std::string& UpdateOAuth2ClientRequest::audience(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
  return _internal_audience(index);
}
inline std::string* UpdateOAuth2ClientRequest::mutable_audience(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
  return audience_.Mutable(index);
}
inline void UpdateOAuth2ClientRequest::set_audience(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
  audience_.Mutable(index)->assign(value);
}
inline void UpdateOAuth2ClientRequest::set_audience(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
  audience_.Mutable(index)->assign(std::move(value));
}
inline void UpdateOAuth2ClientRequest::set_audience(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audience_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
}
inline void UpdateOAuth2ClientRequest::set_audience(int index, const char* value, size_t size) {
  audience_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_add_audience() {
  return audience_.Add();
}
inline void UpdateOAuth2ClientRequest::add_audience(const std::string& value) {
  audience_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
}
inline void UpdateOAuth2ClientRequest::add_audience(std::string&& value) {
  audience_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
}
inline void UpdateOAuth2ClientRequest::add_audience(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audience_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
}
inline void UpdateOAuth2ClientRequest::add_audience(const char* value, size_t size) {
  audience_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateOAuth2ClientRequest::audience() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
  return audience_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateOAuth2ClientRequest::mutable_audience() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.audience)
  return &audience_;
}

// bool backchannel_logout_session_required = 3[json_name = "backchannelLogoutSessionRequired"];
inline void UpdateOAuth2ClientRequest::clear_backchannel_logout_session_required() {
  backchannel_logout_session_required_ = false;
}
inline bool UpdateOAuth2ClientRequest::_internal_backchannel_logout_session_required() const {
  return backchannel_logout_session_required_;
}
inline bool UpdateOAuth2ClientRequest::backchannel_logout_session_required() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.backchannel_logout_session_required)
  return _internal_backchannel_logout_session_required();
}
inline void UpdateOAuth2ClientRequest::_internal_set_backchannel_logout_session_required(bool value) {
  
  backchannel_logout_session_required_ = value;
}
inline void UpdateOAuth2ClientRequest::set_backchannel_logout_session_required(bool value) {
  _internal_set_backchannel_logout_session_required(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.backchannel_logout_session_required)
}

// string backchannel_logout_uri = 4[json_name = "backchannelLogoutUri"];
inline void UpdateOAuth2ClientRequest::clear_backchannel_logout_uri() {
  backchannel_logout_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::backchannel_logout_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.backchannel_logout_uri)
  return _internal_backchannel_logout_uri();
}
inline void UpdateOAuth2ClientRequest::set_backchannel_logout_uri(const std::string& value) {
  _internal_set_backchannel_logout_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.backchannel_logout_uri)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_backchannel_logout_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.backchannel_logout_uri)
  return _internal_mutable_backchannel_logout_uri();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_backchannel_logout_uri() const {
  return backchannel_logout_uri_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_backchannel_logout_uri(const std::string& value) {
  
  backchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_backchannel_logout_uri(std::string&& value) {
  
  backchannel_logout_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.backchannel_logout_uri)
}
inline void UpdateOAuth2ClientRequest::set_backchannel_logout_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  backchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.backchannel_logout_uri)
}
inline void UpdateOAuth2ClientRequest::set_backchannel_logout_uri(const char* value,
    size_t size) {
  
  backchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.backchannel_logout_uri)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_backchannel_logout_uri() {
  
  return backchannel_logout_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_backchannel_logout_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.backchannel_logout_uri)
  return backchannel_logout_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_backchannel_logout_uri(std::string* backchannel_logout_uri) {
  if (backchannel_logout_uri != nullptr) {
    
  } else {
    
  }
  backchannel_logout_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backchannel_logout_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.backchannel_logout_uri)
}

// string client_name = 6[json_name = "clientName"];
inline void UpdateOAuth2ClientRequest::clear_client_name() {
  client_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::client_name() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_name)
  return _internal_client_name();
}
inline void UpdateOAuth2ClientRequest::set_client_name(const std::string& value) {
  _internal_set_client_name(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_name)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_client_name() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_name)
  return _internal_mutable_client_name();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_client_name() const {
  return client_name_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_client_name(const std::string& value) {
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_client_name(std::string&& value) {
  
  client_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_name)
}
inline void UpdateOAuth2ClientRequest::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_name)
}
inline void UpdateOAuth2ClientRequest::set_client_name(const char* value,
    size_t size) {
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_name)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_client_name() {
  
  return client_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_client_name() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_name)
  return client_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    
  } else {
    
  }
  client_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_name)
}

// string client_uri = 8[json_name = "clientUri"];
inline void UpdateOAuth2ClientRequest::clear_client_uri() {
  client_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::client_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_uri)
  return _internal_client_uri();
}
inline void UpdateOAuth2ClientRequest::set_client_uri(const std::string& value) {
  _internal_set_client_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_uri)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_client_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_uri)
  return _internal_mutable_client_uri();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_client_uri() const {
  return client_uri_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_client_uri(const std::string& value) {
  
  client_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_client_uri(std::string&& value) {
  
  client_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_uri)
}
inline void UpdateOAuth2ClientRequest::set_client_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_uri)
}
inline void UpdateOAuth2ClientRequest::set_client_uri(const char* value,
    size_t size) {
  
  client_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_uri)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_client_uri() {
  
  return client_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_client_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_uri)
  return client_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_client_uri(std::string* client_uri) {
  if (client_uri != nullptr) {
    
  } else {
    
  }
  client_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_uri)
}

// repeated string contacts = 9[json_name = "contacts"];
inline int UpdateOAuth2ClientRequest::_internal_contacts_size() const {
  return contacts_.size();
}
inline int UpdateOAuth2ClientRequest::contacts_size() const {
  return _internal_contacts_size();
}
inline void UpdateOAuth2ClientRequest::clear_contacts() {
  contacts_.Clear();
}
inline std::string* UpdateOAuth2ClientRequest::add_contacts() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
  return _internal_add_contacts();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_contacts(int index) const {
  return contacts_.Get(index);
}
inline const std::string& UpdateOAuth2ClientRequest::contacts(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
  return _internal_contacts(index);
}
inline std::string* UpdateOAuth2ClientRequest::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
  return contacts_.Mutable(index);
}
inline void UpdateOAuth2ClientRequest::set_contacts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
  contacts_.Mutable(index)->assign(value);
}
inline void UpdateOAuth2ClientRequest::set_contacts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
  contacts_.Mutable(index)->assign(std::move(value));
}
inline void UpdateOAuth2ClientRequest::set_contacts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  contacts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
}
inline void UpdateOAuth2ClientRequest::set_contacts(int index, const char* value, size_t size) {
  contacts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_add_contacts() {
  return contacts_.Add();
}
inline void UpdateOAuth2ClientRequest::add_contacts(const std::string& value) {
  contacts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
}
inline void UpdateOAuth2ClientRequest::add_contacts(std::string&& value) {
  contacts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
}
inline void UpdateOAuth2ClientRequest::add_contacts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  contacts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
}
inline void UpdateOAuth2ClientRequest::add_contacts(const char* value, size_t size) {
  contacts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateOAuth2ClientRequest::contacts() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
  return contacts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateOAuth2ClientRequest::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.contacts)
  return &contacts_;
}

// bool frontchannel_logout_session_required = 11[json_name = "frontchannelLogoutSessionRequired"];
inline void UpdateOAuth2ClientRequest::clear_frontchannel_logout_session_required() {
  frontchannel_logout_session_required_ = false;
}
inline bool UpdateOAuth2ClientRequest::_internal_frontchannel_logout_session_required() const {
  return frontchannel_logout_session_required_;
}
inline bool UpdateOAuth2ClientRequest::frontchannel_logout_session_required() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.frontchannel_logout_session_required)
  return _internal_frontchannel_logout_session_required();
}
inline void UpdateOAuth2ClientRequest::_internal_set_frontchannel_logout_session_required(bool value) {
  
  frontchannel_logout_session_required_ = value;
}
inline void UpdateOAuth2ClientRequest::set_frontchannel_logout_session_required(bool value) {
  _internal_set_frontchannel_logout_session_required(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.frontchannel_logout_session_required)
}

// string frontchannel_logout_uri = 12[json_name = "frontchannelLogoutUri"];
inline void UpdateOAuth2ClientRequest::clear_frontchannel_logout_uri() {
  frontchannel_logout_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::frontchannel_logout_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.frontchannel_logout_uri)
  return _internal_frontchannel_logout_uri();
}
inline void UpdateOAuth2ClientRequest::set_frontchannel_logout_uri(const std::string& value) {
  _internal_set_frontchannel_logout_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.frontchannel_logout_uri)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_frontchannel_logout_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.frontchannel_logout_uri)
  return _internal_mutable_frontchannel_logout_uri();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_frontchannel_logout_uri() const {
  return frontchannel_logout_uri_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_frontchannel_logout_uri(const std::string& value) {
  
  frontchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_frontchannel_logout_uri(std::string&& value) {
  
  frontchannel_logout_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.frontchannel_logout_uri)
}
inline void UpdateOAuth2ClientRequest::set_frontchannel_logout_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frontchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.frontchannel_logout_uri)
}
inline void UpdateOAuth2ClientRequest::set_frontchannel_logout_uri(const char* value,
    size_t size) {
  
  frontchannel_logout_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.frontchannel_logout_uri)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_frontchannel_logout_uri() {
  
  return frontchannel_logout_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_frontchannel_logout_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.frontchannel_logout_uri)
  return frontchannel_logout_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_frontchannel_logout_uri(std::string* frontchannel_logout_uri) {
  if (frontchannel_logout_uri != nullptr) {
    
  } else {
    
  }
  frontchannel_logout_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frontchannel_logout_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.frontchannel_logout_uri)
}

// repeated .depot.devtools.auth.v0.identity.admin.GrantType grant_types = 13[json_name = "grantTypes"];
inline int UpdateOAuth2ClientRequest::_internal_grant_types_size() const {
  return grant_types_.size();
}
inline int UpdateOAuth2ClientRequest::grant_types_size() const {
  return _internal_grant_types_size();
}
inline void UpdateOAuth2ClientRequest::clear_grant_types() {
  grant_types_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::GrantType UpdateOAuth2ClientRequest::_internal_grant_types(int index) const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::GrantType >(grant_types_.Get(index));
}
inline ::depot::devtools::auth::v0::identity::admin::GrantType UpdateOAuth2ClientRequest::grant_types(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.grant_types)
  return _internal_grant_types(index);
}
inline void UpdateOAuth2ClientRequest::set_grant_types(int index, ::depot::devtools::auth::v0::identity::admin::GrantType value) {
  grant_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.grant_types)
}
inline void UpdateOAuth2ClientRequest::_internal_add_grant_types(::depot::devtools::auth::v0::identity::admin::GrantType value) {
  grant_types_.Add(value);
}
inline void UpdateOAuth2ClientRequest::add_grant_types(::depot::devtools::auth::v0::identity::admin::GrantType value) {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.grant_types)
  _internal_add_grant_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
UpdateOAuth2ClientRequest::grant_types() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.grant_types)
  return grant_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UpdateOAuth2ClientRequest::_internal_mutable_grant_types() {
  return &grant_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UpdateOAuth2ClientRequest::mutable_grant_types() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.grant_types)
  return _internal_mutable_grant_types();
}

// .google.protobuf.Struct jwks = 14[json_name = "jwks"];
inline bool UpdateOAuth2ClientRequest::_internal_has_jwks() const {
  return this != internal_default_instance() && jwks_ != nullptr;
}
inline bool UpdateOAuth2ClientRequest::has_jwks() const {
  return _internal_has_jwks();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& UpdateOAuth2ClientRequest::_internal_jwks() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = jwks_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& UpdateOAuth2ClientRequest::jwks() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks)
  return _internal_jwks();
}
inline void UpdateOAuth2ClientRequest::unsafe_arena_set_allocated_jwks(
    PROTOBUF_NAMESPACE_ID::Struct* jwks) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jwks_);
  }
  jwks_ = jwks;
  if (jwks) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks)
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateOAuth2ClientRequest::release_jwks() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = jwks_;
  jwks_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateOAuth2ClientRequest::unsafe_arena_release_jwks() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = jwks_;
  jwks_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateOAuth2ClientRequest::_internal_mutable_jwks() {
  
  if (jwks_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    jwks_ = p;
  }
  return jwks_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateOAuth2ClientRequest::mutable_jwks() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks)
  return _internal_mutable_jwks();
}
inline void UpdateOAuth2ClientRequest::set_allocated_jwks(PROTOBUF_NAMESPACE_ID::Struct* jwks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(jwks_);
  }
  if (jwks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jwks)->GetArena();
    if (message_arena != submessage_arena) {
      jwks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jwks, submessage_arena);
    }
    
  } else {
    
  }
  jwks_ = jwks;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks)
}

// string jwks_uri = 15[json_name = "jwksUri"];
inline void UpdateOAuth2ClientRequest::clear_jwks_uri() {
  jwks_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::jwks_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks_uri)
  return _internal_jwks_uri();
}
inline void UpdateOAuth2ClientRequest::set_jwks_uri(const std::string& value) {
  _internal_set_jwks_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks_uri)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_jwks_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks_uri)
  return _internal_mutable_jwks_uri();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_jwks_uri() const {
  return jwks_uri_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_jwks_uri(const std::string& value) {
  
  jwks_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_jwks_uri(std::string&& value) {
  
  jwks_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks_uri)
}
inline void UpdateOAuth2ClientRequest::set_jwks_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jwks_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks_uri)
}
inline void UpdateOAuth2ClientRequest::set_jwks_uri(const char* value,
    size_t size) {
  
  jwks_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks_uri)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_jwks_uri() {
  
  return jwks_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_jwks_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks_uri)
  return jwks_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_jwks_uri(std::string* jwks_uri) {
  if (jwks_uri != nullptr) {
    
  } else {
    
  }
  jwks_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jwks_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.jwks_uri)
}

// string logo_uri = 16[json_name = "logoUri"];
inline void UpdateOAuth2ClientRequest::clear_logo_uri() {
  logo_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::logo_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.logo_uri)
  return _internal_logo_uri();
}
inline void UpdateOAuth2ClientRequest::set_logo_uri(const std::string& value) {
  _internal_set_logo_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.logo_uri)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_logo_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.logo_uri)
  return _internal_mutable_logo_uri();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_logo_uri() const {
  return logo_uri_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_logo_uri(const std::string& value) {
  
  logo_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_logo_uri(std::string&& value) {
  
  logo_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.logo_uri)
}
inline void UpdateOAuth2ClientRequest::set_logo_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logo_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.logo_uri)
}
inline void UpdateOAuth2ClientRequest::set_logo_uri(const char* value,
    size_t size) {
  
  logo_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.logo_uri)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_logo_uri() {
  
  return logo_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_logo_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.logo_uri)
  return logo_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_logo_uri(std::string* logo_uri) {
  if (logo_uri != nullptr) {
    
  } else {
    
  }
  logo_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logo_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.logo_uri)
}

// .google.protobuf.Struct metadata = 17[json_name = "metadata"];
inline bool UpdateOAuth2ClientRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool UpdateOAuth2ClientRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& UpdateOAuth2ClientRequest::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& UpdateOAuth2ClientRequest::metadata() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.metadata)
  return _internal_metadata();
}
inline void UpdateOAuth2ClientRequest::unsafe_arena_set_allocated_metadata(
    PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.metadata)
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateOAuth2ClientRequest::release_metadata() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateOAuth2ClientRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateOAuth2ClientRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateOAuth2ClientRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.metadata)
  return _internal_mutable_metadata();
}
inline void UpdateOAuth2ClientRequest::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.metadata)
}

// string owner = 18[json_name = "owner"];
inline void UpdateOAuth2ClientRequest::clear_owner() {
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::owner() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.owner)
  return _internal_owner();
}
inline void UpdateOAuth2ClientRequest::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.owner)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.owner)
  return _internal_mutable_owner();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_owner() const {
  return owner_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_owner(const std::string& value) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_owner(std::string&& value) {
  
  owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.owner)
}
inline void UpdateOAuth2ClientRequest::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.owner)
}
inline void UpdateOAuth2ClientRequest::set_owner(const char* value,
    size_t size) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.owner)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_owner() {
  
  return owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_owner() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.owner)
}

// string policy_uri = 19[json_name = "policyUri"];
inline void UpdateOAuth2ClientRequest::clear_policy_uri() {
  policy_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::policy_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.policy_uri)
  return _internal_policy_uri();
}
inline void UpdateOAuth2ClientRequest::set_policy_uri(const std::string& value) {
  _internal_set_policy_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.policy_uri)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_policy_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.policy_uri)
  return _internal_mutable_policy_uri();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_policy_uri() const {
  return policy_uri_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_policy_uri(const std::string& value) {
  
  policy_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_policy_uri(std::string&& value) {
  
  policy_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.policy_uri)
}
inline void UpdateOAuth2ClientRequest::set_policy_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  policy_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.policy_uri)
}
inline void UpdateOAuth2ClientRequest::set_policy_uri(const char* value,
    size_t size) {
  
  policy_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.policy_uri)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_policy_uri() {
  
  return policy_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_policy_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.policy_uri)
  return policy_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_policy_uri(std::string* policy_uri) {
  if (policy_uri != nullptr) {
    
  } else {
    
  }
  policy_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.policy_uri)
}

// repeated string post_logout_redirect_uris = 20[json_name = "postLogoutRedirectUris"];
inline int UpdateOAuth2ClientRequest::_internal_post_logout_redirect_uris_size() const {
  return post_logout_redirect_uris_.size();
}
inline int UpdateOAuth2ClientRequest::post_logout_redirect_uris_size() const {
  return _internal_post_logout_redirect_uris_size();
}
inline void UpdateOAuth2ClientRequest::clear_post_logout_redirect_uris() {
  post_logout_redirect_uris_.Clear();
}
inline std::string* UpdateOAuth2ClientRequest::add_post_logout_redirect_uris() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
  return _internal_add_post_logout_redirect_uris();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_post_logout_redirect_uris(int index) const {
  return post_logout_redirect_uris_.Get(index);
}
inline const std::string& UpdateOAuth2ClientRequest::post_logout_redirect_uris(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
  return _internal_post_logout_redirect_uris(index);
}
inline std::string* UpdateOAuth2ClientRequest::mutable_post_logout_redirect_uris(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
  return post_logout_redirect_uris_.Mutable(index);
}
inline void UpdateOAuth2ClientRequest::set_post_logout_redirect_uris(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
  post_logout_redirect_uris_.Mutable(index)->assign(value);
}
inline void UpdateOAuth2ClientRequest::set_post_logout_redirect_uris(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
  post_logout_redirect_uris_.Mutable(index)->assign(std::move(value));
}
inline void UpdateOAuth2ClientRequest::set_post_logout_redirect_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  post_logout_redirect_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
}
inline void UpdateOAuth2ClientRequest::set_post_logout_redirect_uris(int index, const char* value, size_t size) {
  post_logout_redirect_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_add_post_logout_redirect_uris() {
  return post_logout_redirect_uris_.Add();
}
inline void UpdateOAuth2ClientRequest::add_post_logout_redirect_uris(const std::string& value) {
  post_logout_redirect_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
}
inline void UpdateOAuth2ClientRequest::add_post_logout_redirect_uris(std::string&& value) {
  post_logout_redirect_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
}
inline void UpdateOAuth2ClientRequest::add_post_logout_redirect_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  post_logout_redirect_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
}
inline void UpdateOAuth2ClientRequest::add_post_logout_redirect_uris(const char* value, size_t size) {
  post_logout_redirect_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateOAuth2ClientRequest::post_logout_redirect_uris() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
  return post_logout_redirect_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateOAuth2ClientRequest::mutable_post_logout_redirect_uris() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.post_logout_redirect_uris)
  return &post_logout_redirect_uris_;
}

// repeated string redirect_uris = 21[json_name = "redirectUris"];
inline int UpdateOAuth2ClientRequest::_internal_redirect_uris_size() const {
  return redirect_uris_.size();
}
inline int UpdateOAuth2ClientRequest::redirect_uris_size() const {
  return _internal_redirect_uris_size();
}
inline void UpdateOAuth2ClientRequest::clear_redirect_uris() {
  redirect_uris_.Clear();
}
inline std::string* UpdateOAuth2ClientRequest::add_redirect_uris() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
  return _internal_add_redirect_uris();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_redirect_uris(int index) const {
  return redirect_uris_.Get(index);
}
inline const std::string& UpdateOAuth2ClientRequest::redirect_uris(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
  return _internal_redirect_uris(index);
}
inline std::string* UpdateOAuth2ClientRequest::mutable_redirect_uris(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
  return redirect_uris_.Mutable(index);
}
inline void UpdateOAuth2ClientRequest::set_redirect_uris(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
  redirect_uris_.Mutable(index)->assign(value);
}
inline void UpdateOAuth2ClientRequest::set_redirect_uris(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
  redirect_uris_.Mutable(index)->assign(std::move(value));
}
inline void UpdateOAuth2ClientRequest::set_redirect_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  redirect_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
}
inline void UpdateOAuth2ClientRequest::set_redirect_uris(int index, const char* value, size_t size) {
  redirect_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_add_redirect_uris() {
  return redirect_uris_.Add();
}
inline void UpdateOAuth2ClientRequest::add_redirect_uris(const std::string& value) {
  redirect_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
}
inline void UpdateOAuth2ClientRequest::add_redirect_uris(std::string&& value) {
  redirect_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
}
inline void UpdateOAuth2ClientRequest::add_redirect_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  redirect_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
}
inline void UpdateOAuth2ClientRequest::add_redirect_uris(const char* value, size_t size) {
  redirect_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateOAuth2ClientRequest::redirect_uris() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
  return redirect_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateOAuth2ClientRequest::mutable_redirect_uris() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.redirect_uris)
  return &redirect_uris_;
}

// .depot.devtools.auth.v0.identity.admin.RequestObjectSigningAlg request_object_signing_alg = 22[json_name = "requestObjectSigningAlg"];
inline void UpdateOAuth2ClientRequest::clear_request_object_signing_alg() {
  request_object_signing_alg_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg UpdateOAuth2ClientRequest::_internal_request_object_signing_alg() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg >(request_object_signing_alg_);
}
inline ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg UpdateOAuth2ClientRequest::request_object_signing_alg() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_object_signing_alg)
  return _internal_request_object_signing_alg();
}
inline void UpdateOAuth2ClientRequest::_internal_set_request_object_signing_alg(::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg value) {
  
  request_object_signing_alg_ = value;
}
inline void UpdateOAuth2ClientRequest::set_request_object_signing_alg(::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg value) {
  _internal_set_request_object_signing_alg(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_object_signing_alg)
}

// repeated string request_uris = 23[json_name = "requestUris"];
inline int UpdateOAuth2ClientRequest::_internal_request_uris_size() const {
  return request_uris_.size();
}
inline int UpdateOAuth2ClientRequest::request_uris_size() const {
  return _internal_request_uris_size();
}
inline void UpdateOAuth2ClientRequest::clear_request_uris() {
  request_uris_.Clear();
}
inline std::string* UpdateOAuth2ClientRequest::add_request_uris() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
  return _internal_add_request_uris();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_request_uris(int index) const {
  return request_uris_.Get(index);
}
inline const std::string& UpdateOAuth2ClientRequest::request_uris(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
  return _internal_request_uris(index);
}
inline std::string* UpdateOAuth2ClientRequest::mutable_request_uris(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
  return request_uris_.Mutable(index);
}
inline void UpdateOAuth2ClientRequest::set_request_uris(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
  request_uris_.Mutable(index)->assign(value);
}
inline void UpdateOAuth2ClientRequest::set_request_uris(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
  request_uris_.Mutable(index)->assign(std::move(value));
}
inline void UpdateOAuth2ClientRequest::set_request_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
}
inline void UpdateOAuth2ClientRequest::set_request_uris(int index, const char* value, size_t size) {
  request_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_add_request_uris() {
  return request_uris_.Add();
}
inline void UpdateOAuth2ClientRequest::add_request_uris(const std::string& value) {
  request_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
}
inline void UpdateOAuth2ClientRequest::add_request_uris(std::string&& value) {
  request_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
}
inline void UpdateOAuth2ClientRequest::add_request_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
}
inline void UpdateOAuth2ClientRequest::add_request_uris(const char* value, size_t size) {
  request_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateOAuth2ClientRequest::request_uris() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
  return request_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateOAuth2ClientRequest::mutable_request_uris() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.request_uris)
  return &request_uris_;
}

// repeated .depot.devtools.auth.v0.identity.admin.ResponseType response_types = 24[json_name = "responseTypes"];
inline int UpdateOAuth2ClientRequest::_internal_response_types_size() const {
  return response_types_.size();
}
inline int UpdateOAuth2ClientRequest::response_types_size() const {
  return _internal_response_types_size();
}
inline void UpdateOAuth2ClientRequest::clear_response_types() {
  response_types_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::ResponseType UpdateOAuth2ClientRequest::_internal_response_types(int index) const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::ResponseType >(response_types_.Get(index));
}
inline ::depot::devtools::auth::v0::identity::admin::ResponseType UpdateOAuth2ClientRequest::response_types(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.response_types)
  return _internal_response_types(index);
}
inline void UpdateOAuth2ClientRequest::set_response_types(int index, ::depot::devtools::auth::v0::identity::admin::ResponseType value) {
  response_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.response_types)
}
inline void UpdateOAuth2ClientRequest::_internal_add_response_types(::depot::devtools::auth::v0::identity::admin::ResponseType value) {
  response_types_.Add(value);
}
inline void UpdateOAuth2ClientRequest::add_response_types(::depot::devtools::auth::v0::identity::admin::ResponseType value) {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.response_types)
  _internal_add_response_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
UpdateOAuth2ClientRequest::response_types() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.response_types)
  return response_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UpdateOAuth2ClientRequest::_internal_mutable_response_types() {
  return &response_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UpdateOAuth2ClientRequest::mutable_response_types() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.response_types)
  return _internal_mutable_response_types();
}

// string scope = 25[json_name = "scope"];
inline void UpdateOAuth2ClientRequest::clear_scope() {
  scope_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::scope() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.scope)
  return _internal_scope();
}
inline void UpdateOAuth2ClientRequest::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.scope)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.scope)
  return _internal_mutable_scope();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_scope() const {
  return scope_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_scope(const std::string& value) {
  
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_scope(std::string&& value) {
  
  scope_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.scope)
}
inline void UpdateOAuth2ClientRequest::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.scope)
}
inline void UpdateOAuth2ClientRequest::set_scope(const char* value,
    size_t size) {
  
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.scope)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_scope() {
  
  return scope_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_scope() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.scope)
  return scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.scope)
}

// string sector_identifier_uri = 26[json_name = "sectorIdentifierUri"];
inline void UpdateOAuth2ClientRequest::clear_sector_identifier_uri() {
  sector_identifier_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::sector_identifier_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.sector_identifier_uri)
  return _internal_sector_identifier_uri();
}
inline void UpdateOAuth2ClientRequest::set_sector_identifier_uri(const std::string& value) {
  _internal_set_sector_identifier_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.sector_identifier_uri)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_sector_identifier_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.sector_identifier_uri)
  return _internal_mutable_sector_identifier_uri();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_sector_identifier_uri() const {
  return sector_identifier_uri_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_sector_identifier_uri(const std::string& value) {
  
  sector_identifier_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_sector_identifier_uri(std::string&& value) {
  
  sector_identifier_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.sector_identifier_uri)
}
inline void UpdateOAuth2ClientRequest::set_sector_identifier_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sector_identifier_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.sector_identifier_uri)
}
inline void UpdateOAuth2ClientRequest::set_sector_identifier_uri(const char* value,
    size_t size) {
  
  sector_identifier_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.sector_identifier_uri)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_sector_identifier_uri() {
  
  return sector_identifier_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_sector_identifier_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.sector_identifier_uri)
  return sector_identifier_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_sector_identifier_uri(std::string* sector_identifier_uri) {
  if (sector_identifier_uri != nullptr) {
    
  } else {
    
  }
  sector_identifier_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sector_identifier_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.sector_identifier_uri)
}

// .depot.devtools.auth.v0.identity.admin.SubjectType subject_type = 27[json_name = "subjectType"];
inline void UpdateOAuth2ClientRequest::clear_subject_type() {
  subject_type_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::SubjectType UpdateOAuth2ClientRequest::_internal_subject_type() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::SubjectType >(subject_type_);
}
inline ::depot::devtools::auth::v0::identity::admin::SubjectType UpdateOAuth2ClientRequest::subject_type() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.subject_type)
  return _internal_subject_type();
}
inline void UpdateOAuth2ClientRequest::_internal_set_subject_type(::depot::devtools::auth::v0::identity::admin::SubjectType value) {
  
  subject_type_ = value;
}
inline void UpdateOAuth2ClientRequest::set_subject_type(::depot::devtools::auth::v0::identity::admin::SubjectType value) {
  _internal_set_subject_type(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.subject_type)
}

// .depot.devtools.auth.v0.identity.admin.TokenEndpointAuthMethod token_endpoint_auth_method = 28[json_name = "tokenEndpointAuthMethod"];
inline void UpdateOAuth2ClientRequest::clear_token_endpoint_auth_method() {
  token_endpoint_auth_method_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod UpdateOAuth2ClientRequest::_internal_token_endpoint_auth_method() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod >(token_endpoint_auth_method_);
}
inline ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod UpdateOAuth2ClientRequest::token_endpoint_auth_method() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.token_endpoint_auth_method)
  return _internal_token_endpoint_auth_method();
}
inline void UpdateOAuth2ClientRequest::_internal_set_token_endpoint_auth_method(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod value) {
  
  token_endpoint_auth_method_ = value;
}
inline void UpdateOAuth2ClientRequest::set_token_endpoint_auth_method(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod value) {
  _internal_set_token_endpoint_auth_method(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.token_endpoint_auth_method)
}

// .depot.devtools.auth.v0.identity.admin.TokenEndpointAuthSigningAlg token_endpoint_auth_signing_alg = 29[json_name = "tokenEndpointAuthSigningAlg"];
inline void UpdateOAuth2ClientRequest::clear_token_endpoint_auth_signing_alg() {
  token_endpoint_auth_signing_alg_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg UpdateOAuth2ClientRequest::_internal_token_endpoint_auth_signing_alg() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg >(token_endpoint_auth_signing_alg_);
}
inline ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg UpdateOAuth2ClientRequest::token_endpoint_auth_signing_alg() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.token_endpoint_auth_signing_alg)
  return _internal_token_endpoint_auth_signing_alg();
}
inline void UpdateOAuth2ClientRequest::_internal_set_token_endpoint_auth_signing_alg(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg value) {
  
  token_endpoint_auth_signing_alg_ = value;
}
inline void UpdateOAuth2ClientRequest::set_token_endpoint_auth_signing_alg(::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg value) {
  _internal_set_token_endpoint_auth_signing_alg(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.token_endpoint_auth_signing_alg)
}

// string tos_uri = 30[json_name = "tosUri"];
inline void UpdateOAuth2ClientRequest::clear_tos_uri() {
  tos_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::tos_uri() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.tos_uri)
  return _internal_tos_uri();
}
inline void UpdateOAuth2ClientRequest::set_tos_uri(const std::string& value) {
  _internal_set_tos_uri(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.tos_uri)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_tos_uri() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.tos_uri)
  return _internal_mutable_tos_uri();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_tos_uri() const {
  return tos_uri_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_tos_uri(const std::string& value) {
  
  tos_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_tos_uri(std::string&& value) {
  
  tos_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.tos_uri)
}
inline void UpdateOAuth2ClientRequest::set_tos_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tos_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.tos_uri)
}
inline void UpdateOAuth2ClientRequest::set_tos_uri(const char* value,
    size_t size) {
  
  tos_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.tos_uri)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_tos_uri() {
  
  return tos_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_tos_uri() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.tos_uri)
  return tos_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_tos_uri(std::string* tos_uri) {
  if (tos_uri != nullptr) {
    
  } else {
    
  }
  tos_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tos_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.tos_uri)
}

// .depot.devtools.auth.v0.identity.admin.UserinfoSignedResponseAlg userinfo_signed_response_alg = 31[json_name = "userinfoSignedResponseAlg"];
inline void UpdateOAuth2ClientRequest::clear_userinfo_signed_response_alg() {
  userinfo_signed_response_alg_ = 0;
}
inline ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg UpdateOAuth2ClientRequest::_internal_userinfo_signed_response_alg() const {
  return static_cast< ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg >(userinfo_signed_response_alg_);
}
inline ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg UpdateOAuth2ClientRequest::userinfo_signed_response_alg() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.userinfo_signed_response_alg)
  return _internal_userinfo_signed_response_alg();
}
inline void UpdateOAuth2ClientRequest::_internal_set_userinfo_signed_response_alg(::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg value) {
  
  userinfo_signed_response_alg_ = value;
}
inline void UpdateOAuth2ClientRequest::set_userinfo_signed_response_alg(::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg value) {
  _internal_set_userinfo_signed_response_alg(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.userinfo_signed_response_alg)
}

// string client_secret = 32[json_name = "clientSecret"];
inline void UpdateOAuth2ClientRequest::clear_client_secret() {
  client_secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::client_secret() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_secret)
  return _internal_client_secret();
}
inline void UpdateOAuth2ClientRequest::set_client_secret(const std::string& value) {
  _internal_set_client_secret(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_secret)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_client_secret() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_secret)
  return _internal_mutable_client_secret();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_client_secret() const {
  return client_secret_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_client_secret(const std::string& value) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_client_secret(std::string&& value) {
  
  client_secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_secret)
}
inline void UpdateOAuth2ClientRequest::set_client_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_secret)
}
inline void UpdateOAuth2ClientRequest::set_client_secret(const char* value,
    size_t size) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_secret)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_client_secret() {
  
  return client_secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_client_secret() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_secret)
  return client_secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_client_secret(std::string* client_secret) {
  if (client_secret != nullptr) {
    
  } else {
    
  }
  client_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_secret)
}

// string client_id = 33[json_name = "clientId"];
inline void UpdateOAuth2ClientRequest::clear_client_id() {
  client_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientRequest::client_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_id)
  return _internal_client_id();
}
inline void UpdateOAuth2ClientRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_id)
}
inline std::string* UpdateOAuth2ClientRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& UpdateOAuth2ClientRequest::_internal_client_id() const {
  return client_id_.Get();
}
inline void UpdateOAuth2ClientRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientRequest::set_client_id(std::string&& value) {
  
  client_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_id)
}
inline void UpdateOAuth2ClientRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_id)
}
inline void UpdateOAuth2ClientRequest::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_id)
}
inline std::string* UpdateOAuth2ClientRequest::_internal_mutable_client_id() {
  
  return client_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientRequest.client_id)
}

// -------------------------------------------------------------------

// UpdateOAuth2ClientResponse

// string client_id = 1[json_name = "clientId"];
inline void UpdateOAuth2ClientResponse::clear_client_id() {
  client_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientResponse::client_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_id)
  return _internal_client_id();
}
inline void UpdateOAuth2ClientResponse::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_id)
}
inline std::string* UpdateOAuth2ClientResponse::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& UpdateOAuth2ClientResponse::_internal_client_id() const {
  return client_id_.Get();
}
inline void UpdateOAuth2ClientResponse::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientResponse::set_client_id(std::string&& value) {
  
  client_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_id)
}
inline void UpdateOAuth2ClientResponse::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_id)
}
inline void UpdateOAuth2ClientResponse::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_id)
}
inline std::string* UpdateOAuth2ClientResponse::_internal_mutable_client_id() {
  
  return client_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientResponse::release_client_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientResponse::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_id)
}

// string client_secret = 2[json_name = "clientSecret"];
inline void UpdateOAuth2ClientResponse::clear_client_secret() {
  client_secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateOAuth2ClientResponse::client_secret() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_secret)
  return _internal_client_secret();
}
inline void UpdateOAuth2ClientResponse::set_client_secret(const std::string& value) {
  _internal_set_client_secret(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_secret)
}
inline std::string* UpdateOAuth2ClientResponse::mutable_client_secret() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_secret)
  return _internal_mutable_client_secret();
}
inline const std::string& UpdateOAuth2ClientResponse::_internal_client_secret() const {
  return client_secret_.Get();
}
inline void UpdateOAuth2ClientResponse::_internal_set_client_secret(const std::string& value) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateOAuth2ClientResponse::set_client_secret(std::string&& value) {
  
  client_secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_secret)
}
inline void UpdateOAuth2ClientResponse::set_client_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_secret)
}
inline void UpdateOAuth2ClientResponse::set_client_secret(const char* value,
    size_t size) {
  
  client_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_secret)
}
inline std::string* UpdateOAuth2ClientResponse::_internal_mutable_client_secret() {
  
  return client_secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateOAuth2ClientResponse::release_client_secret() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_secret)
  return client_secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateOAuth2ClientResponse::set_allocated_client_secret(std::string* client_secret) {
  if (client_secret != nullptr) {
    
  } else {
    
  }
  client_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateOAuth2ClientResponse.client_secret)
}

// -------------------------------------------------------------------

// DeleteOAuth2ClientRequest

// string client_id = 1[json_name = "clientId"];
inline void DeleteOAuth2ClientRequest::clear_client_id() {
  client_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteOAuth2ClientRequest::client_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientRequest.client_id)
  return _internal_client_id();
}
inline void DeleteOAuth2ClientRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientRequest.client_id)
}
inline std::string* DeleteOAuth2ClientRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& DeleteOAuth2ClientRequest::_internal_client_id() const {
  return client_id_.Get();
}
inline void DeleteOAuth2ClientRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteOAuth2ClientRequest::set_client_id(std::string&& value) {
  
  client_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientRequest.client_id)
}
inline void DeleteOAuth2ClientRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientRequest.client_id)
}
inline void DeleteOAuth2ClientRequest::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientRequest.client_id)
}
inline std::string* DeleteOAuth2ClientRequest::_internal_mutable_client_id() {
  
  return client_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteOAuth2ClientRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientRequest.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteOAuth2ClientRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.DeleteOAuth2ClientRequest.client_id)
}

// -------------------------------------------------------------------

// DeleteOAuth2ClientResponse

// -------------------------------------------------------------------

// GetAddressesRequest

// string identity_id = 1[json_name = "identityId"];
inline void GetAddressesRequest::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressesRequest::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressesRequest.identity_id)
  return _internal_identity_id();
}
inline void GetAddressesRequest::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressesRequest.identity_id)
}
inline std::string* GetAddressesRequest::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressesRequest.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetAddressesRequest::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetAddressesRequest::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressesRequest::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressesRequest.identity_id)
}
inline void GetAddressesRequest::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressesRequest.identity_id)
}
inline void GetAddressesRequest::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressesRequest.identity_id)
}
inline std::string* GetAddressesRequest::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressesRequest::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressesRequest.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressesRequest::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressesRequest.identity_id)
}

// -------------------------------------------------------------------

// GetAddressesResponse_Address

// string id = 1[json_name = "id"];
inline void GetAddressesResponse_Address::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressesResponse_Address::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id)
  return _internal_id();
}
inline void GetAddressesResponse_Address::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id)
}
inline std::string* GetAddressesResponse_Address::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id)
  return _internal_mutable_id();
}
inline const std::string& GetAddressesResponse_Address::_internal_id() const {
  return id_.Get();
}
inline void GetAddressesResponse_Address::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressesResponse_Address::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id)
}
inline void GetAddressesResponse_Address::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id)
}
inline void GetAddressesResponse_Address::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id)
}
inline std::string* GetAddressesResponse_Address::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressesResponse_Address::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressesResponse_Address::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id)
}

// string identity_id = 2[json_name = "identityId"];
inline void GetAddressesResponse_Address::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressesResponse_Address::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.identity_id)
  return _internal_identity_id();
}
inline void GetAddressesResponse_Address::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.identity_id)
}
inline std::string* GetAddressesResponse_Address::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetAddressesResponse_Address::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetAddressesResponse_Address::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressesResponse_Address::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.identity_id)
}
inline void GetAddressesResponse_Address::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.identity_id)
}
inline void GetAddressesResponse_Address::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.identity_id)
}
inline std::string* GetAddressesResponse_Address::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressesResponse_Address::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressesResponse_Address::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.identity_id)
}

// string name = 3[json_name = "name"];
inline void GetAddressesResponse_Address::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressesResponse_Address::name() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.name)
  return _internal_name();
}
inline void GetAddressesResponse_Address::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.name)
}
inline std::string* GetAddressesResponse_Address::mutable_name() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.name)
  return _internal_mutable_name();
}
inline const std::string& GetAddressesResponse_Address::_internal_name() const {
  return name_.Get();
}
inline void GetAddressesResponse_Address::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressesResponse_Address::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.name)
}
inline void GetAddressesResponse_Address::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.name)
}
inline void GetAddressesResponse_Address::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.name)
}
inline std::string* GetAddressesResponse_Address::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressesResponse_Address::release_name() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressesResponse_Address::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.name)
}

// string address = 4[json_name = "address"];
inline void GetAddressesResponse_Address::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressesResponse_Address::address() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.address)
  return _internal_address();
}
inline void GetAddressesResponse_Address::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.address)
}
inline std::string* GetAddressesResponse_Address::mutable_address() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.address)
  return _internal_mutable_address();
}
inline const std::string& GetAddressesResponse_Address::_internal_address() const {
  return address_.Get();
}
inline void GetAddressesResponse_Address::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressesResponse_Address::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.address)
}
inline void GetAddressesResponse_Address::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.address)
}
inline void GetAddressesResponse_Address::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.address)
}
inline std::string* GetAddressesResponse_Address::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressesResponse_Address::release_address() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressesResponse_Address::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.address)
}

// bool verified = 5[json_name = "verified"];
inline void GetAddressesResponse_Address::clear_verified() {
  verified_ = false;
}
inline bool GetAddressesResponse_Address::_internal_verified() const {
  return verified_;
}
inline bool GetAddressesResponse_Address::verified() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.verified)
  return _internal_verified();
}
inline void GetAddressesResponse_Address::_internal_set_verified(bool value) {
  
  verified_ = value;
}
inline void GetAddressesResponse_Address::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.verified)
}

// string id_schema_key = 6[json_name = "idSchemaKey"];
inline void GetAddressesResponse_Address::clear_id_schema_key() {
  id_schema_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressesResponse_Address::id_schema_key() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id_schema_key)
  return _internal_id_schema_key();
}
inline void GetAddressesResponse_Address::set_id_schema_key(const std::string& value) {
  _internal_set_id_schema_key(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id_schema_key)
}
inline std::string* GetAddressesResponse_Address::mutable_id_schema_key() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id_schema_key)
  return _internal_mutable_id_schema_key();
}
inline const std::string& GetAddressesResponse_Address::_internal_id_schema_key() const {
  return id_schema_key_.Get();
}
inline void GetAddressesResponse_Address::_internal_set_id_schema_key(const std::string& value) {
  
  id_schema_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressesResponse_Address::set_id_schema_key(std::string&& value) {
  
  id_schema_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id_schema_key)
}
inline void GetAddressesResponse_Address::set_id_schema_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_schema_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id_schema_key)
}
inline void GetAddressesResponse_Address::set_id_schema_key(const char* value,
    size_t size) {
  
  id_schema_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id_schema_key)
}
inline std::string* GetAddressesResponse_Address::_internal_mutable_id_schema_key() {
  
  return id_schema_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressesResponse_Address::release_id_schema_key() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id_schema_key)
  return id_schema_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressesResponse_Address::set_allocated_id_schema_key(std::string* id_schema_key) {
  if (id_schema_key != nullptr) {
    
  } else {
    
  }
  id_schema_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id_schema_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address.id_schema_key)
}

// -------------------------------------------------------------------

// GetAddressesResponse

// repeated .depot.devtools.auth.v0.identity.admin.GetAddressesResponse.Address addresses = 1[json_name = "addresses"];
inline int GetAddressesResponse::_internal_addresses_size() const {
  return addresses_.size();
}
inline int GetAddressesResponse::addresses_size() const {
  return _internal_addresses_size();
}
inline void GetAddressesResponse::clear_addresses() {
  addresses_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address* GetAddressesResponse::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.addresses)
  return addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address >*
GetAddressesResponse::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.addresses)
  return &addresses_;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address& GetAddressesResponse::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address& GetAddressesResponse::addresses(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.addresses)
  return _internal_addresses(index);
}
inline ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address* GetAddressesResponse::_internal_add_addresses() {
  return addresses_.Add();
}
inline ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address* GetAddressesResponse::add_addresses() {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.addresses)
  return _internal_add_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetAddressesResponse_Address >&
GetAddressesResponse::addresses() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetAddressesResponse.addresses)
  return addresses_;
}

// -------------------------------------------------------------------

// GetAddressRequest

// string id = 1[json_name = "id"];
inline bool GetAddressRequest::_internal_has_id() const {
  return match_case() == kId;
}
inline void GetAddressRequest::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void GetAddressRequest::clear_id() {
  if (_internal_has_id()) {
    match_.id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_match();
  }
}
inline const std::string& GetAddressRequest::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressRequest.id)
  return _internal_id();
}
inline void GetAddressRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressRequest.id)
}
inline std::string* GetAddressRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetAddressRequest::_internal_id() const {
  if (_internal_has_id()) {
    return match_.id_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetAddressRequest::_internal_set_id(const std::string& value) {
  if (!_internal_has_id()) {
    clear_match();
    set_has_id();
    match_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  match_.id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressRequest::set_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressRequest.id)
  if (!_internal_has_id()) {
    clear_match();
    set_has_id();
    match_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  match_.id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressRequest.id)
}
inline void GetAddressRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_id()) {
    clear_match();
    set_has_id();
    match_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  match_.id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressRequest.id)
}
inline void GetAddressRequest::set_id(const char* value,
                             size_t size) {
  if (!_internal_has_id()) {
    clear_match();
    set_has_id();
    match_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  match_.id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressRequest.id)
}
inline std::string* GetAddressRequest::_internal_mutable_id() {
  if (!_internal_has_id()) {
    clear_match();
    set_has_id();
    match_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return match_.id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressRequest::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressRequest.id)
  if (_internal_has_id()) {
    clear_has_match();
    return match_.id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetAddressRequest::set_allocated_id(std::string* id) {
  if (has_match()) {
    clear_match();
  }
  if (id != nullptr) {
    set_has_id();
    match_.id_.UnsafeSetDefault(id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressRequest.id)
}

// string verification = 2[json_name = "verification"];
inline bool GetAddressRequest::_internal_has_verification() const {
  return match_case() == kVerification;
}
inline void GetAddressRequest::set_has_verification() {
  _oneof_case_[0] = kVerification;
}
inline void GetAddressRequest::clear_verification() {
  if (_internal_has_verification()) {
    match_.verification_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_match();
  }
}
inline const std::string& GetAddressRequest::verification() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressRequest.verification)
  return _internal_verification();
}
inline void GetAddressRequest::set_verification(const std::string& value) {
  _internal_set_verification(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressRequest.verification)
}
inline std::string* GetAddressRequest::mutable_verification() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressRequest.verification)
  return _internal_mutable_verification();
}
inline const std::string& GetAddressRequest::_internal_verification() const {
  if (_internal_has_verification()) {
    return match_.verification_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetAddressRequest::_internal_set_verification(const std::string& value) {
  if (!_internal_has_verification()) {
    clear_match();
    set_has_verification();
    match_.verification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  match_.verification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressRequest::set_verification(std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressRequest.verification)
  if (!_internal_has_verification()) {
    clear_match();
    set_has_verification();
    match_.verification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  match_.verification_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressRequest.verification)
}
inline void GetAddressRequest::set_verification(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_verification()) {
    clear_match();
    set_has_verification();
    match_.verification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  match_.verification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressRequest.verification)
}
inline void GetAddressRequest::set_verification(const char* value,
                             size_t size) {
  if (!_internal_has_verification()) {
    clear_match();
    set_has_verification();
    match_.verification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  match_.verification_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressRequest.verification)
}
inline std::string* GetAddressRequest::_internal_mutable_verification() {
  if (!_internal_has_verification()) {
    clear_match();
    set_has_verification();
    match_.verification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return match_.verification_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressRequest::release_verification() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressRequest.verification)
  if (_internal_has_verification()) {
    clear_has_match();
    return match_.verification_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetAddressRequest::set_allocated_verification(std::string* verification) {
  if (has_match()) {
    clear_match();
  }
  if (verification != nullptr) {
    set_has_verification();
    match_.verification_.UnsafeSetDefault(verification);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(verification);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressRequest.verification)
}

inline bool GetAddressRequest::has_match() const {
  return match_case() != MATCH_NOT_SET;
}
inline void GetAddressRequest::clear_has_match() {
  _oneof_case_[0] = MATCH_NOT_SET;
}
inline GetAddressRequest::MatchCase GetAddressRequest::match_case() const {
  return GetAddressRequest::MatchCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetAddressResponse

// string id = 1[json_name = "id"];
inline void GetAddressResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressResponse::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id)
  return _internal_id();
}
inline void GetAddressResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id)
}
inline std::string* GetAddressResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id)
  return _internal_mutable_id();
}
inline const std::string& GetAddressResponse::_internal_id() const {
  return id_.Get();
}
inline void GetAddressResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id)
}
inline void GetAddressResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id)
}
inline void GetAddressResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id)
}
inline std::string* GetAddressResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressResponse::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id)
}

// string identity_id = 2[json_name = "identityId"];
inline void GetAddressResponse::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressResponse::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressResponse.identity_id)
  return _internal_identity_id();
}
inline void GetAddressResponse::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressResponse.identity_id)
}
inline std::string* GetAddressResponse::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressResponse.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetAddressResponse::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetAddressResponse::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressResponse::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressResponse.identity_id)
}
inline void GetAddressResponse::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressResponse.identity_id)
}
inline void GetAddressResponse::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressResponse.identity_id)
}
inline std::string* GetAddressResponse::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressResponse::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressResponse.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressResponse::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressResponse.identity_id)
}

// string name = 3[json_name = "name"];
inline void GetAddressResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressResponse::name() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressResponse.name)
  return _internal_name();
}
inline void GetAddressResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressResponse.name)
}
inline std::string* GetAddressResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressResponse.name)
  return _internal_mutable_name();
}
inline const std::string& GetAddressResponse::_internal_name() const {
  return name_.Get();
}
inline void GetAddressResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressResponse.name)
}
inline void GetAddressResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressResponse.name)
}
inline void GetAddressResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressResponse.name)
}
inline std::string* GetAddressResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressResponse::release_name() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressResponse.name)
}

// string address = 4[json_name = "address"];
inline void GetAddressResponse::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressResponse::address() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressResponse.address)
  return _internal_address();
}
inline void GetAddressResponse::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressResponse.address)
}
inline std::string* GetAddressResponse::mutable_address() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressResponse.address)
  return _internal_mutable_address();
}
inline const std::string& GetAddressResponse::_internal_address() const {
  return address_.Get();
}
inline void GetAddressResponse::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressResponse::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressResponse.address)
}
inline void GetAddressResponse::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressResponse.address)
}
inline void GetAddressResponse::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressResponse.address)
}
inline std::string* GetAddressResponse::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressResponse::release_address() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressResponse.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressResponse::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressResponse.address)
}

// bool verified = 5[json_name = "verified"];
inline void GetAddressResponse::clear_verified() {
  verified_ = false;
}
inline bool GetAddressResponse::_internal_verified() const {
  return verified_;
}
inline bool GetAddressResponse::verified() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressResponse.verified)
  return _internal_verified();
}
inline void GetAddressResponse::_internal_set_verified(bool value) {
  
  verified_ = value;
}
inline void GetAddressResponse::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressResponse.verified)
}

// string id_schema_key = 6[json_name = "idSchemaKey"];
inline void GetAddressResponse::clear_id_schema_key() {
  id_schema_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressResponse::id_schema_key() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id_schema_key)
  return _internal_id_schema_key();
}
inline void GetAddressResponse::set_id_schema_key(const std::string& value) {
  _internal_set_id_schema_key(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id_schema_key)
}
inline std::string* GetAddressResponse::mutable_id_schema_key() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id_schema_key)
  return _internal_mutable_id_schema_key();
}
inline const std::string& GetAddressResponse::_internal_id_schema_key() const {
  return id_schema_key_.Get();
}
inline void GetAddressResponse::_internal_set_id_schema_key(const std::string& value) {
  
  id_schema_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressResponse::set_id_schema_key(std::string&& value) {
  
  id_schema_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id_schema_key)
}
inline void GetAddressResponse::set_id_schema_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_schema_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id_schema_key)
}
inline void GetAddressResponse::set_id_schema_key(const char* value,
    size_t size) {
  
  id_schema_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id_schema_key)
}
inline std::string* GetAddressResponse::_internal_mutable_id_schema_key() {
  
  return id_schema_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressResponse::release_id_schema_key() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id_schema_key)
  return id_schema_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressResponse::set_allocated_id_schema_key(std::string* id_schema_key) {
  if (id_schema_key != nullptr) {
    
  } else {
    
  }
  id_schema_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id_schema_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetAddressResponse.id_schema_key)
}

// -------------------------------------------------------------------

// UpdateAddressRequest

// string id = 1[json_name = "id"];
inline void UpdateAddressRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateAddressRequest::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.id)
  return _internal_id();
}
inline void UpdateAddressRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.id)
}
inline std::string* UpdateAddressRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.id)
  return _internal_mutable_id();
}
inline const std::string& UpdateAddressRequest::_internal_id() const {
  return id_.Get();
}
inline void UpdateAddressRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateAddressRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.id)
}
inline void UpdateAddressRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.id)
}
inline void UpdateAddressRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.id)
}
inline std::string* UpdateAddressRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateAddressRequest::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateAddressRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.id)
}

// bool verified = 2[json_name = "verified"];
inline bool UpdateAddressRequest::_internal_has_verified() const {
  return attribute_case() == kVerified;
}
inline void UpdateAddressRequest::set_has_verified() {
  _oneof_case_[0] = kVerified;
}
inline void UpdateAddressRequest::clear_verified() {
  if (_internal_has_verified()) {
    attribute_.verified_ = false;
    clear_has_attribute();
  }
}
inline bool UpdateAddressRequest::_internal_verified() const {
  if (_internal_has_verified()) {
    return attribute_.verified_;
  }
  return false;
}
inline void UpdateAddressRequest::_internal_set_verified(bool value) {
  if (!_internal_has_verified()) {
    clear_attribute();
    set_has_verified();
  }
  attribute_.verified_ = value;
}
inline bool UpdateAddressRequest::verified() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.verified)
  return _internal_verified();
}
inline void UpdateAddressRequest::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.verified)
}

// string address = 3[json_name = "address"];
inline bool UpdateAddressRequest::_internal_has_address() const {
  return attribute_case() == kAddress;
}
inline void UpdateAddressRequest::set_has_address() {
  _oneof_case_[0] = kAddress;
}
inline void UpdateAddressRequest::clear_address() {
  if (_internal_has_address()) {
    attribute_.address_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_attribute();
  }
}
inline const std::string& UpdateAddressRequest::address() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.address)
  return _internal_address();
}
inline void UpdateAddressRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.address)
}
inline std::string* UpdateAddressRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.address)
  return _internal_mutable_address();
}
inline const std::string& UpdateAddressRequest::_internal_address() const {
  if (_internal_has_address()) {
    return attribute_.address_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UpdateAddressRequest::_internal_set_address(const std::string& value) {
  if (!_internal_has_address()) {
    clear_attribute();
    set_has_address();
    attribute_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  attribute_.address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateAddressRequest::set_address(std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.address)
  if (!_internal_has_address()) {
    clear_attribute();
    set_has_address();
    attribute_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  attribute_.address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.address)
}
inline void UpdateAddressRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_address()) {
    clear_attribute();
    set_has_address();
    attribute_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  attribute_.address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.address)
}
inline void UpdateAddressRequest::set_address(const char* value,
                             size_t size) {
  if (!_internal_has_address()) {
    clear_attribute();
    set_has_address();
    attribute_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  attribute_.address_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.address)
}
inline std::string* UpdateAddressRequest::_internal_mutable_address() {
  if (!_internal_has_address()) {
    clear_attribute();
    set_has_address();
    attribute_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return attribute_.address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateAddressRequest::release_address() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.address)
  if (_internal_has_address()) {
    clear_has_attribute();
    return attribute_.address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void UpdateAddressRequest::set_allocated_address(std::string* address) {
  if (has_attribute()) {
    clear_attribute();
  }
  if (address != nullptr) {
    set_has_address();
    attribute_.address_.UnsafeSetDefault(address);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(address);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateAddressRequest.address)
}

inline bool UpdateAddressRequest::has_attribute() const {
  return attribute_case() != ATTRIBUTE_NOT_SET;
}
inline void UpdateAddressRequest::clear_has_attribute() {
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}
inline UpdateAddressRequest::AttributeCase UpdateAddressRequest::attribute_case() const {
  return UpdateAddressRequest::AttributeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UpdateAddressResponse

// -------------------------------------------------------------------

// GetProfileRequest

// string identity_id = 1[json_name = "identityId"];
inline void GetProfileRequest::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetProfileRequest::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetProfileRequest.identity_id)
  return _internal_identity_id();
}
inline void GetProfileRequest::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetProfileRequest.identity_id)
}
inline std::string* GetProfileRequest::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetProfileRequest.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetProfileRequest::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetProfileRequest::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProfileRequest::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetProfileRequest.identity_id)
}
inline void GetProfileRequest::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetProfileRequest.identity_id)
}
inline void GetProfileRequest::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetProfileRequest.identity_id)
}
inline std::string* GetProfileRequest::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProfileRequest::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetProfileRequest.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProfileRequest::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetProfileRequest.identity_id)
}

// -------------------------------------------------------------------

// GetProfileResponse

// string profile = 1[json_name = "profile"];
inline void GetProfileResponse::clear_profile() {
  profile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetProfileResponse::profile() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetProfileResponse.profile)
  return _internal_profile();
}
inline void GetProfileResponse::set_profile(const std::string& value) {
  _internal_set_profile(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetProfileResponse.profile)
}
inline std::string* GetProfileResponse::mutable_profile() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetProfileResponse.profile)
  return _internal_mutable_profile();
}
inline const std::string& GetProfileResponse::_internal_profile() const {
  return profile_.Get();
}
inline void GetProfileResponse::_internal_set_profile(const std::string& value) {
  
  profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProfileResponse::set_profile(std::string&& value) {
  
  profile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetProfileResponse.profile)
}
inline void GetProfileResponse::set_profile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetProfileResponse.profile)
}
inline void GetProfileResponse::set_profile(const char* value,
    size_t size) {
  
  profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetProfileResponse.profile)
}
inline std::string* GetProfileResponse::_internal_mutable_profile() {
  
  return profile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProfileResponse::release_profile() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetProfileResponse.profile)
  return profile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProfileResponse::set_allocated_profile(std::string* profile) {
  if (profile != nullptr) {
    
  } else {
    
  }
  profile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetProfileResponse.profile)
}

// -------------------------------------------------------------------

// UpdateProfileRequest

// string identity_id = 1[json_name = "identityId"];
inline void UpdateProfileRequest::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateProfileRequest::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.identity_id)
  return _internal_identity_id();
}
inline void UpdateProfileRequest::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.identity_id)
}
inline std::string* UpdateProfileRequest::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& UpdateProfileRequest::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void UpdateProfileRequest::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateProfileRequest::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.identity_id)
}
inline void UpdateProfileRequest::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.identity_id)
}
inline void UpdateProfileRequest::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.identity_id)
}
inline std::string* UpdateProfileRequest::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateProfileRequest::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateProfileRequest::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.identity_id)
}

// string profile = 2[json_name = "profile"];
inline void UpdateProfileRequest::clear_profile() {
  profile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateProfileRequest::profile() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.profile)
  return _internal_profile();
}
inline void UpdateProfileRequest::set_profile(const std::string& value) {
  _internal_set_profile(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.profile)
}
inline std::string* UpdateProfileRequest::mutable_profile() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.profile)
  return _internal_mutable_profile();
}
inline const std::string& UpdateProfileRequest::_internal_profile() const {
  return profile_.Get();
}
inline void UpdateProfileRequest::_internal_set_profile(const std::string& value) {
  
  profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateProfileRequest::set_profile(std::string&& value) {
  
  profile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.profile)
}
inline void UpdateProfileRequest::set_profile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.profile)
}
inline void UpdateProfileRequest::set_profile(const char* value,
    size_t size) {
  
  profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.profile)
}
inline std::string* UpdateProfileRequest::_internal_mutable_profile() {
  
  return profile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateProfileRequest::release_profile() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.profile)
  return profile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateProfileRequest::set_allocated_profile(std::string* profile) {
  if (profile != nullptr) {
    
  } else {
    
  }
  profile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateProfileRequest.profile)
}

// -------------------------------------------------------------------

// UpdateProfileResponse

// -------------------------------------------------------------------

// GetIdentityLoginAttemptsRequest

// string identity_id = 1[json_name = "identityId"];
inline void GetIdentityLoginAttemptsRequest::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityLoginAttemptsRequest::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsRequest.identity_id)
  return _internal_identity_id();
}
inline void GetIdentityLoginAttemptsRequest::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsRequest.identity_id)
}
inline std::string* GetIdentityLoginAttemptsRequest::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsRequest.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetIdentityLoginAttemptsRequest::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetIdentityLoginAttemptsRequest::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityLoginAttemptsRequest::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsRequest.identity_id)
}
inline void GetIdentityLoginAttemptsRequest::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsRequest.identity_id)
}
inline void GetIdentityLoginAttemptsRequest::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsRequest.identity_id)
}
inline std::string* GetIdentityLoginAttemptsRequest::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityLoginAttemptsRequest::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsRequest.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityLoginAttemptsRequest::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsRequest.identity_id)
}

// -------------------------------------------------------------------

// GetIdentityLoginAttemptsResponse_Attempt

// string id = 1[json_name = "id"];
inline void GetIdentityLoginAttemptsResponse_Attempt::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityLoginAttemptsResponse_Attempt::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.id)
  return _internal_id();
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.id)
}
inline std::string* GetIdentityLoginAttemptsResponse_Attempt::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.id)
  return _internal_mutable_id();
}
inline const std::string& GetIdentityLoginAttemptsResponse_Attempt::_internal_id() const {
  return id_.Get();
}
inline void GetIdentityLoginAttemptsResponse_Attempt::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.id)
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.id)
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.id)
}
inline std::string* GetIdentityLoginAttemptsResponse_Attempt::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityLoginAttemptsResponse_Attempt::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.id)
}

// string identity_id = 2[json_name = "identityId"];
inline void GetIdentityLoginAttemptsResponse_Attempt::clear_identity_id() {
  identity_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityLoginAttemptsResponse_Attempt::identity_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.identity_id)
  return _internal_identity_id();
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_identity_id(const std::string& value) {
  _internal_set_identity_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.identity_id)
}
inline std::string* GetIdentityLoginAttemptsResponse_Attempt::mutable_identity_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.identity_id)
  return _internal_mutable_identity_id();
}
inline const std::string& GetIdentityLoginAttemptsResponse_Attempt::_internal_identity_id() const {
  return identity_id_.Get();
}
inline void GetIdentityLoginAttemptsResponse_Attempt::_internal_set_identity_id(const std::string& value) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_identity_id(std::string&& value) {
  
  identity_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.identity_id)
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_identity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.identity_id)
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_identity_id(const char* value,
    size_t size) {
  
  identity_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.identity_id)
}
inline std::string* GetIdentityLoginAttemptsResponse_Attempt::_internal_mutable_identity_id() {
  
  return identity_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityLoginAttemptsResponse_Attempt::release_identity_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.identity_id)
  return identity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_allocated_identity_id(std::string* identity_id) {
  if (identity_id != nullptr) {
    
  } else {
    
  }
  identity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.identity_id)
}

// string status = 3[json_name = "status"];
inline void GetIdentityLoginAttemptsResponse_Attempt::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdentityLoginAttemptsResponse_Attempt::status() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.status)
  return _internal_status();
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.status)
}
inline std::string* GetIdentityLoginAttemptsResponse_Attempt::mutable_status() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.status)
  return _internal_mutable_status();
}
inline const std::string& GetIdentityLoginAttemptsResponse_Attempt::_internal_status() const {
  return status_.Get();
}
inline void GetIdentityLoginAttemptsResponse_Attempt::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.status)
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.status)
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.status)
}
inline std::string* GetIdentityLoginAttemptsResponse_Attempt::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdentityLoginAttemptsResponse_Attempt::release_status() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.status)
}

// repeated string authentication_methods = 4[json_name = "authenticationMethods"];
inline int GetIdentityLoginAttemptsResponse_Attempt::_internal_authentication_methods_size() const {
  return authentication_methods_.size();
}
inline int GetIdentityLoginAttemptsResponse_Attempt::authentication_methods_size() const {
  return _internal_authentication_methods_size();
}
inline void GetIdentityLoginAttemptsResponse_Attempt::clear_authentication_methods() {
  authentication_methods_.Clear();
}
inline std::string* GetIdentityLoginAttemptsResponse_Attempt::add_authentication_methods() {
  // @@protoc_insertion_point(field_add_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
  return _internal_add_authentication_methods();
}
inline const std::string& GetIdentityLoginAttemptsResponse_Attempt::_internal_authentication_methods(int index) const {
  return authentication_methods_.Get(index);
}
inline const std::string& GetIdentityLoginAttemptsResponse_Attempt::authentication_methods(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
  return _internal_authentication_methods(index);
}
inline std::string* GetIdentityLoginAttemptsResponse_Attempt::mutable_authentication_methods(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
  return authentication_methods_.Mutable(index);
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_authentication_methods(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
  authentication_methods_.Mutable(index)->assign(value);
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_authentication_methods(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
  authentication_methods_.Mutable(index)->assign(std::move(value));
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_authentication_methods(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authentication_methods_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_authentication_methods(int index, const char* value, size_t size) {
  authentication_methods_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
}
inline std::string* GetIdentityLoginAttemptsResponse_Attempt::_internal_add_authentication_methods() {
  return authentication_methods_.Add();
}
inline void GetIdentityLoginAttemptsResponse_Attempt::add_authentication_methods(const std::string& value) {
  authentication_methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
}
inline void GetIdentityLoginAttemptsResponse_Attempt::add_authentication_methods(std::string&& value) {
  authentication_methods_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
}
inline void GetIdentityLoginAttemptsResponse_Attempt::add_authentication_methods(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authentication_methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
}
inline void GetIdentityLoginAttemptsResponse_Attempt::add_authentication_methods(const char* value, size_t size) {
  authentication_methods_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetIdentityLoginAttemptsResponse_Attempt::authentication_methods() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
  return authentication_methods_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetIdentityLoginAttemptsResponse_Attempt::mutable_authentication_methods() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.authentication_methods)
  return &authentication_methods_;
}

// .google.protobuf.Timestamp created_at = 5[json_name = "createdAt"];
inline bool GetIdentityLoginAttemptsResponse_Attempt::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetIdentityLoginAttemptsResponse_Attempt::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentityLoginAttemptsResponse_Attempt::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentityLoginAttemptsResponse_Attempt::created_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.created_at)
  return _internal_created_at();
}
inline void GetIdentityLoginAttemptsResponse_Attempt::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityLoginAttemptsResponse_Attempt::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityLoginAttemptsResponse_Attempt::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityLoginAttemptsResponse_Attempt::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityLoginAttemptsResponse_Attempt::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.created_at)
  return _internal_mutable_created_at();
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.created_at)
}

// .google.protobuf.Timestamp expires_at = 6[json_name = "expiresAt"];
inline bool GetIdentityLoginAttemptsResponse_Attempt::_internal_has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline bool GetIdentityLoginAttemptsResponse_Attempt::has_expires_at() const {
  return _internal_has_expires_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentityLoginAttemptsResponse_Attempt::_internal_expires_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expires_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdentityLoginAttemptsResponse_Attempt::expires_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.expires_at)
  return _internal_expires_at();
}
inline void GetIdentityLoginAttemptsResponse_Attempt::unsafe_arena_set_allocated_expires_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  expires_at_ = expires_at;
  if (expires_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.expires_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityLoginAttemptsResponse_Attempt::release_expires_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityLoginAttemptsResponse_Attempt::unsafe_arena_release_expires_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.expires_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityLoginAttemptsResponse_Attempt::_internal_mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expires_at_ = p;
  }
  return expires_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdentityLoginAttemptsResponse_Attempt::mutable_expires_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.expires_at)
  return _internal_mutable_expires_at();
}
inline void GetIdentityLoginAttemptsResponse_Attempt::set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt.expires_at)
}

// -------------------------------------------------------------------

// GetIdentityLoginAttemptsResponse

// repeated .depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.Attempt attempts = 1[json_name = "attempts"];
inline int GetIdentityLoginAttemptsResponse::_internal_attempts_size() const {
  return attempts_.size();
}
inline int GetIdentityLoginAttemptsResponse::attempts_size() const {
  return _internal_attempts_size();
}
inline void GetIdentityLoginAttemptsResponse::clear_attempts() {
  attempts_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt* GetIdentityLoginAttemptsResponse::mutable_attempts(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.attempts)
  return attempts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt >*
GetIdentityLoginAttemptsResponse::mutable_attempts() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.attempts)
  return &attempts_;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt& GetIdentityLoginAttemptsResponse::_internal_attempts(int index) const {
  return attempts_.Get(index);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt& GetIdentityLoginAttemptsResponse::attempts(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.attempts)
  return _internal_attempts(index);
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt* GetIdentityLoginAttemptsResponse::_internal_add_attempts() {
  return attempts_.Add();
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt* GetIdentityLoginAttemptsResponse::add_attempts() {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.attempts)
  return _internal_add_attempts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdentityLoginAttemptsResponse_Attempt >&
GetIdentityLoginAttemptsResponse::attempts() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetIdentityLoginAttemptsResponse.attempts)
  return attempts_;
}

// -------------------------------------------------------------------

// CreateIdSchemaRequest

// string name = 1[json_name = "name"];
inline void CreateIdSchemaRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateIdSchemaRequest::name() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.name)
  return _internal_name();
}
inline void CreateIdSchemaRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.name)
}
inline std::string* CreateIdSchemaRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateIdSchemaRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateIdSchemaRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateIdSchemaRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.name)
}
inline void CreateIdSchemaRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.name)
}
inline void CreateIdSchemaRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.name)
}
inline std::string* CreateIdSchemaRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateIdSchemaRequest::release_name() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateIdSchemaRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.name)
}

// .google.protobuf.Struct content = 2[json_name = "content"];
inline bool CreateIdSchemaRequest::_internal_has_content() const {
  return this != internal_default_instance() && content_ != nullptr;
}
inline bool CreateIdSchemaRequest::has_content() const {
  return _internal_has_content();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& CreateIdSchemaRequest::_internal_content() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = content_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& CreateIdSchemaRequest::content() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.content)
  return _internal_content();
}
inline void CreateIdSchemaRequest::unsafe_arena_set_allocated_content(
    PROTOBUF_NAMESPACE_ID::Struct* content) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.content)
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateIdSchemaRequest::release_content() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = content_;
  content_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateIdSchemaRequest::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.content)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = content_;
  content_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateIdSchemaRequest::_internal_mutable_content() {
  
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    content_ = p;
  }
  return content_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* CreateIdSchemaRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.content)
  return _internal_mutable_content();
}
inline void CreateIdSchemaRequest::set_allocated_content(PROTOBUF_NAMESPACE_ID::Struct* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content)->GetArena();
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateIdSchemaRequest.content)
}

// -------------------------------------------------------------------

// CreateIdSchemaResponse

// string id = 2[json_name = "id"];
inline void CreateIdSchemaResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateIdSchemaResponse::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.CreateIdSchemaResponse.id)
  return _internal_id();
}
inline void CreateIdSchemaResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.CreateIdSchemaResponse.id)
}
inline std::string* CreateIdSchemaResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.CreateIdSchemaResponse.id)
  return _internal_mutable_id();
}
inline const std::string& CreateIdSchemaResponse::_internal_id() const {
  return id_.Get();
}
inline void CreateIdSchemaResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateIdSchemaResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.CreateIdSchemaResponse.id)
}
inline void CreateIdSchemaResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.CreateIdSchemaResponse.id)
}
inline void CreateIdSchemaResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.CreateIdSchemaResponse.id)
}
inline std::string* CreateIdSchemaResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateIdSchemaResponse::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.CreateIdSchemaResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateIdSchemaResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.CreateIdSchemaResponse.id)
}

// -------------------------------------------------------------------

// GetIdSchemasRequest

// -------------------------------------------------------------------

// GetIdSchemasResponse_JsonSchema

// string id = 1[json_name = "id"];
inline void GetIdSchemasResponse_JsonSchema::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdSchemasResponse_JsonSchema::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.id)
  return _internal_id();
}
inline void GetIdSchemasResponse_JsonSchema::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.id)
}
inline std::string* GetIdSchemasResponse_JsonSchema::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.id)
  return _internal_mutable_id();
}
inline const std::string& GetIdSchemasResponse_JsonSchema::_internal_id() const {
  return id_.Get();
}
inline void GetIdSchemasResponse_JsonSchema::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdSchemasResponse_JsonSchema::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.id)
}
inline void GetIdSchemasResponse_JsonSchema::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.id)
}
inline void GetIdSchemasResponse_JsonSchema::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.id)
}
inline std::string* GetIdSchemasResponse_JsonSchema::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdSchemasResponse_JsonSchema::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdSchemasResponse_JsonSchema::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.id)
}

// string name = 2[json_name = "name"];
inline void GetIdSchemasResponse_JsonSchema::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdSchemasResponse_JsonSchema::name() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.name)
  return _internal_name();
}
inline void GetIdSchemasResponse_JsonSchema::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.name)
}
inline std::string* GetIdSchemasResponse_JsonSchema::mutable_name() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.name)
  return _internal_mutable_name();
}
inline const std::string& GetIdSchemasResponse_JsonSchema::_internal_name() const {
  return name_.Get();
}
inline void GetIdSchemasResponse_JsonSchema::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdSchemasResponse_JsonSchema::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.name)
}
inline void GetIdSchemasResponse_JsonSchema::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.name)
}
inline void GetIdSchemasResponse_JsonSchema::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.name)
}
inline std::string* GetIdSchemasResponse_JsonSchema::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdSchemasResponse_JsonSchema::release_name() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdSchemasResponse_JsonSchema::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.name)
}

// .google.protobuf.Struct content = 3[json_name = "content"];
inline bool GetIdSchemasResponse_JsonSchema::_internal_has_content() const {
  return this != internal_default_instance() && content_ != nullptr;
}
inline bool GetIdSchemasResponse_JsonSchema::has_content() const {
  return _internal_has_content();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& GetIdSchemasResponse_JsonSchema::_internal_content() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = content_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& GetIdSchemasResponse_JsonSchema::content() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.content)
  return _internal_content();
}
inline void GetIdSchemasResponse_JsonSchema::unsafe_arena_set_allocated_content(
    PROTOBUF_NAMESPACE_ID::Struct* content) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.content)
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetIdSchemasResponse_JsonSchema::release_content() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = content_;
  content_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetIdSchemasResponse_JsonSchema::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.content)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = content_;
  content_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetIdSchemasResponse_JsonSchema::_internal_mutable_content() {
  
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    content_ = p;
  }
  return content_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetIdSchemasResponse_JsonSchema::mutable_content() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.content)
  return _internal_mutable_content();
}
inline void GetIdSchemasResponse_JsonSchema::set_allocated_content(PROTOBUF_NAMESPACE_ID::Struct* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content)->GetArena();
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.content)
}

// .google.protobuf.Timestamp created_at = 4[json_name = "createdAt"];
inline bool GetIdSchemasResponse_JsonSchema::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetIdSchemasResponse_JsonSchema::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdSchemasResponse_JsonSchema::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdSchemasResponse_JsonSchema::created_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.created_at)
  return _internal_created_at();
}
inline void GetIdSchemasResponse_JsonSchema::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemasResponse_JsonSchema::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemasResponse_JsonSchema::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemasResponse_JsonSchema::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemasResponse_JsonSchema::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.created_at)
  return _internal_mutable_created_at();
}
inline void GetIdSchemasResponse_JsonSchema::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.created_at)
}

// .google.protobuf.Timestamp updated_at = 5[json_name = "updatedAt"];
inline bool GetIdSchemasResponse_JsonSchema::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool GetIdSchemasResponse_JsonSchema::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdSchemasResponse_JsonSchema::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdSchemasResponse_JsonSchema::updated_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.updated_at)
  return _internal_updated_at();
}
inline void GetIdSchemasResponse_JsonSchema::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemasResponse_JsonSchema::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemasResponse_JsonSchema::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemasResponse_JsonSchema::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemasResponse_JsonSchema::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.updated_at)
  return _internal_mutable_updated_at();
}
inline void GetIdSchemasResponse_JsonSchema::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.updated_at)
}

// bool is_default = 6[json_name = "isDefault"];
inline void GetIdSchemasResponse_JsonSchema::clear_is_default() {
  is_default_ = false;
}
inline bool GetIdSchemasResponse_JsonSchema::_internal_is_default() const {
  return is_default_;
}
inline bool GetIdSchemasResponse_JsonSchema::is_default() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.is_default)
  return _internal_is_default();
}
inline void GetIdSchemasResponse_JsonSchema::_internal_set_is_default(bool value) {
  
  is_default_ = value;
}
inline void GetIdSchemasResponse_JsonSchema::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema.is_default)
}

// -------------------------------------------------------------------

// GetIdSchemasResponse

// repeated .depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.JsonSchema jsonschemas = 1[json_name = "jsonschemas"];
inline int GetIdSchemasResponse::_internal_jsonschemas_size() const {
  return jsonschemas_.size();
}
inline int GetIdSchemasResponse::jsonschemas_size() const {
  return _internal_jsonschemas_size();
}
inline void GetIdSchemasResponse::clear_jsonschemas() {
  jsonschemas_.Clear();
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema* GetIdSchemasResponse::mutable_jsonschemas(int index) {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.jsonschemas)
  return jsonschemas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema >*
GetIdSchemasResponse::mutable_jsonschemas() {
  // @@protoc_insertion_point(field_mutable_list:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.jsonschemas)
  return &jsonschemas_;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema& GetIdSchemasResponse::_internal_jsonschemas(int index) const {
  return jsonschemas_.Get(index);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema& GetIdSchemasResponse::jsonschemas(int index) const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.jsonschemas)
  return _internal_jsonschemas(index);
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema* GetIdSchemasResponse::_internal_add_jsonschemas() {
  return jsonschemas_.Add();
}
inline ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema* GetIdSchemasResponse::add_jsonschemas() {
  // @@protoc_insertion_point(field_add:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.jsonschemas)
  return _internal_add_jsonschemas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::depot::devtools::auth::v0::identity::admin::GetIdSchemasResponse_JsonSchema >&
GetIdSchemasResponse::jsonschemas() const {
  // @@protoc_insertion_point(field_list:depot.devtools.auth.v0.identity.admin.GetIdSchemasResponse.jsonschemas)
  return jsonschemas_;
}

// -------------------------------------------------------------------

// GetIdSchemaRequest

// string id = 1[json_name = "id"];
inline void GetIdSchemaRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdSchemaRequest::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemaRequest.id)
  return _internal_id();
}
inline void GetIdSchemaRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdSchemaRequest.id)
}
inline std::string* GetIdSchemaRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdSchemaRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetIdSchemaRequest::_internal_id() const {
  return id_.Get();
}
inline void GetIdSchemaRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdSchemaRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdSchemaRequest.id)
}
inline void GetIdSchemaRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdSchemaRequest.id)
}
inline void GetIdSchemaRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdSchemaRequest.id)
}
inline std::string* GetIdSchemaRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdSchemaRequest::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdSchemaRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdSchemaRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemaRequest.id)
}

// -------------------------------------------------------------------

// GetIdSchemaResponse

// string id = 1[json_name = "id"];
inline void GetIdSchemaResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdSchemaResponse::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.id)
  return _internal_id();
}
inline void GetIdSchemaResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.id)
}
inline std::string* GetIdSchemaResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.id)
  return _internal_mutable_id();
}
inline const std::string& GetIdSchemaResponse::_internal_id() const {
  return id_.Get();
}
inline void GetIdSchemaResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdSchemaResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.id)
}
inline void GetIdSchemaResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.id)
}
inline void GetIdSchemaResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.id)
}
inline std::string* GetIdSchemaResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdSchemaResponse::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdSchemaResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.id)
}

// string name = 2[json_name = "name"];
inline void GetIdSchemaResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIdSchemaResponse::name() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.name)
  return _internal_name();
}
inline void GetIdSchemaResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.name)
}
inline std::string* GetIdSchemaResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.name)
  return _internal_mutable_name();
}
inline const std::string& GetIdSchemaResponse::_internal_name() const {
  return name_.Get();
}
inline void GetIdSchemaResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIdSchemaResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.name)
}
inline void GetIdSchemaResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.name)
}
inline void GetIdSchemaResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.name)
}
inline std::string* GetIdSchemaResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIdSchemaResponse::release_name() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIdSchemaResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.name)
}

// .google.protobuf.Struct content = 3[json_name = "content"];
inline bool GetIdSchemaResponse::_internal_has_content() const {
  return this != internal_default_instance() && content_ != nullptr;
}
inline bool GetIdSchemaResponse::has_content() const {
  return _internal_has_content();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& GetIdSchemaResponse::_internal_content() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = content_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& GetIdSchemaResponse::content() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.content)
  return _internal_content();
}
inline void GetIdSchemaResponse::unsafe_arena_set_allocated_content(
    PROTOBUF_NAMESPACE_ID::Struct* content) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.content)
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetIdSchemaResponse::release_content() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = content_;
  content_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetIdSchemaResponse::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.content)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = content_;
  content_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetIdSchemaResponse::_internal_mutable_content() {
  
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    content_ = p;
  }
  return content_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetIdSchemaResponse::mutable_content() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.content)
  return _internal_mutable_content();
}
inline void GetIdSchemaResponse::set_allocated_content(PROTOBUF_NAMESPACE_ID::Struct* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content)->GetArena();
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.content)
}

// .google.protobuf.Timestamp created_at = 4[json_name = "createdAt"];
inline bool GetIdSchemaResponse::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetIdSchemaResponse::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdSchemaResponse::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdSchemaResponse::created_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.created_at)
  return _internal_created_at();
}
inline void GetIdSchemaResponse::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemaResponse::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemaResponse::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemaResponse::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemaResponse::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.created_at)
  return _internal_mutable_created_at();
}
inline void GetIdSchemaResponse::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.created_at)
}

// .google.protobuf.Timestamp updated_at = 5[json_name = "updatedAt"];
inline bool GetIdSchemaResponse::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool GetIdSchemaResponse::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdSchemaResponse::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetIdSchemaResponse::updated_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.updated_at)
  return _internal_updated_at();
}
inline void GetIdSchemaResponse::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemaResponse::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemaResponse::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemaResponse::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetIdSchemaResponse::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.updated_at)
  return _internal_mutable_updated_at();
}
inline void GetIdSchemaResponse::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.updated_at)
}

// bool is_default = 6[json_name = "isDefault"];
inline void GetIdSchemaResponse::clear_is_default() {
  is_default_ = false;
}
inline bool GetIdSchemaResponse::_internal_is_default() const {
  return is_default_;
}
inline bool GetIdSchemaResponse::is_default() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.is_default)
  return _internal_is_default();
}
inline void GetIdSchemaResponse::_internal_set_is_default(bool value) {
  
  is_default_ = value;
}
inline void GetIdSchemaResponse::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetIdSchemaResponse.is_default)
}

// -------------------------------------------------------------------

// GetDefaultIdSchemaRequest

// -------------------------------------------------------------------

// GetDefaultIdSchemaResponse

// string id = 1[json_name = "id"];
inline void GetDefaultIdSchemaResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDefaultIdSchemaResponse::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.id)
  return _internal_id();
}
inline void GetDefaultIdSchemaResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.id)
}
inline std::string* GetDefaultIdSchemaResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.id)
  return _internal_mutable_id();
}
inline const std::string& GetDefaultIdSchemaResponse::_internal_id() const {
  return id_.Get();
}
inline void GetDefaultIdSchemaResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDefaultIdSchemaResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.id)
}
inline void GetDefaultIdSchemaResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.id)
}
inline void GetDefaultIdSchemaResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.id)
}
inline std::string* GetDefaultIdSchemaResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDefaultIdSchemaResponse::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDefaultIdSchemaResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.id)
}

// string name = 2[json_name = "name"];
inline void GetDefaultIdSchemaResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDefaultIdSchemaResponse::name() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.name)
  return _internal_name();
}
inline void GetDefaultIdSchemaResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.name)
}
inline std::string* GetDefaultIdSchemaResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.name)
  return _internal_mutable_name();
}
inline const std::string& GetDefaultIdSchemaResponse::_internal_name() const {
  return name_.Get();
}
inline void GetDefaultIdSchemaResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDefaultIdSchemaResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.name)
}
inline void GetDefaultIdSchemaResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.name)
}
inline void GetDefaultIdSchemaResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.name)
}
inline std::string* GetDefaultIdSchemaResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDefaultIdSchemaResponse::release_name() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDefaultIdSchemaResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.name)
}

// .google.protobuf.Struct content = 3[json_name = "content"];
inline bool GetDefaultIdSchemaResponse::_internal_has_content() const {
  return this != internal_default_instance() && content_ != nullptr;
}
inline bool GetDefaultIdSchemaResponse::has_content() const {
  return _internal_has_content();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& GetDefaultIdSchemaResponse::_internal_content() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = content_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& GetDefaultIdSchemaResponse::content() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.content)
  return _internal_content();
}
inline void GetDefaultIdSchemaResponse::unsafe_arena_set_allocated_content(
    PROTOBUF_NAMESPACE_ID::Struct* content) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.content)
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetDefaultIdSchemaResponse::release_content() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = content_;
  content_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetDefaultIdSchemaResponse::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.content)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = content_;
  content_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetDefaultIdSchemaResponse::_internal_mutable_content() {
  
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    content_ = p;
  }
  return content_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GetDefaultIdSchemaResponse::mutable_content() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.content)
  return _internal_mutable_content();
}
inline void GetDefaultIdSchemaResponse::set_allocated_content(PROTOBUF_NAMESPACE_ID::Struct* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content)->GetArena();
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.content)
}

// .google.protobuf.Timestamp created_at = 4[json_name = "createdAt"];
inline bool GetDefaultIdSchemaResponse::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetDefaultIdSchemaResponse::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDefaultIdSchemaResponse::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDefaultIdSchemaResponse::created_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.created_at)
  return _internal_created_at();
}
inline void GetDefaultIdSchemaResponse::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDefaultIdSchemaResponse::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDefaultIdSchemaResponse::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDefaultIdSchemaResponse::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDefaultIdSchemaResponse::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.created_at)
  return _internal_mutable_created_at();
}
inline void GetDefaultIdSchemaResponse::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.created_at)
}

// .google.protobuf.Timestamp updated_at = 5[json_name = "updatedAt"];
inline bool GetDefaultIdSchemaResponse::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool GetDefaultIdSchemaResponse::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDefaultIdSchemaResponse::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDefaultIdSchemaResponse::updated_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.updated_at)
  return _internal_updated_at();
}
inline void GetDefaultIdSchemaResponse::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDefaultIdSchemaResponse::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDefaultIdSchemaResponse::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDefaultIdSchemaResponse::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDefaultIdSchemaResponse::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.updated_at)
  return _internal_mutable_updated_at();
}
inline void GetDefaultIdSchemaResponse::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.updated_at)
}

// bool is_default = 6[json_name = "isDefault"];
inline void GetDefaultIdSchemaResponse::clear_is_default() {
  is_default_ = false;
}
inline bool GetDefaultIdSchemaResponse::_internal_is_default() const {
  return is_default_;
}
inline bool GetDefaultIdSchemaResponse::is_default() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.is_default)
  return _internal_is_default();
}
inline void GetDefaultIdSchemaResponse::_internal_set_is_default(bool value) {
  
  is_default_ = value;
}
inline void GetDefaultIdSchemaResponse::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetDefaultIdSchemaResponse.is_default)
}

// -------------------------------------------------------------------

// UpdateIdSchemaRequest

// string id = 1[json_name = "id"];
inline void UpdateIdSchemaRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateIdSchemaRequest::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.id)
  return _internal_id();
}
inline void UpdateIdSchemaRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.id)
}
inline std::string* UpdateIdSchemaRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.id)
  return _internal_mutable_id();
}
inline const std::string& UpdateIdSchemaRequest::_internal_id() const {
  return id_.Get();
}
inline void UpdateIdSchemaRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateIdSchemaRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.id)
}
inline void UpdateIdSchemaRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.id)
}
inline void UpdateIdSchemaRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.id)
}
inline std::string* UpdateIdSchemaRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateIdSchemaRequest::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateIdSchemaRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.id)
}

// string name = 2[json_name = "name"];
inline void UpdateIdSchemaRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateIdSchemaRequest::name() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.name)
  return _internal_name();
}
inline void UpdateIdSchemaRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.name)
}
inline std::string* UpdateIdSchemaRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateIdSchemaRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateIdSchemaRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateIdSchemaRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.name)
}
inline void UpdateIdSchemaRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.name)
}
inline void UpdateIdSchemaRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.name)
}
inline std::string* UpdateIdSchemaRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateIdSchemaRequest::release_name() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateIdSchemaRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.name)
}

// .google.protobuf.Struct content = 3[json_name = "content"];
inline bool UpdateIdSchemaRequest::_internal_has_content() const {
  return this != internal_default_instance() && content_ != nullptr;
}
inline bool UpdateIdSchemaRequest::has_content() const {
  return _internal_has_content();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& UpdateIdSchemaRequest::_internal_content() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = content_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& UpdateIdSchemaRequest::content() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.content)
  return _internal_content();
}
inline void UpdateIdSchemaRequest::unsafe_arena_set_allocated_content(
    PROTOBUF_NAMESPACE_ID::Struct* content) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.content)
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateIdSchemaRequest::release_content() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = content_;
  content_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateIdSchemaRequest::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.content)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = content_;
  content_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateIdSchemaRequest::_internal_mutable_content() {
  
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    content_ = p;
  }
  return content_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UpdateIdSchemaRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.content)
  return _internal_mutable_content();
}
inline void UpdateIdSchemaRequest::set_allocated_content(PROTOBUF_NAMESPACE_ID::Struct* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content)->GetArena();
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateIdSchemaRequest.content)
}

// -------------------------------------------------------------------

// UpdateIdSchemaResponse

// -------------------------------------------------------------------

// MarkDefaultIdSchemaRequest

// string id = 1[json_name = "id"];
inline void MarkDefaultIdSchemaRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarkDefaultIdSchemaRequest::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaRequest.id)
  return _internal_id();
}
inline void MarkDefaultIdSchemaRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaRequest.id)
}
inline std::string* MarkDefaultIdSchemaRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaRequest.id)
  return _internal_mutable_id();
}
inline const std::string& MarkDefaultIdSchemaRequest::_internal_id() const {
  return id_.Get();
}
inline void MarkDefaultIdSchemaRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarkDefaultIdSchemaRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaRequest.id)
}
inline void MarkDefaultIdSchemaRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaRequest.id)
}
inline void MarkDefaultIdSchemaRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaRequest.id)
}
inline std::string* MarkDefaultIdSchemaRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarkDefaultIdSchemaRequest::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarkDefaultIdSchemaRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.MarkDefaultIdSchemaRequest.id)
}

// -------------------------------------------------------------------

// MarkDefaultIdSchemaResponse

// -------------------------------------------------------------------

// DeleteIdSchemaRequest

// string id = 1[json_name = "id"];
inline void DeleteIdSchemaRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteIdSchemaRequest::id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.DeleteIdSchemaRequest.id)
  return _internal_id();
}
inline void DeleteIdSchemaRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.DeleteIdSchemaRequest.id)
}
inline std::string* DeleteIdSchemaRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.DeleteIdSchemaRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteIdSchemaRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteIdSchemaRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteIdSchemaRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.DeleteIdSchemaRequest.id)
}
inline void DeleteIdSchemaRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.DeleteIdSchemaRequest.id)
}
inline void DeleteIdSchemaRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.DeleteIdSchemaRequest.id)
}
inline std::string* DeleteIdSchemaRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteIdSchemaRequest::release_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.DeleteIdSchemaRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteIdSchemaRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.DeleteIdSchemaRequest.id)
}

// -------------------------------------------------------------------

// DeleteIdSchemaResponse

// -------------------------------------------------------------------

// GetEmailsSetupRequest

// -------------------------------------------------------------------

// GetEmailsSetupResponse_EmailTemplate

// string content = 3[json_name = "content"];
inline void GetEmailsSetupResponse_EmailTemplate::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEmailsSetupResponse_EmailTemplate::content() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.content)
  return _internal_content();
}
inline void GetEmailsSetupResponse_EmailTemplate::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.content)
}
inline std::string* GetEmailsSetupResponse_EmailTemplate::mutable_content() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.content)
  return _internal_mutable_content();
}
inline const std::string& GetEmailsSetupResponse_EmailTemplate::_internal_content() const {
  return content_.Get();
}
inline void GetEmailsSetupResponse_EmailTemplate::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEmailsSetupResponse_EmailTemplate::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.content)
}
inline void GetEmailsSetupResponse_EmailTemplate::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.content)
}
inline void GetEmailsSetupResponse_EmailTemplate::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.content)
}
inline std::string* GetEmailsSetupResponse_EmailTemplate::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEmailsSetupResponse_EmailTemplate::release_content() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEmailsSetupResponse_EmailTemplate::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.content)
}

// string subject = 4[json_name = "subject"];
inline void GetEmailsSetupResponse_EmailTemplate::clear_subject() {
  subject_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEmailsSetupResponse_EmailTemplate::subject() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.subject)
  return _internal_subject();
}
inline void GetEmailsSetupResponse_EmailTemplate::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.subject)
}
inline std::string* GetEmailsSetupResponse_EmailTemplate::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.subject)
  return _internal_mutable_subject();
}
inline const std::string& GetEmailsSetupResponse_EmailTemplate::_internal_subject() const {
  return subject_.Get();
}
inline void GetEmailsSetupResponse_EmailTemplate::_internal_set_subject(const std::string& value) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEmailsSetupResponse_EmailTemplate::set_subject(std::string&& value) {
  
  subject_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.subject)
}
inline void GetEmailsSetupResponse_EmailTemplate::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.subject)
}
inline void GetEmailsSetupResponse_EmailTemplate::set_subject(const char* value,
    size_t size) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.subject)
}
inline std::string* GetEmailsSetupResponse_EmailTemplate::_internal_mutable_subject() {
  
  return subject_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEmailsSetupResponse_EmailTemplate::release_subject() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEmailsSetupResponse_EmailTemplate::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate.subject)
}

// -------------------------------------------------------------------

// GetEmailsSetupResponse_EmailSender

// string email_address = 1[json_name = "emailAddress"];
inline void GetEmailsSetupResponse_EmailSender::clear_email_address() {
  email_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEmailsSetupResponse_EmailSender::email_address() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.email_address)
  return _internal_email_address();
}
inline void GetEmailsSetupResponse_EmailSender::set_email_address(const std::string& value) {
  _internal_set_email_address(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.email_address)
}
inline std::string* GetEmailsSetupResponse_EmailSender::mutable_email_address() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.email_address)
  return _internal_mutable_email_address();
}
inline const std::string& GetEmailsSetupResponse_EmailSender::_internal_email_address() const {
  return email_address_.Get();
}
inline void GetEmailsSetupResponse_EmailSender::_internal_set_email_address(const std::string& value) {
  
  email_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEmailsSetupResponse_EmailSender::set_email_address(std::string&& value) {
  
  email_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.email_address)
}
inline void GetEmailsSetupResponse_EmailSender::set_email_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.email_address)
}
inline void GetEmailsSetupResponse_EmailSender::set_email_address(const char* value,
    size_t size) {
  
  email_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.email_address)
}
inline std::string* GetEmailsSetupResponse_EmailSender::_internal_mutable_email_address() {
  
  return email_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEmailsSetupResponse_EmailSender::release_email_address() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.email_address)
  return email_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEmailsSetupResponse_EmailSender::set_allocated_email_address(std::string* email_address) {
  if (email_address != nullptr) {
    
  } else {
    
  }
  email_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.email_address)
}

// string smtp_host = 2[json_name = "smtpHost"];
inline void GetEmailsSetupResponse_EmailSender::clear_smtp_host() {
  smtp_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEmailsSetupResponse_EmailSender::smtp_host() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_host)
  return _internal_smtp_host();
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_host(const std::string& value) {
  _internal_set_smtp_host(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_host)
}
inline std::string* GetEmailsSetupResponse_EmailSender::mutable_smtp_host() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_host)
  return _internal_mutable_smtp_host();
}
inline const std::string& GetEmailsSetupResponse_EmailSender::_internal_smtp_host() const {
  return smtp_host_.Get();
}
inline void GetEmailsSetupResponse_EmailSender::_internal_set_smtp_host(const std::string& value) {
  
  smtp_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_host(std::string&& value) {
  
  smtp_host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_host)
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  smtp_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_host)
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_host(const char* value,
    size_t size) {
  
  smtp_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_host)
}
inline std::string* GetEmailsSetupResponse_EmailSender::_internal_mutable_smtp_host() {
  
  return smtp_host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEmailsSetupResponse_EmailSender::release_smtp_host() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_host)
  return smtp_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEmailsSetupResponse_EmailSender::set_allocated_smtp_host(std::string* smtp_host) {
  if (smtp_host != nullptr) {
    
  } else {
    
  }
  smtp_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smtp_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_host)
}

// uint32 smtp_port = 3[json_name = "smtpPort"];
inline void GetEmailsSetupResponse_EmailSender::clear_smtp_port() {
  smtp_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEmailsSetupResponse_EmailSender::_internal_smtp_port() const {
  return smtp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEmailsSetupResponse_EmailSender::smtp_port() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_port)
  return _internal_smtp_port();
}
inline void GetEmailsSetupResponse_EmailSender::_internal_set_smtp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  smtp_port_ = value;
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_smtp_port(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_port)
}

// string smtp_username = 4[json_name = "smtpUsername"];
inline void GetEmailsSetupResponse_EmailSender::clear_smtp_username() {
  smtp_username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEmailsSetupResponse_EmailSender::smtp_username() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_username)
  return _internal_smtp_username();
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_username(const std::string& value) {
  _internal_set_smtp_username(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_username)
}
inline std::string* GetEmailsSetupResponse_EmailSender::mutable_smtp_username() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_username)
  return _internal_mutable_smtp_username();
}
inline const std::string& GetEmailsSetupResponse_EmailSender::_internal_smtp_username() const {
  return smtp_username_.Get();
}
inline void GetEmailsSetupResponse_EmailSender::_internal_set_smtp_username(const std::string& value) {
  
  smtp_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_username(std::string&& value) {
  
  smtp_username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_username)
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  smtp_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_username)
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_username(const char* value,
    size_t size) {
  
  smtp_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_username)
}
inline std::string* GetEmailsSetupResponse_EmailSender::_internal_mutable_smtp_username() {
  
  return smtp_username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEmailsSetupResponse_EmailSender::release_smtp_username() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_username)
  return smtp_username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEmailsSetupResponse_EmailSender::set_allocated_smtp_username(std::string* smtp_username) {
  if (smtp_username != nullptr) {
    
  } else {
    
  }
  smtp_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smtp_username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_username)
}

// string smtp_password = 5[json_name = "smtpPassword"];
inline void GetEmailsSetupResponse_EmailSender::clear_smtp_password() {
  smtp_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEmailsSetupResponse_EmailSender::smtp_password() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_password)
  return _internal_smtp_password();
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_password(const std::string& value) {
  _internal_set_smtp_password(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_password)
}
inline std::string* GetEmailsSetupResponse_EmailSender::mutable_smtp_password() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_password)
  return _internal_mutable_smtp_password();
}
inline const std::string& GetEmailsSetupResponse_EmailSender::_internal_smtp_password() const {
  return smtp_password_.Get();
}
inline void GetEmailsSetupResponse_EmailSender::_internal_set_smtp_password(const std::string& value) {
  
  smtp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_password(std::string&& value) {
  
  smtp_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_password)
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  smtp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_password)
}
inline void GetEmailsSetupResponse_EmailSender::set_smtp_password(const char* value,
    size_t size) {
  
  smtp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_password)
}
inline std::string* GetEmailsSetupResponse_EmailSender::_internal_mutable_smtp_password() {
  
  return smtp_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEmailsSetupResponse_EmailSender::release_smtp_password() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_password)
  return smtp_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEmailsSetupResponse_EmailSender::set_allocated_smtp_password(std::string* smtp_password) {
  if (smtp_password != nullptr) {
    
  } else {
    
  }
  smtp_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smtp_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender.smtp_password)
}

// -------------------------------------------------------------------

// GetEmailsSetupResponse

// .depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate welcome = 1[json_name = "welcome"];
inline bool GetEmailsSetupResponse::_internal_has_welcome() const {
  return this != internal_default_instance() && welcome_ != nullptr;
}
inline bool GetEmailsSetupResponse::has_welcome() const {
  return _internal_has_welcome();
}
inline void GetEmailsSetupResponse::clear_welcome() {
  if (GetArena() == nullptr && welcome_ != nullptr) {
    delete welcome_;
  }
  welcome_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& GetEmailsSetupResponse::_internal_welcome() const {
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* p = welcome_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate*>(
      &::depot::devtools::auth::v0::identity::admin::_GetEmailsSetupResponse_EmailTemplate_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& GetEmailsSetupResponse::welcome() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.welcome)
  return _internal_welcome();
}
inline void GetEmailsSetupResponse::unsafe_arena_set_allocated_welcome(
    ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* welcome) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(welcome_);
  }
  welcome_ = welcome;
  if (welcome) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.welcome)
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::release_welcome() {
  
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* temp = welcome_;
  welcome_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::unsafe_arena_release_welcome() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.welcome)
  
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* temp = welcome_;
  welcome_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::_internal_mutable_welcome() {
  
  if (welcome_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate>(GetArena());
    welcome_ = p;
  }
  return welcome_;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::mutable_welcome() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.welcome)
  return _internal_mutable_welcome();
}
inline void GetEmailsSetupResponse::set_allocated_welcome(::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* welcome) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete welcome_;
  }
  if (welcome) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(welcome);
    if (message_arena != submessage_arena) {
      welcome = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, welcome, submessage_arena);
    }
    
  } else {
    
  }
  welcome_ = welcome;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.welcome)
}

// .depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate account_verification = 2[json_name = "accountVerification"];
inline bool GetEmailsSetupResponse::_internal_has_account_verification() const {
  return this != internal_default_instance() && account_verification_ != nullptr;
}
inline bool GetEmailsSetupResponse::has_account_verification() const {
  return _internal_has_account_verification();
}
inline void GetEmailsSetupResponse::clear_account_verification() {
  if (GetArena() == nullptr && account_verification_ != nullptr) {
    delete account_verification_;
  }
  account_verification_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& GetEmailsSetupResponse::_internal_account_verification() const {
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* p = account_verification_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate*>(
      &::depot::devtools::auth::v0::identity::admin::_GetEmailsSetupResponse_EmailTemplate_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& GetEmailsSetupResponse::account_verification() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_verification)
  return _internal_account_verification();
}
inline void GetEmailsSetupResponse::unsafe_arena_set_allocated_account_verification(
    ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_verification) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_verification_);
  }
  account_verification_ = account_verification;
  if (account_verification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_verification)
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::release_account_verification() {
  
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* temp = account_verification_;
  account_verification_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::unsafe_arena_release_account_verification() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_verification)
  
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* temp = account_verification_;
  account_verification_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::_internal_mutable_account_verification() {
  
  if (account_verification_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate>(GetArena());
    account_verification_ = p;
  }
  return account_verification_;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::mutable_account_verification() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_verification)
  return _internal_mutable_account_verification();
}
inline void GetEmailsSetupResponse::set_allocated_account_verification(::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_verification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_verification_;
  }
  if (account_verification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account_verification);
    if (message_arena != submessage_arena) {
      account_verification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_verification, submessage_arena);
    }
    
  } else {
    
  }
  account_verification_ = account_verification;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_verification)
}

// .depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate account_recovery = 3[json_name = "accountRecovery"];
inline bool GetEmailsSetupResponse::_internal_has_account_recovery() const {
  return this != internal_default_instance() && account_recovery_ != nullptr;
}
inline bool GetEmailsSetupResponse::has_account_recovery() const {
  return _internal_has_account_recovery();
}
inline void GetEmailsSetupResponse::clear_account_recovery() {
  if (GetArena() == nullptr && account_recovery_ != nullptr) {
    delete account_recovery_;
  }
  account_recovery_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& GetEmailsSetupResponse::_internal_account_recovery() const {
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* p = account_recovery_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate*>(
      &::depot::devtools::auth::v0::identity::admin::_GetEmailsSetupResponse_EmailTemplate_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& GetEmailsSetupResponse::account_recovery() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_recovery)
  return _internal_account_recovery();
}
inline void GetEmailsSetupResponse::unsafe_arena_set_allocated_account_recovery(
    ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_recovery) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_recovery_);
  }
  account_recovery_ = account_recovery;
  if (account_recovery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_recovery)
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::release_account_recovery() {
  
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* temp = account_recovery_;
  account_recovery_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::unsafe_arena_release_account_recovery() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_recovery)
  
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* temp = account_recovery_;
  account_recovery_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::_internal_mutable_account_recovery() {
  
  if (account_recovery_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate>(GetArena());
    account_recovery_ = p;
  }
  return account_recovery_;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::mutable_account_recovery() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_recovery)
  return _internal_mutable_account_recovery();
}
inline void GetEmailsSetupResponse::set_allocated_account_recovery(::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_recovery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_recovery_;
  }
  if (account_recovery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account_recovery);
    if (message_arena != submessage_arena) {
      account_recovery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_recovery, submessage_arena);
    }
    
  } else {
    
  }
  account_recovery_ = account_recovery;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_recovery)
}

// .depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate account_recovered = 4[json_name = "accountRecovered"];
inline bool GetEmailsSetupResponse::_internal_has_account_recovered() const {
  return this != internal_default_instance() && account_recovered_ != nullptr;
}
inline bool GetEmailsSetupResponse::has_account_recovered() const {
  return _internal_has_account_recovered();
}
inline void GetEmailsSetupResponse::clear_account_recovered() {
  if (GetArena() == nullptr && account_recovered_ != nullptr) {
    delete account_recovered_;
  }
  account_recovered_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& GetEmailsSetupResponse::_internal_account_recovered() const {
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* p = account_recovered_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate*>(
      &::depot::devtools::auth::v0::identity::admin::_GetEmailsSetupResponse_EmailTemplate_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& GetEmailsSetupResponse::account_recovered() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_recovered)
  return _internal_account_recovered();
}
inline void GetEmailsSetupResponse::unsafe_arena_set_allocated_account_recovered(
    ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_recovered) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_recovered_);
  }
  account_recovered_ = account_recovered;
  if (account_recovered) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_recovered)
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::release_account_recovered() {
  
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* temp = account_recovered_;
  account_recovered_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::unsafe_arena_release_account_recovered() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_recovered)
  
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* temp = account_recovered_;
  account_recovered_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::_internal_mutable_account_recovered() {
  
  if (account_recovered_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate>(GetArena());
    account_recovered_ = p;
  }
  return account_recovered_;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::mutable_account_recovered() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_recovered)
  return _internal_mutable_account_recovered();
}
inline void GetEmailsSetupResponse::set_allocated_account_recovered(::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* account_recovered) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_recovered_;
  }
  if (account_recovered) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account_recovered);
    if (message_arena != submessage_arena) {
      account_recovered = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_recovered, submessage_arena);
    }
    
  } else {
    
  }
  account_recovered_ = account_recovered;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.account_recovered)
}

// .depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailTemplate otp = 5[json_name = "otp"];
inline bool GetEmailsSetupResponse::_internal_has_otp() const {
  return this != internal_default_instance() && otp_ != nullptr;
}
inline bool GetEmailsSetupResponse::has_otp() const {
  return _internal_has_otp();
}
inline void GetEmailsSetupResponse::clear_otp() {
  if (GetArena() == nullptr && otp_ != nullptr) {
    delete otp_;
  }
  otp_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& GetEmailsSetupResponse::_internal_otp() const {
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* p = otp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate*>(
      &::depot::devtools::auth::v0::identity::admin::_GetEmailsSetupResponse_EmailTemplate_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate& GetEmailsSetupResponse::otp() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.otp)
  return _internal_otp();
}
inline void GetEmailsSetupResponse::unsafe_arena_set_allocated_otp(
    ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* otp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(otp_);
  }
  otp_ = otp;
  if (otp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.otp)
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::release_otp() {
  
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* temp = otp_;
  otp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::unsafe_arena_release_otp() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.otp)
  
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* temp = otp_;
  otp_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::_internal_mutable_otp() {
  
  if (otp_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate>(GetArena());
    otp_ = p;
  }
  return otp_;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* GetEmailsSetupResponse::mutable_otp() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.otp)
  return _internal_mutable_otp();
}
inline void GetEmailsSetupResponse::set_allocated_otp(::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailTemplate* otp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete otp_;
  }
  if (otp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(otp);
    if (message_arena != submessage_arena) {
      otp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, otp, submessage_arena);
    }
    
  } else {
    
  }
  otp_ = otp;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.otp)
}

// .depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.EmailSender smtp = 6[json_name = "smtp"];
inline bool GetEmailsSetupResponse::_internal_has_smtp() const {
  return this != internal_default_instance() && smtp_ != nullptr;
}
inline bool GetEmailsSetupResponse::has_smtp() const {
  return _internal_has_smtp();
}
inline void GetEmailsSetupResponse::clear_smtp() {
  if (GetArena() == nullptr && smtp_ != nullptr) {
    delete smtp_;
  }
  smtp_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender& GetEmailsSetupResponse::_internal_smtp() const {
  const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* p = smtp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender*>(
      &::depot::devtools::auth::v0::identity::admin::_GetEmailsSetupResponse_EmailSender_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender& GetEmailsSetupResponse::smtp() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.smtp)
  return _internal_smtp();
}
inline void GetEmailsSetupResponse::unsafe_arena_set_allocated_smtp(
    ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* smtp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smtp_);
  }
  smtp_ = smtp;
  if (smtp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.smtp)
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* GetEmailsSetupResponse::release_smtp() {
  
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* temp = smtp_;
  smtp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* GetEmailsSetupResponse::unsafe_arena_release_smtp() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.smtp)
  
  ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* temp = smtp_;
  smtp_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* GetEmailsSetupResponse::_internal_mutable_smtp() {
  
  if (smtp_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender>(GetArena());
    smtp_ = p;
  }
  return smtp_;
}
inline ::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* GetEmailsSetupResponse::mutable_smtp() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.smtp)
  return _internal_mutable_smtp();
}
inline void GetEmailsSetupResponse::set_allocated_smtp(::depot::devtools::auth::v0::identity::admin::GetEmailsSetupResponse_EmailSender* smtp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete smtp_;
  }
  if (smtp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(smtp);
    if (message_arena != submessage_arena) {
      smtp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smtp, submessage_arena);
    }
    
  } else {
    
  }
  smtp_ = smtp;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.smtp)
}

// string project_id = 7[json_name = "projectId"];
inline void GetEmailsSetupResponse::clear_project_id() {
  project_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEmailsSetupResponse::project_id() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.project_id)
  return _internal_project_id();
}
inline void GetEmailsSetupResponse::set_project_id(const std::string& value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.project_id)
}
inline std::string* GetEmailsSetupResponse::mutable_project_id() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.project_id)
  return _internal_mutable_project_id();
}
inline const std::string& GetEmailsSetupResponse::_internal_project_id() const {
  return project_id_.Get();
}
inline void GetEmailsSetupResponse::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEmailsSetupResponse::set_project_id(std::string&& value) {
  
  project_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.project_id)
}
inline void GetEmailsSetupResponse::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.project_id)
}
inline void GetEmailsSetupResponse::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.project_id)
}
inline std::string* GetEmailsSetupResponse::_internal_mutable_project_id() {
  
  return project_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEmailsSetupResponse::release_project_id() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEmailsSetupResponse::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetEmailsSetupResponse.project_id)
}

// -------------------------------------------------------------------

// UpdateEmailsSetupRequest_EmailTemplate

// string content = 1[json_name = "content"];
inline void UpdateEmailsSetupRequest_EmailTemplate::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateEmailsSetupRequest_EmailTemplate::content() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.content)
  return _internal_content();
}
inline void UpdateEmailsSetupRequest_EmailTemplate::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.content)
}
inline std::string* UpdateEmailsSetupRequest_EmailTemplate::mutable_content() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.content)
  return _internal_mutable_content();
}
inline const std::string& UpdateEmailsSetupRequest_EmailTemplate::_internal_content() const {
  return content_.Get();
}
inline void UpdateEmailsSetupRequest_EmailTemplate::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateEmailsSetupRequest_EmailTemplate::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.content)
}
inline void UpdateEmailsSetupRequest_EmailTemplate::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.content)
}
inline void UpdateEmailsSetupRequest_EmailTemplate::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.content)
}
inline std::string* UpdateEmailsSetupRequest_EmailTemplate::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateEmailsSetupRequest_EmailTemplate::release_content() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEmailsSetupRequest_EmailTemplate::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.content)
}

// string subject = 2[json_name = "subject"];
inline void UpdateEmailsSetupRequest_EmailTemplate::clear_subject() {
  subject_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateEmailsSetupRequest_EmailTemplate::subject() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.subject)
  return _internal_subject();
}
inline void UpdateEmailsSetupRequest_EmailTemplate::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.subject)
}
inline std::string* UpdateEmailsSetupRequest_EmailTemplate::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.subject)
  return _internal_mutable_subject();
}
inline const std::string& UpdateEmailsSetupRequest_EmailTemplate::_internal_subject() const {
  return subject_.Get();
}
inline void UpdateEmailsSetupRequest_EmailTemplate::_internal_set_subject(const std::string& value) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateEmailsSetupRequest_EmailTemplate::set_subject(std::string&& value) {
  
  subject_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.subject)
}
inline void UpdateEmailsSetupRequest_EmailTemplate::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.subject)
}
inline void UpdateEmailsSetupRequest_EmailTemplate::set_subject(const char* value,
    size_t size) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.subject)
}
inline std::string* UpdateEmailsSetupRequest_EmailTemplate::_internal_mutable_subject() {
  
  return subject_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateEmailsSetupRequest_EmailTemplate::release_subject() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEmailsSetupRequest_EmailTemplate::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate.subject)
}

// -------------------------------------------------------------------

// UpdateEmailsSetupRequest_EmailSender

// string email_address = 1[json_name = "emailAddress"];
inline void UpdateEmailsSetupRequest_EmailSender::clear_email_address() {
  email_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateEmailsSetupRequest_EmailSender::email_address() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.email_address)
  return _internal_email_address();
}
inline void UpdateEmailsSetupRequest_EmailSender::set_email_address(const std::string& value) {
  _internal_set_email_address(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.email_address)
}
inline std::string* UpdateEmailsSetupRequest_EmailSender::mutable_email_address() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.email_address)
  return _internal_mutable_email_address();
}
inline const std::string& UpdateEmailsSetupRequest_EmailSender::_internal_email_address() const {
  return email_address_.Get();
}
inline void UpdateEmailsSetupRequest_EmailSender::_internal_set_email_address(const std::string& value) {
  
  email_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateEmailsSetupRequest_EmailSender::set_email_address(std::string&& value) {
  
  email_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.email_address)
}
inline void UpdateEmailsSetupRequest_EmailSender::set_email_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.email_address)
}
inline void UpdateEmailsSetupRequest_EmailSender::set_email_address(const char* value,
    size_t size) {
  
  email_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.email_address)
}
inline std::string* UpdateEmailsSetupRequest_EmailSender::_internal_mutable_email_address() {
  
  return email_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateEmailsSetupRequest_EmailSender::release_email_address() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.email_address)
  return email_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEmailsSetupRequest_EmailSender::set_allocated_email_address(std::string* email_address) {
  if (email_address != nullptr) {
    
  } else {
    
  }
  email_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.email_address)
}

// string smtp_host = 2[json_name = "smtpHost"];
inline void UpdateEmailsSetupRequest_EmailSender::clear_smtp_host() {
  smtp_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateEmailsSetupRequest_EmailSender::smtp_host() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_host)
  return _internal_smtp_host();
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_host(const std::string& value) {
  _internal_set_smtp_host(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_host)
}
inline std::string* UpdateEmailsSetupRequest_EmailSender::mutable_smtp_host() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_host)
  return _internal_mutable_smtp_host();
}
inline const std::string& UpdateEmailsSetupRequest_EmailSender::_internal_smtp_host() const {
  return smtp_host_.Get();
}
inline void UpdateEmailsSetupRequest_EmailSender::_internal_set_smtp_host(const std::string& value) {
  
  smtp_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_host(std::string&& value) {
  
  smtp_host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_host)
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  smtp_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_host)
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_host(const char* value,
    size_t size) {
  
  smtp_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_host)
}
inline std::string* UpdateEmailsSetupRequest_EmailSender::_internal_mutable_smtp_host() {
  
  return smtp_host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateEmailsSetupRequest_EmailSender::release_smtp_host() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_host)
  return smtp_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEmailsSetupRequest_EmailSender::set_allocated_smtp_host(std::string* smtp_host) {
  if (smtp_host != nullptr) {
    
  } else {
    
  }
  smtp_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smtp_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_host)
}

// uint32 smtp_port = 3[json_name = "smtpPort"];
inline void UpdateEmailsSetupRequest_EmailSender::clear_smtp_port() {
  smtp_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateEmailsSetupRequest_EmailSender::_internal_smtp_port() const {
  return smtp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateEmailsSetupRequest_EmailSender::smtp_port() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_port)
  return _internal_smtp_port();
}
inline void UpdateEmailsSetupRequest_EmailSender::_internal_set_smtp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  smtp_port_ = value;
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_smtp_port(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_port)
}

// string smtp_username = 4[json_name = "smtpUsername"];
inline void UpdateEmailsSetupRequest_EmailSender::clear_smtp_username() {
  smtp_username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateEmailsSetupRequest_EmailSender::smtp_username() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_username)
  return _internal_smtp_username();
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_username(const std::string& value) {
  _internal_set_smtp_username(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_username)
}
inline std::string* UpdateEmailsSetupRequest_EmailSender::mutable_smtp_username() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_username)
  return _internal_mutable_smtp_username();
}
inline const std::string& UpdateEmailsSetupRequest_EmailSender::_internal_smtp_username() const {
  return smtp_username_.Get();
}
inline void UpdateEmailsSetupRequest_EmailSender::_internal_set_smtp_username(const std::string& value) {
  
  smtp_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_username(std::string&& value) {
  
  smtp_username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_username)
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  smtp_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_username)
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_username(const char* value,
    size_t size) {
  
  smtp_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_username)
}
inline std::string* UpdateEmailsSetupRequest_EmailSender::_internal_mutable_smtp_username() {
  
  return smtp_username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateEmailsSetupRequest_EmailSender::release_smtp_username() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_username)
  return smtp_username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEmailsSetupRequest_EmailSender::set_allocated_smtp_username(std::string* smtp_username) {
  if (smtp_username != nullptr) {
    
  } else {
    
  }
  smtp_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smtp_username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_username)
}

// string smtp_password = 5[json_name = "smtpPassword"];
inline void UpdateEmailsSetupRequest_EmailSender::clear_smtp_password() {
  smtp_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateEmailsSetupRequest_EmailSender::smtp_password() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_password)
  return _internal_smtp_password();
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_password(const std::string& value) {
  _internal_set_smtp_password(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_password)
}
inline std::string* UpdateEmailsSetupRequest_EmailSender::mutable_smtp_password() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_password)
  return _internal_mutable_smtp_password();
}
inline const std::string& UpdateEmailsSetupRequest_EmailSender::_internal_smtp_password() const {
  return smtp_password_.Get();
}
inline void UpdateEmailsSetupRequest_EmailSender::_internal_set_smtp_password(const std::string& value) {
  
  smtp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_password(std::string&& value) {
  
  smtp_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_password)
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  smtp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_password)
}
inline void UpdateEmailsSetupRequest_EmailSender::set_smtp_password(const char* value,
    size_t size) {
  
  smtp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_password)
}
inline std::string* UpdateEmailsSetupRequest_EmailSender::_internal_mutable_smtp_password() {
  
  return smtp_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateEmailsSetupRequest_EmailSender::release_smtp_password() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_password)
  return smtp_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEmailsSetupRequest_EmailSender::set_allocated_smtp_password(std::string* smtp_password) {
  if (smtp_password != nullptr) {
    
  } else {
    
  }
  smtp_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smtp_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender.smtp_password)
}

// -------------------------------------------------------------------

// UpdateEmailsSetupRequest

// .depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate welcome = 1[json_name = "welcome"];
inline bool UpdateEmailsSetupRequest::_internal_has_welcome() const {
  return this != internal_default_instance() && welcome_ != nullptr;
}
inline bool UpdateEmailsSetupRequest::has_welcome() const {
  return _internal_has_welcome();
}
inline void UpdateEmailsSetupRequest::clear_welcome() {
  if (GetArena() == nullptr && welcome_ != nullptr) {
    delete welcome_;
  }
  welcome_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& UpdateEmailsSetupRequest::_internal_welcome() const {
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* p = welcome_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate*>(
      &::depot::devtools::auth::v0::identity::admin::_UpdateEmailsSetupRequest_EmailTemplate_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& UpdateEmailsSetupRequest::welcome() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.welcome)
  return _internal_welcome();
}
inline void UpdateEmailsSetupRequest::unsafe_arena_set_allocated_welcome(
    ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* welcome) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(welcome_);
  }
  welcome_ = welcome;
  if (welcome) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.welcome)
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::release_welcome() {
  
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* temp = welcome_;
  welcome_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::unsafe_arena_release_welcome() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.welcome)
  
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* temp = welcome_;
  welcome_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::_internal_mutable_welcome() {
  
  if (welcome_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate>(GetArena());
    welcome_ = p;
  }
  return welcome_;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::mutable_welcome() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.welcome)
  return _internal_mutable_welcome();
}
inline void UpdateEmailsSetupRequest::set_allocated_welcome(::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* welcome) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete welcome_;
  }
  if (welcome) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(welcome);
    if (message_arena != submessage_arena) {
      welcome = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, welcome, submessage_arena);
    }
    
  } else {
    
  }
  welcome_ = welcome;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.welcome)
}

// .depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate account_verification = 2[json_name = "accountVerification"];
inline bool UpdateEmailsSetupRequest::_internal_has_account_verification() const {
  return this != internal_default_instance() && account_verification_ != nullptr;
}
inline bool UpdateEmailsSetupRequest::has_account_verification() const {
  return _internal_has_account_verification();
}
inline void UpdateEmailsSetupRequest::clear_account_verification() {
  if (GetArena() == nullptr && account_verification_ != nullptr) {
    delete account_verification_;
  }
  account_verification_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& UpdateEmailsSetupRequest::_internal_account_verification() const {
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* p = account_verification_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate*>(
      &::depot::devtools::auth::v0::identity::admin::_UpdateEmailsSetupRequest_EmailTemplate_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& UpdateEmailsSetupRequest::account_verification() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_verification)
  return _internal_account_verification();
}
inline void UpdateEmailsSetupRequest::unsafe_arena_set_allocated_account_verification(
    ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_verification) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_verification_);
  }
  account_verification_ = account_verification;
  if (account_verification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_verification)
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::release_account_verification() {
  
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* temp = account_verification_;
  account_verification_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::unsafe_arena_release_account_verification() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_verification)
  
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* temp = account_verification_;
  account_verification_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::_internal_mutable_account_verification() {
  
  if (account_verification_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate>(GetArena());
    account_verification_ = p;
  }
  return account_verification_;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::mutable_account_verification() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_verification)
  return _internal_mutable_account_verification();
}
inline void UpdateEmailsSetupRequest::set_allocated_account_verification(::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_verification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_verification_;
  }
  if (account_verification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account_verification);
    if (message_arena != submessage_arena) {
      account_verification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_verification, submessage_arena);
    }
    
  } else {
    
  }
  account_verification_ = account_verification;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_verification)
}

// .depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate account_recovery = 3[json_name = "accountRecovery"];
inline bool UpdateEmailsSetupRequest::_internal_has_account_recovery() const {
  return this != internal_default_instance() && account_recovery_ != nullptr;
}
inline bool UpdateEmailsSetupRequest::has_account_recovery() const {
  return _internal_has_account_recovery();
}
inline void UpdateEmailsSetupRequest::clear_account_recovery() {
  if (GetArena() == nullptr && account_recovery_ != nullptr) {
    delete account_recovery_;
  }
  account_recovery_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& UpdateEmailsSetupRequest::_internal_account_recovery() const {
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* p = account_recovery_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate*>(
      &::depot::devtools::auth::v0::identity::admin::_UpdateEmailsSetupRequest_EmailTemplate_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& UpdateEmailsSetupRequest::account_recovery() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_recovery)
  return _internal_account_recovery();
}
inline void UpdateEmailsSetupRequest::unsafe_arena_set_allocated_account_recovery(
    ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_recovery) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_recovery_);
  }
  account_recovery_ = account_recovery;
  if (account_recovery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_recovery)
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::release_account_recovery() {
  
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* temp = account_recovery_;
  account_recovery_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::unsafe_arena_release_account_recovery() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_recovery)
  
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* temp = account_recovery_;
  account_recovery_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::_internal_mutable_account_recovery() {
  
  if (account_recovery_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate>(GetArena());
    account_recovery_ = p;
  }
  return account_recovery_;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::mutable_account_recovery() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_recovery)
  return _internal_mutable_account_recovery();
}
inline void UpdateEmailsSetupRequest::set_allocated_account_recovery(::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_recovery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_recovery_;
  }
  if (account_recovery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account_recovery);
    if (message_arena != submessage_arena) {
      account_recovery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_recovery, submessage_arena);
    }
    
  } else {
    
  }
  account_recovery_ = account_recovery;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_recovery)
}

// .depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate account_recovered = 4[json_name = "accountRecovered"];
inline bool UpdateEmailsSetupRequest::_internal_has_account_recovered() const {
  return this != internal_default_instance() && account_recovered_ != nullptr;
}
inline bool UpdateEmailsSetupRequest::has_account_recovered() const {
  return _internal_has_account_recovered();
}
inline void UpdateEmailsSetupRequest::clear_account_recovered() {
  if (GetArena() == nullptr && account_recovered_ != nullptr) {
    delete account_recovered_;
  }
  account_recovered_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& UpdateEmailsSetupRequest::_internal_account_recovered() const {
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* p = account_recovered_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate*>(
      &::depot::devtools::auth::v0::identity::admin::_UpdateEmailsSetupRequest_EmailTemplate_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& UpdateEmailsSetupRequest::account_recovered() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_recovered)
  return _internal_account_recovered();
}
inline void UpdateEmailsSetupRequest::unsafe_arena_set_allocated_account_recovered(
    ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_recovered) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_recovered_);
  }
  account_recovered_ = account_recovered;
  if (account_recovered) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_recovered)
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::release_account_recovered() {
  
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* temp = account_recovered_;
  account_recovered_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::unsafe_arena_release_account_recovered() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_recovered)
  
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* temp = account_recovered_;
  account_recovered_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::_internal_mutable_account_recovered() {
  
  if (account_recovered_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate>(GetArena());
    account_recovered_ = p;
  }
  return account_recovered_;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::mutable_account_recovered() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_recovered)
  return _internal_mutable_account_recovered();
}
inline void UpdateEmailsSetupRequest::set_allocated_account_recovered(::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* account_recovered) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_recovered_;
  }
  if (account_recovered) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account_recovered);
    if (message_arena != submessage_arena) {
      account_recovered = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_recovered, submessage_arena);
    }
    
  } else {
    
  }
  account_recovered_ = account_recovered;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.account_recovered)
}

// .depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailTemplate otp = 5[json_name = "otp"];
inline bool UpdateEmailsSetupRequest::_internal_has_otp() const {
  return this != internal_default_instance() && otp_ != nullptr;
}
inline bool UpdateEmailsSetupRequest::has_otp() const {
  return _internal_has_otp();
}
inline void UpdateEmailsSetupRequest::clear_otp() {
  if (GetArena() == nullptr && otp_ != nullptr) {
    delete otp_;
  }
  otp_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& UpdateEmailsSetupRequest::_internal_otp() const {
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* p = otp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate*>(
      &::depot::devtools::auth::v0::identity::admin::_UpdateEmailsSetupRequest_EmailTemplate_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate& UpdateEmailsSetupRequest::otp() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.otp)
  return _internal_otp();
}
inline void UpdateEmailsSetupRequest::unsafe_arena_set_allocated_otp(
    ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* otp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(otp_);
  }
  otp_ = otp;
  if (otp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.otp)
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::release_otp() {
  
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* temp = otp_;
  otp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::unsafe_arena_release_otp() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.otp)
  
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* temp = otp_;
  otp_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::_internal_mutable_otp() {
  
  if (otp_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate>(GetArena());
    otp_ = p;
  }
  return otp_;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* UpdateEmailsSetupRequest::mutable_otp() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.otp)
  return _internal_mutable_otp();
}
inline void UpdateEmailsSetupRequest::set_allocated_otp(::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailTemplate* otp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete otp_;
  }
  if (otp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(otp);
    if (message_arena != submessage_arena) {
      otp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, otp, submessage_arena);
    }
    
  } else {
    
  }
  otp_ = otp;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.otp)
}

// .depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.EmailSender smtp = 6[json_name = "smtp"];
inline bool UpdateEmailsSetupRequest::_internal_has_smtp() const {
  return this != internal_default_instance() && smtp_ != nullptr;
}
inline bool UpdateEmailsSetupRequest::has_smtp() const {
  return _internal_has_smtp();
}
inline void UpdateEmailsSetupRequest::clear_smtp() {
  if (GetArena() == nullptr && smtp_ != nullptr) {
    delete smtp_;
  }
  smtp_ = nullptr;
}
inline const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender& UpdateEmailsSetupRequest::_internal_smtp() const {
  const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* p = smtp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender*>(
      &::depot::devtools::auth::v0::identity::admin::_UpdateEmailsSetupRequest_EmailSender_default_instance_);
}
inline const ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender& UpdateEmailsSetupRequest::smtp() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.smtp)
  return _internal_smtp();
}
inline void UpdateEmailsSetupRequest::unsafe_arena_set_allocated_smtp(
    ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* smtp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smtp_);
  }
  smtp_ = smtp;
  if (smtp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.smtp)
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* UpdateEmailsSetupRequest::release_smtp() {
  
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* temp = smtp_;
  smtp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* UpdateEmailsSetupRequest::unsafe_arena_release_smtp() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.smtp)
  
  ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* temp = smtp_;
  smtp_ = nullptr;
  return temp;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* UpdateEmailsSetupRequest::_internal_mutable_smtp() {
  
  if (smtp_ == nullptr) {
    auto* p = CreateMaybeMessage<::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender>(GetArena());
    smtp_ = p;
  }
  return smtp_;
}
inline ::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* UpdateEmailsSetupRequest::mutable_smtp() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.smtp)
  return _internal_mutable_smtp();
}
inline void UpdateEmailsSetupRequest::set_allocated_smtp(::depot::devtools::auth::v0::identity::admin::UpdateEmailsSetupRequest_EmailSender* smtp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete smtp_;
  }
  if (smtp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(smtp);
    if (message_arena != submessage_arena) {
      smtp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smtp, submessage_arena);
    }
    
  } else {
    
  }
  smtp_ = smtp;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.UpdateEmailsSetupRequest.smtp)
}

// -------------------------------------------------------------------

// UpdateEmailsSetupResponse

// -------------------------------------------------------------------

// GetUserBaseStatisticsRequest

// uint32 days_before = 1[json_name = "daysBefore"];
inline void GetUserBaseStatisticsRequest::clear_days_before() {
  days_before_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetUserBaseStatisticsRequest::_internal_days_before() const {
  return days_before_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetUserBaseStatisticsRequest::days_before() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest.days_before)
  return _internal_days_before();
}
inline void GetUserBaseStatisticsRequest::_internal_set_days_before(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  days_before_ = value;
}
inline void GetUserBaseStatisticsRequest::set_days_before(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_days_before(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest.days_before)
}

// .google.protobuf.Timestamp lifetime_start_at = 2[json_name = "lifetimeStartAt"];
inline bool GetUserBaseStatisticsRequest::_internal_has_lifetime_start_at() const {
  return this != internal_default_instance() && lifetime_start_at_ != nullptr;
}
inline bool GetUserBaseStatisticsRequest::has_lifetime_start_at() const {
  return _internal_has_lifetime_start_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetUserBaseStatisticsRequest::_internal_lifetime_start_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = lifetime_start_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetUserBaseStatisticsRequest::lifetime_start_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest.lifetime_start_at)
  return _internal_lifetime_start_at();
}
inline void GetUserBaseStatisticsRequest::unsafe_arena_set_allocated_lifetime_start_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* lifetime_start_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_start_at_);
  }
  lifetime_start_at_ = lifetime_start_at;
  if (lifetime_start_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest.lifetime_start_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetUserBaseStatisticsRequest::release_lifetime_start_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = lifetime_start_at_;
  lifetime_start_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetUserBaseStatisticsRequest::unsafe_arena_release_lifetime_start_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest.lifetime_start_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = lifetime_start_at_;
  lifetime_start_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetUserBaseStatisticsRequest::_internal_mutable_lifetime_start_at() {
  
  if (lifetime_start_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    lifetime_start_at_ = p;
  }
  return lifetime_start_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetUserBaseStatisticsRequest::mutable_lifetime_start_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest.lifetime_start_at)
  return _internal_mutable_lifetime_start_at();
}
inline void GetUserBaseStatisticsRequest::set_allocated_lifetime_start_at(PROTOBUF_NAMESPACE_ID::Timestamp* lifetime_start_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_start_at_);
  }
  if (lifetime_start_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_start_at)->GetArena();
    if (message_arena != submessage_arena) {
      lifetime_start_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifetime_start_at, submessage_arena);
    }
    
  } else {
    
  }
  lifetime_start_at_ = lifetime_start_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest.lifetime_start_at)
}

// .google.protobuf.Timestamp lifetime_end_at = 3[json_name = "lifetimeEndAt"];
inline bool GetUserBaseStatisticsRequest::_internal_has_lifetime_end_at() const {
  return this != internal_default_instance() && lifetime_end_at_ != nullptr;
}
inline bool GetUserBaseStatisticsRequest::has_lifetime_end_at() const {
  return _internal_has_lifetime_end_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetUserBaseStatisticsRequest::_internal_lifetime_end_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = lifetime_end_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetUserBaseStatisticsRequest::lifetime_end_at() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest.lifetime_end_at)
  return _internal_lifetime_end_at();
}
inline void GetUserBaseStatisticsRequest::unsafe_arena_set_allocated_lifetime_end_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* lifetime_end_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_end_at_);
  }
  lifetime_end_at_ = lifetime_end_at;
  if (lifetime_end_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest.lifetime_end_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetUserBaseStatisticsRequest::release_lifetime_end_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = lifetime_end_at_;
  lifetime_end_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetUserBaseStatisticsRequest::unsafe_arena_release_lifetime_end_at() {
  // @@protoc_insertion_point(field_release:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest.lifetime_end_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = lifetime_end_at_;
  lifetime_end_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetUserBaseStatisticsRequest::_internal_mutable_lifetime_end_at() {
  
  if (lifetime_end_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    lifetime_end_at_ = p;
  }
  return lifetime_end_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetUserBaseStatisticsRequest::mutable_lifetime_end_at() {
  // @@protoc_insertion_point(field_mutable:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest.lifetime_end_at)
  return _internal_mutable_lifetime_end_at();
}
inline void GetUserBaseStatisticsRequest::set_allocated_lifetime_end_at(PROTOBUF_NAMESPACE_ID::Timestamp* lifetime_end_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_end_at_);
  }
  if (lifetime_end_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_end_at)->GetArena();
    if (message_arena != submessage_arena) {
      lifetime_end_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifetime_end_at, submessage_arena);
    }
    
  } else {
    
  }
  lifetime_end_at_ = lifetime_end_at;
  // @@protoc_insertion_point(field_set_allocated:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsRequest.lifetime_end_at)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetUserBaseStatisticsResponse

// int32 total_users = 1[json_name = "totalUsers"];
inline void GetUserBaseStatisticsResponse::clear_total_users() {
  total_users_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserBaseStatisticsResponse::_internal_total_users() const {
  return total_users_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserBaseStatisticsResponse::total_users() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.total_users)
  return _internal_total_users();
}
inline void GetUserBaseStatisticsResponse::_internal_set_total_users(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_users_ = value;
}
inline void GetUserBaseStatisticsResponse::set_total_users(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_users(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.total_users)
}

// map<string, int32> users_per_day = 2[json_name = "usersPerDay"];
inline int GetUserBaseStatisticsResponse::_internal_users_per_day_size() const {
  return users_per_day_.size();
}
inline int GetUserBaseStatisticsResponse::users_per_day_size() const {
  return _internal_users_per_day_size();
}
inline void GetUserBaseStatisticsResponse::clear_users_per_day() {
  users_per_day_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
GetUserBaseStatisticsResponse::_internal_users_per_day() const {
  return users_per_day_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
GetUserBaseStatisticsResponse::users_per_day() const {
  // @@protoc_insertion_point(field_map:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.users_per_day)
  return _internal_users_per_day();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
GetUserBaseStatisticsResponse::_internal_mutable_users_per_day() {
  return users_per_day_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
GetUserBaseStatisticsResponse::mutable_users_per_day() {
  // @@protoc_insertion_point(field_mutable_map:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.users_per_day)
  return _internal_mutable_users_per_day();
}

// map<string, int32> sessions_per_day = 3[json_name = "sessionsPerDay"];
inline int GetUserBaseStatisticsResponse::_internal_sessions_per_day_size() const {
  return sessions_per_day_.size();
}
inline int GetUserBaseStatisticsResponse::sessions_per_day_size() const {
  return _internal_sessions_per_day_size();
}
inline void GetUserBaseStatisticsResponse::clear_sessions_per_day() {
  sessions_per_day_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
GetUserBaseStatisticsResponse::_internal_sessions_per_day() const {
  return sessions_per_day_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
GetUserBaseStatisticsResponse::sessions_per_day() const {
  // @@protoc_insertion_point(field_map:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.sessions_per_day)
  return _internal_sessions_per_day();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
GetUserBaseStatisticsResponse::_internal_mutable_sessions_per_day() {
  return sessions_per_day_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
GetUserBaseStatisticsResponse::mutable_sessions_per_day() {
  // @@protoc_insertion_point(field_mutable_map:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.sessions_per_day)
  return _internal_mutable_sessions_per_day();
}

// int32 total_active_users = 4[json_name = "totalActiveUsers"];
inline void GetUserBaseStatisticsResponse::clear_total_active_users() {
  total_active_users_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserBaseStatisticsResponse::_internal_total_active_users() const {
  return total_active_users_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserBaseStatisticsResponse::total_active_users() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.total_active_users)
  return _internal_total_active_users();
}
inline void GetUserBaseStatisticsResponse::_internal_set_total_active_users(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_active_users_ = value;
}
inline void GetUserBaseStatisticsResponse::set_total_active_users(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_active_users(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.total_active_users)
}

// double total_lifetime_used = 5[json_name = "totalLifetimeUsed"];
inline void GetUserBaseStatisticsResponse::clear_total_lifetime_used() {
  total_lifetime_used_ = 0;
}
inline double GetUserBaseStatisticsResponse::_internal_total_lifetime_used() const {
  return total_lifetime_used_;
}
inline double GetUserBaseStatisticsResponse::total_lifetime_used() const {
  // @@protoc_insertion_point(field_get:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.total_lifetime_used)
  return _internal_total_lifetime_used();
}
inline void GetUserBaseStatisticsResponse::_internal_set_total_lifetime_used(double value) {
  
  total_lifetime_used_ = value;
}
inline void GetUserBaseStatisticsResponse::set_total_lifetime_used(double value) {
  _internal_set_total_lifetime_used(value);
  // @@protoc_insertion_point(field_set:depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.total_lifetime_used)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace identity
}  // namespace v0
}  // namespace auth
}  // namespace devtools
}  // namespace depot

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Lock> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Lock>() {
  return ::depot::devtools::auth::v0::identity::admin::GetIdentitiesResponse_Lock_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_Lock> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_Lock>() {
  return ::depot::devtools::auth::v0::identity::admin::GetIdentityResponse_Lock_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_Lock> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_Lock>() {
  return ::depot::devtools::auth::v0::identity::admin::GetIdentityByIdentifierResponse_Identity_Lock_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_Lock> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_Lock>() {
  return ::depot::devtools::auth::v0::identity::admin::GetIdentitiesByAttributeResponse_Identity_Lock_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest_Lock> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest_Lock>() {
  return ::depot::devtools::auth::v0::identity::admin::UpdateIdentityRequest_Lock_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Providers> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Providers>() {
  return ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Providers_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Types> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Types>() {
  return ::depot::devtools::auth::v0::identity::admin::CreateConnectionRequest_Types_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Providers> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Providers>() {
  return ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Providers_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Types> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Types>() {
  return ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Types_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Purposes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Purposes>() {
  return ::depot::devtools::auth::v0::identity::admin::GetConnectionsResponse_Purposes_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Providers> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Providers>() {
  return ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Providers_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Types> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Types>() {
  return ::depot::devtools::auth::v0::identity::admin::UpdateConnectionRequest_Types_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::ClientType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::ClientType>() {
  return ::depot::devtools::auth::v0::identity::admin::ClientType_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::SubjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::SubjectType>() {
  return ::depot::devtools::auth::v0::identity::admin::SubjectType_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod>() {
  return ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthMethod_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg>() {
  return ::depot::devtools::auth::v0::identity::admin::TokenEndpointAuthSigningAlg_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::GrantType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::GrantType>() {
  return ::depot::devtools::auth::v0::identity::admin::GrantType_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::ResponseType>() {
  return ::depot::devtools::auth::v0::identity::admin::ResponseType_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg>() {
  return ::depot::devtools::auth::v0::identity::admin::RequestObjectSigningAlg_descriptor();
}
template <> struct is_proto_enum< ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg>() {
  return ::depot::devtools::auth::v0::identity::admin::UserinfoSignedResponseAlg_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_devtools_2fauth_2fv0_2fproto_2fidentity_2fadmin_2fadmin_2eproto
